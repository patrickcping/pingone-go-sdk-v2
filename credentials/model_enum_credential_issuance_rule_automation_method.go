/*
PingOne Platform API - Credentials

The PingOne Platform API covering the PingOne Credentials service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package credentials

import (
	"encoding/json"
	"fmt"
)

// EnumCredentialIssuanceRuleAutomationMethod Specifies the method the service uses to issue, revoke, or update credentials with the credential issuance rule: `PERIODIC` - the issuance rule is invoked by the credentials service on a scheduled interval `ON_DEMAND` - the issuance rule is invoked in real-time by the calling service applying staged changes.
type EnumCredentialIssuanceRuleAutomationMethod string

// List of EnumCredentialIssuanceRuleAutomationMethod
const (
	ENUMCREDENTIALISSUANCERULEAUTOMATIONMETHOD_PERIODIC  EnumCredentialIssuanceRuleAutomationMethod = "PERIODIC"
	ENUMCREDENTIALISSUANCERULEAUTOMATIONMETHOD_ON_DEMAND EnumCredentialIssuanceRuleAutomationMethod = "ON_DEMAND"
)

// All allowed values of EnumCredentialIssuanceRuleAutomationMethod enum
var AllowedEnumCredentialIssuanceRuleAutomationMethodEnumValues = []EnumCredentialIssuanceRuleAutomationMethod{
	"PERIODIC",
	"ON_DEMAND",
}

func (v *EnumCredentialIssuanceRuleAutomationMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumCredentialIssuanceRuleAutomationMethod(value)
	for _, existing := range AllowedEnumCredentialIssuanceRuleAutomationMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumCredentialIssuanceRuleAutomationMethod(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumCredentialIssuanceRuleAutomationMethodFromValue returns a pointer to a valid EnumCredentialIssuanceRuleAutomationMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumCredentialIssuanceRuleAutomationMethodFromValue(v string) (*EnumCredentialIssuanceRuleAutomationMethod, error) {
	ev := EnumCredentialIssuanceRuleAutomationMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumCredentialIssuanceRuleAutomationMethod: valid values are %v", v, AllowedEnumCredentialIssuanceRuleAutomationMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumCredentialIssuanceRuleAutomationMethod) IsValid() bool {
	for _, existing := range AllowedEnumCredentialIssuanceRuleAutomationMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumCredentialIssuanceRuleAutomationMethod value
func (v EnumCredentialIssuanceRuleAutomationMethod) Ptr() *EnumCredentialIssuanceRuleAutomationMethod {
	return &v
}

type NullableEnumCredentialIssuanceRuleAutomationMethod struct {
	value *EnumCredentialIssuanceRuleAutomationMethod
	isSet bool
}

func (v NullableEnumCredentialIssuanceRuleAutomationMethod) Get() *EnumCredentialIssuanceRuleAutomationMethod {
	return v.value
}

func (v *NullableEnumCredentialIssuanceRuleAutomationMethod) Set(val *EnumCredentialIssuanceRuleAutomationMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumCredentialIssuanceRuleAutomationMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumCredentialIssuanceRuleAutomationMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumCredentialIssuanceRuleAutomationMethod(val *EnumCredentialIssuanceRuleAutomationMethod) *NullableEnumCredentialIssuanceRuleAutomationMethod {
	return &NullableEnumCredentialIssuanceRuleAutomationMethod{value: val, isSet: true}
}

func (v NullableEnumCredentialIssuanceRuleAutomationMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumCredentialIssuanceRuleAutomationMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
