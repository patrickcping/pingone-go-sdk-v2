/*
PingOne Platform API - Credentials

The PingOne Platform API covering the PingOne Credentials service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package credentials

import (
	"encoding/json"
	"fmt"
)

// EnumCredentialTypeExpirationType Indicates how expiration of the credential is presented. Can be `SOFT` or `HARD`. A `SOFT` expiration appears as a user-defined field (named in `fieldName`) in the credential but returns no expiration date in [Read One User Credential](https://apidocs.pingidentity.com/pingone/platform/v1/api/#get-read-one-user-credential). A `HARD` expiration appears as a standards-based expiration field in the credential and returns an expiration date in [Read One User Credential](https://apidocs.pingidentity.com/pingone/platform/v1/api/#get-read-one-user-credential).
type EnumCredentialTypeExpirationType string

// List of EnumCredentialTypeExpirationType
const (
	ENUMCREDENTIALTYPEEXPIRATIONTYPE_SOFT EnumCredentialTypeExpirationType = "SOFT"
	ENUMCREDENTIALTYPEEXPIRATIONTYPE_HARD EnumCredentialTypeExpirationType = "HARD"
)

// All allowed values of EnumCredentialTypeExpirationType enum
var AllowedEnumCredentialTypeExpirationTypeEnumValues = []EnumCredentialTypeExpirationType{
	"SOFT",
	"HARD",
}

func (v *EnumCredentialTypeExpirationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumCredentialTypeExpirationType(value)
	for _, existing := range AllowedEnumCredentialTypeExpirationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumCredentialTypeExpirationType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumCredentialTypeExpirationTypeFromValue returns a pointer to a valid EnumCredentialTypeExpirationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumCredentialTypeExpirationTypeFromValue(v string) (*EnumCredentialTypeExpirationType, error) {
	ev := EnumCredentialTypeExpirationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumCredentialTypeExpirationType: valid values are %v", v, AllowedEnumCredentialTypeExpirationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumCredentialTypeExpirationType) IsValid() bool {
	for _, existing := range AllowedEnumCredentialTypeExpirationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumCredentialTypeExpirationType value
func (v EnumCredentialTypeExpirationType) Ptr() *EnumCredentialTypeExpirationType {
	return &v
}

type NullableEnumCredentialTypeExpirationType struct {
	value *EnumCredentialTypeExpirationType
	isSet bool
}

func (v NullableEnumCredentialTypeExpirationType) Get() *EnumCredentialTypeExpirationType {
	return v.value
}

func (v *NullableEnumCredentialTypeExpirationType) Set(val *EnumCredentialTypeExpirationType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumCredentialTypeExpirationType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumCredentialTypeExpirationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumCredentialTypeExpirationType(val *EnumCredentialTypeExpirationType) *NullableEnumCredentialTypeExpirationType {
	return &NullableEnumCredentialTypeExpirationType{value: val, isSet: true}
}

func (v NullableEnumCredentialTypeExpirationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumCredentialTypeExpirationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
