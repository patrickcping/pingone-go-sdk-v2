/*
PingOne Platform API - Credentials

The PingOne Platform API covering the PingOne Credentials service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package credentials

import (
	"encoding/json"
	"fmt"
)

// EnumCredentialTypeMetaDataFieldsFileSupport Specifies the type of data in the defined field within a credential type: `BASE64_STRING` - indicates the image stored in the field is base64-encoded and is stored directly in the credential `INCLUDE_FILE` - indicates the image stored in the field is binary and is stored directly in the credential `REFERENCE_FILE` - indicates the value is a URL referencing an image is in the credential and the image binary remains stored external to the credential
type EnumCredentialTypeMetaDataFieldsFileSupport string

// List of EnumCredentialTypeMetaDataFieldsFileSupport
const (
	ENUMCREDENTIALTYPEMETADATAFIELDSFILESUPPORT_BASE64_STRING  EnumCredentialTypeMetaDataFieldsFileSupport = "BASE64_STRING"
	ENUMCREDENTIALTYPEMETADATAFIELDSFILESUPPORT_INCLUDE_FILE   EnumCredentialTypeMetaDataFieldsFileSupport = "INCLUDE_FILE"
	ENUMCREDENTIALTYPEMETADATAFIELDSFILESUPPORT_REFERENCE_FILE EnumCredentialTypeMetaDataFieldsFileSupport = "REFERENCE_FILE"
)

// All allowed values of EnumCredentialTypeMetaDataFieldsFileSupport enum
var AllowedEnumCredentialTypeMetaDataFieldsFileSupportEnumValues = []EnumCredentialTypeMetaDataFieldsFileSupport{
	"BASE64_STRING",
	"INCLUDE_FILE",
	"REFERENCE_FILE",
}

func (v *EnumCredentialTypeMetaDataFieldsFileSupport) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumCredentialTypeMetaDataFieldsFileSupport(value)
	for _, existing := range AllowedEnumCredentialTypeMetaDataFieldsFileSupportEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumCredentialTypeMetaDataFieldsFileSupport(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumCredentialTypeMetaDataFieldsFileSupportFromValue returns a pointer to a valid EnumCredentialTypeMetaDataFieldsFileSupport
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumCredentialTypeMetaDataFieldsFileSupportFromValue(v string) (*EnumCredentialTypeMetaDataFieldsFileSupport, error) {
	ev := EnumCredentialTypeMetaDataFieldsFileSupport(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumCredentialTypeMetaDataFieldsFileSupport: valid values are %v", v, AllowedEnumCredentialTypeMetaDataFieldsFileSupportEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumCredentialTypeMetaDataFieldsFileSupport) IsValid() bool {
	for _, existing := range AllowedEnumCredentialTypeMetaDataFieldsFileSupportEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumCredentialTypeMetaDataFieldsFileSupport value
func (v EnumCredentialTypeMetaDataFieldsFileSupport) Ptr() *EnumCredentialTypeMetaDataFieldsFileSupport {
	return &v
}

type NullableEnumCredentialTypeMetaDataFieldsFileSupport struct {
	value *EnumCredentialTypeMetaDataFieldsFileSupport
	isSet bool
}

func (v NullableEnumCredentialTypeMetaDataFieldsFileSupport) Get() *EnumCredentialTypeMetaDataFieldsFileSupport {
	return v.value
}

func (v *NullableEnumCredentialTypeMetaDataFieldsFileSupport) Set(val *EnumCredentialTypeMetaDataFieldsFileSupport) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumCredentialTypeMetaDataFieldsFileSupport) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumCredentialTypeMetaDataFieldsFileSupport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumCredentialTypeMetaDataFieldsFileSupport(val *EnumCredentialTypeMetaDataFieldsFileSupport) *NullableEnumCredentialTypeMetaDataFieldsFileSupport {
	return &NullableEnumCredentialTypeMetaDataFieldsFileSupport{value: val, isSet: true}
}

func (v NullableEnumCredentialTypeMetaDataFieldsFileSupport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumCredentialTypeMetaDataFieldsFileSupport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
