/*
PingOne Platform API - Credentials

The PingOne Platform API covering the PingOne Credentials service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package credentials

import (
	"encoding/json"
	"time"
)

// checks if the CredentialTypeExpiration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CredentialTypeExpiration{}

// CredentialTypeExpiration Object that identifies how to evaluate the expiration date. Requires one and only one of `after`, `timestamp`, or `expression`. Permitted only when `management.mode` is `AUTOMATED`.
type CredentialTypeExpiration struct {
	After *CredentialTypeExpirationAfter `json:"after,omitempty"`
	// PingOne Expression Language (PEL) expression that evaluates to an ISO 8601 date. For more information on PEL, see [PingOne expression language](https://docs.pingidentity.com/pingone/pingone_expression_language/p1_expression_language.html?_gl=1*5lup6b*_gcl_au*MTU0Njc1NDk2Ny4xNzQ5MTEzMjI3*_ga*MTk5NDI3NjE3Ny4xNzQ5MTEzMjI3*_ga_V94KKVLZPT*czE3NTQ0NjU5OTQkbzEzNCRnMSR0MTc1NDQ3Mzg1OSRqNjAkbDAkaDA.).
	Expression *string `json:"expression,omitempty"`
	// On issuance, name of the field in the credential to hold the `expiration` that, when evaluated, returns an expiration date. Must be unique from all fields defined in the `metadata` object of [Create Credential Type](https://apidocs.pingidentity.com/pingone/platform/v1/api/#credentialing-metadata-object-data-model). Required when `expiration.type` is `SOFT`. Optional when `expiration.type` is `HARD` and ignored if used.
	FieldName *string `json:"fieldName,omitempty"`
	// The date and time to expire in ISO 8601 YYYY-MM-DDTHH:MM:SS.sssZ format (milliseconds optional).
	Timestamp *time.Time                       `json:"timestamp,omitempty"`
	Type      EnumCredentialTypeExpirationType `json:"type"`
}

// NewCredentialTypeExpiration instantiates a new CredentialTypeExpiration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCredentialTypeExpiration(type_ EnumCredentialTypeExpirationType) *CredentialTypeExpiration {
	this := CredentialTypeExpiration{}
	this.Type = type_
	return &this
}

// NewCredentialTypeExpirationWithDefaults instantiates a new CredentialTypeExpiration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCredentialTypeExpirationWithDefaults() *CredentialTypeExpiration {
	this := CredentialTypeExpiration{}
	return &this
}

// GetAfter returns the After field value if set, zero value otherwise.
func (o *CredentialTypeExpiration) GetAfter() CredentialTypeExpirationAfter {
	if o == nil || IsNil(o.After) {
		var ret CredentialTypeExpirationAfter
		return ret
	}
	return *o.After
}

// GetAfterOk returns a tuple with the After field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialTypeExpiration) GetAfterOk() (*CredentialTypeExpirationAfter, bool) {
	if o == nil || IsNil(o.After) {
		return nil, false
	}
	return o.After, true
}

// HasAfter returns a boolean if a field has been set.
func (o *CredentialTypeExpiration) HasAfter() bool {
	if o != nil && !IsNil(o.After) {
		return true
	}

	return false
}

// SetAfter gets a reference to the given CredentialTypeExpirationAfter and assigns it to the After field.
func (o *CredentialTypeExpiration) SetAfter(v CredentialTypeExpirationAfter) {
	o.After = &v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *CredentialTypeExpiration) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialTypeExpiration) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *CredentialTypeExpiration) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *CredentialTypeExpiration) SetExpression(v string) {
	o.Expression = &v
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *CredentialTypeExpiration) GetFieldName() string {
	if o == nil || IsNil(o.FieldName) {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialTypeExpiration) GetFieldNameOk() (*string, bool) {
	if o == nil || IsNil(o.FieldName) {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *CredentialTypeExpiration) HasFieldName() bool {
	if o != nil && !IsNil(o.FieldName) {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *CredentialTypeExpiration) SetFieldName(v string) {
	o.FieldName = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *CredentialTypeExpiration) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialTypeExpiration) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *CredentialTypeExpiration) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *CredentialTypeExpiration) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetType returns the Type field value
func (o *CredentialTypeExpiration) GetType() EnumCredentialTypeExpirationType {
	if o == nil {
		var ret EnumCredentialTypeExpirationType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CredentialTypeExpiration) GetTypeOk() (*EnumCredentialTypeExpirationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CredentialTypeExpiration) SetType(v EnumCredentialTypeExpirationType) {
	o.Type = v
}

func (o CredentialTypeExpiration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CredentialTypeExpiration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.After) {
		toSerialize["after"] = o.After
	}
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	if !IsNil(o.FieldName) {
		toSerialize["fieldName"] = o.FieldName
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableCredentialTypeExpiration struct {
	value *CredentialTypeExpiration
	isSet bool
}

func (v NullableCredentialTypeExpiration) Get() *CredentialTypeExpiration {
	return v.value
}

func (v *NullableCredentialTypeExpiration) Set(val *CredentialTypeExpiration) {
	v.value = val
	v.isSet = true
}

func (v NullableCredentialTypeExpiration) IsSet() bool {
	return v.isSet
}

func (v *NullableCredentialTypeExpiration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCredentialTypeExpiration(val *CredentialTypeExpiration) *NullableCredentialTypeExpiration {
	return &NullableCredentialTypeExpiration{value: val, isSet: true}
}

func (v NullableCredentialTypeExpiration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCredentialTypeExpiration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
