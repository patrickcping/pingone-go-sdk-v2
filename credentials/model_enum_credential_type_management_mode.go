/*
PingOne Platform API - Credentials

The PingOne Platform API covering the PingOne Credentials service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package credentials

import (
	"encoding/json"
	"fmt"
)

// EnumCredentialTypeManagementMode Specifies the mechanism used to manage the lifecycle of the credential type.
type EnumCredentialTypeManagementMode string

// List of EnumCredentialTypeManagementMode
const (
	ENUMCREDENTIALTYPEMANAGEMENTMODE_AUTOMATED EnumCredentialTypeManagementMode = "AUTOMATED"
	ENUMCREDENTIALTYPEMANAGEMENTMODE_MANAGED   EnumCredentialTypeManagementMode = "MANAGED"
)

// All allowed values of EnumCredentialTypeManagementMode enum
var AllowedEnumCredentialTypeManagementModeEnumValues = []EnumCredentialTypeManagementMode{
	"AUTOMATED",
	"MANAGED",
}

func (v *EnumCredentialTypeManagementMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumCredentialTypeManagementMode(value)
	for _, existing := range AllowedEnumCredentialTypeManagementModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumCredentialTypeManagementMode(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumCredentialTypeManagementModeFromValue returns a pointer to a valid EnumCredentialTypeManagementMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumCredentialTypeManagementModeFromValue(v string) (*EnumCredentialTypeManagementMode, error) {
	ev := EnumCredentialTypeManagementMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumCredentialTypeManagementMode: valid values are %v", v, AllowedEnumCredentialTypeManagementModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumCredentialTypeManagementMode) IsValid() bool {
	for _, existing := range AllowedEnumCredentialTypeManagementModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumCredentialTypeManagementMode value
func (v EnumCredentialTypeManagementMode) Ptr() *EnumCredentialTypeManagementMode {
	return &v
}

type NullableEnumCredentialTypeManagementMode struct {
	value *EnumCredentialTypeManagementMode
	isSet bool
}

func (v NullableEnumCredentialTypeManagementMode) Get() *EnumCredentialTypeManagementMode {
	return v.value
}

func (v *NullableEnumCredentialTypeManagementMode) Set(val *EnumCredentialTypeManagementMode) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumCredentialTypeManagementMode) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumCredentialTypeManagementMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumCredentialTypeManagementMode(val *EnumCredentialTypeManagementMode) *NullableEnumCredentialTypeManagementMode {
	return &NullableEnumCredentialTypeManagementMode{value: val, isSet: true}
}

func (v NullableEnumCredentialTypeManagementMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumCredentialTypeManagementMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
