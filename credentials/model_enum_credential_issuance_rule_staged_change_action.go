/*
PingOne Platform API - Credentials

The PingOne Platform API covering the PingOne Credentials service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package credentials

import (
	"encoding/json"
	"fmt"
)

// EnumCredentialIssuanceRuleStagedChangeAction Specifies the ISSUE, UPDATE, or REVOKE action determined by the service that should be taken for the credential based on the request that staged it.
type EnumCredentialIssuanceRuleStagedChangeAction string

// List of EnumCredentialIssuanceRuleStagedChangeAction
const (
	ENUMCREDENTIALISSUANCERULESTAGEDCHANGEACTION_ISSUE  EnumCredentialIssuanceRuleStagedChangeAction = "ISSUE"
	ENUMCREDENTIALISSUANCERULESTAGEDCHANGEACTION_UPDATE EnumCredentialIssuanceRuleStagedChangeAction = "UPDATE"
	ENUMCREDENTIALISSUANCERULESTAGEDCHANGEACTION_REVOKE EnumCredentialIssuanceRuleStagedChangeAction = "REVOKE"
)

// All allowed values of EnumCredentialIssuanceRuleStagedChangeAction enum
var AllowedEnumCredentialIssuanceRuleStagedChangeActionEnumValues = []EnumCredentialIssuanceRuleStagedChangeAction{
	"ISSUE",
	"UPDATE",
	"REVOKE",
}

func (v *EnumCredentialIssuanceRuleStagedChangeAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumCredentialIssuanceRuleStagedChangeAction(value)
	for _, existing := range AllowedEnumCredentialIssuanceRuleStagedChangeActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumCredentialIssuanceRuleStagedChangeAction(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumCredentialIssuanceRuleStagedChangeActionFromValue returns a pointer to a valid EnumCredentialIssuanceRuleStagedChangeAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumCredentialIssuanceRuleStagedChangeActionFromValue(v string) (*EnumCredentialIssuanceRuleStagedChangeAction, error) {
	ev := EnumCredentialIssuanceRuleStagedChangeAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumCredentialIssuanceRuleStagedChangeAction: valid values are %v", v, AllowedEnumCredentialIssuanceRuleStagedChangeActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumCredentialIssuanceRuleStagedChangeAction) IsValid() bool {
	for _, existing := range AllowedEnumCredentialIssuanceRuleStagedChangeActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumCredentialIssuanceRuleStagedChangeAction value
func (v EnumCredentialIssuanceRuleStagedChangeAction) Ptr() *EnumCredentialIssuanceRuleStagedChangeAction {
	return &v
}

type NullableEnumCredentialIssuanceRuleStagedChangeAction struct {
	value *EnumCredentialIssuanceRuleStagedChangeAction
	isSet bool
}

func (v NullableEnumCredentialIssuanceRuleStagedChangeAction) Get() *EnumCredentialIssuanceRuleStagedChangeAction {
	return v.value
}

func (v *NullableEnumCredentialIssuanceRuleStagedChangeAction) Set(val *EnumCredentialIssuanceRuleStagedChangeAction) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumCredentialIssuanceRuleStagedChangeAction) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumCredentialIssuanceRuleStagedChangeAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumCredentialIssuanceRuleStagedChangeAction(val *EnumCredentialIssuanceRuleStagedChangeAction) *NullableEnumCredentialIssuanceRuleStagedChangeAction {
	return &NullableEnumCredentialIssuanceRuleStagedChangeAction{value: val, isSet: true}
}

func (v NullableEnumCredentialIssuanceRuleStagedChangeAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumCredentialIssuanceRuleStagedChangeAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
