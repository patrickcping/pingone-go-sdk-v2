/*
PingOne Platform API - Credentials

The PingOne Platform API covering the PingOne Credentials service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package credentials

import (
	"encoding/json"
	"fmt"
)

// EnumCDigitalWalletProvisionedCredentialWalletAction Specifies the action taken regarding the provisioned credentia.
type EnumCDigitalWalletProvisionedCredentialWalletAction string

// List of EnumCDigitalWalletProvisionedCredentialWalletAction
const (
	ENUMCDIGITALWALLETPROVISIONEDCREDENTIALWALLETACTION_ACCEPTED EnumCDigitalWalletProvisionedCredentialWalletAction = "CREDENTIAL_ACCEPTED"
	ENUMCDIGITALWALLETPROVISIONEDCREDENTIALWALLETACTION_REJECTED EnumCDigitalWalletProvisionedCredentialWalletAction = "CREDENTIAL_REJECTED"
	ENUMCDIGITALWALLETPROVISIONEDCREDENTIALWALLETACTION_REVOKED  EnumCDigitalWalletProvisionedCredentialWalletAction = "CREDENTIAL_REVOKED"
	ENUMCDIGITALWALLETPROVISIONEDCREDENTIALWALLETACTION_DELETED  EnumCDigitalWalletProvisionedCredentialWalletAction = "CREDENTIAL_DELETED"
)

// All allowed values of EnumCDigitalWalletProvisionedCredentialWalletAction enum
var AllowedEnumCDigitalWalletProvisionedCredentialWalletActionEnumValues = []EnumCDigitalWalletProvisionedCredentialWalletAction{
	"CREDENTIAL_ACCEPTED",
	"CREDENTIAL_REJECTED",
	"CREDENTIAL_REVOKED",
	"CREDENTIAL_DELETED",
}

func (v *EnumCDigitalWalletProvisionedCredentialWalletAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumCDigitalWalletProvisionedCredentialWalletAction(value)
	for _, existing := range AllowedEnumCDigitalWalletProvisionedCredentialWalletActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumCDigitalWalletProvisionedCredentialWalletAction(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumCDigitalWalletProvisionedCredentialWalletActionFromValue returns a pointer to a valid EnumCDigitalWalletProvisionedCredentialWalletAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumCDigitalWalletProvisionedCredentialWalletActionFromValue(v string) (*EnumCDigitalWalletProvisionedCredentialWalletAction, error) {
	ev := EnumCDigitalWalletProvisionedCredentialWalletAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumCDigitalWalletProvisionedCredentialWalletAction: valid values are %v", v, AllowedEnumCDigitalWalletProvisionedCredentialWalletActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumCDigitalWalletProvisionedCredentialWalletAction) IsValid() bool {
	for _, existing := range AllowedEnumCDigitalWalletProvisionedCredentialWalletActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumCDigitalWalletProvisionedCredentialWalletAction value
func (v EnumCDigitalWalletProvisionedCredentialWalletAction) Ptr() *EnumCDigitalWalletProvisionedCredentialWalletAction {
	return &v
}

type NullableEnumCDigitalWalletProvisionedCredentialWalletAction struct {
	value *EnumCDigitalWalletProvisionedCredentialWalletAction
	isSet bool
}

func (v NullableEnumCDigitalWalletProvisionedCredentialWalletAction) Get() *EnumCDigitalWalletProvisionedCredentialWalletAction {
	return v.value
}

func (v *NullableEnumCDigitalWalletProvisionedCredentialWalletAction) Set(val *EnumCDigitalWalletProvisionedCredentialWalletAction) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumCDigitalWalletProvisionedCredentialWalletAction) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumCDigitalWalletProvisionedCredentialWalletAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumCDigitalWalletProvisionedCredentialWalletAction(val *EnumCDigitalWalletProvisionedCredentialWalletAction) *NullableEnumCDigitalWalletProvisionedCredentialWalletAction {
	return &NullableEnumCDigitalWalletProvisionedCredentialWalletAction{value: val, isSet: true}
}

func (v NullableEnumCDigitalWalletProvisionedCredentialWalletAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumCDigitalWalletProvisionedCredentialWalletAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
