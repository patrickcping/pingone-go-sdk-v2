/*
PingOne Platform API - PingOne MFA

The PingOne Platform API covering the PingOne MFA service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mfa

import (
	"encoding/json"
)

// checks if the DeviceAuthenticationPolicyPingIDDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceAuthenticationPolicyPingIDDevice{}

// DeviceAuthenticationPolicyPingIDDevice struct for DeviceAuthenticationPolicyPingIDDevice
type DeviceAuthenticationPolicyPingIDDevice struct {
	// Enabled or disabled in the policy.
	Enabled bool `json:"enabled"`
	// You can set `pairingDisabled` to true to prevent users from pairing new devices with the relevant method. You can use this option if you want to phase out an existing authentication method but want to allow users to continue using the method for authentication for existing devices.
	PairingDisabled *bool                                     `json:"pairingDisabled,omitempty"`
	Otp             DeviceAuthenticationPolicyPingIDDeviceOtp `json:"otp"`
	// Set to `true` if you want to allow users to provide nicknames for devices during pairing.
	PromptForNicknameOnPairing *bool                                                     `json:"promptForNicknameOnPairing,omitempty"`
	PairingKeyLifetime         *DeviceAuthenticationPolicyPingIDDevicePairingKeyLifetime `json:"pairingKeyLifetime,omitempty"`
}

// NewDeviceAuthenticationPolicyPingIDDevice instantiates a new DeviceAuthenticationPolicyPingIDDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceAuthenticationPolicyPingIDDevice(enabled bool, otp DeviceAuthenticationPolicyPingIDDeviceOtp) *DeviceAuthenticationPolicyPingIDDevice {
	this := DeviceAuthenticationPolicyPingIDDevice{}
	this.Enabled = enabled
	this.Otp = otp
	return &this
}

// NewDeviceAuthenticationPolicyPingIDDeviceWithDefaults instantiates a new DeviceAuthenticationPolicyPingIDDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceAuthenticationPolicyPingIDDeviceWithDefaults() *DeviceAuthenticationPolicyPingIDDevice {
	this := DeviceAuthenticationPolicyPingIDDevice{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *DeviceAuthenticationPolicyPingIDDevice) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyPingIDDevice) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *DeviceAuthenticationPolicyPingIDDevice) SetEnabled(v bool) {
	o.Enabled = v
}

// GetPairingDisabled returns the PairingDisabled field value if set, zero value otherwise.
func (o *DeviceAuthenticationPolicyPingIDDevice) GetPairingDisabled() bool {
	if o == nil || IsNil(o.PairingDisabled) {
		var ret bool
		return ret
	}
	return *o.PairingDisabled
}

// GetPairingDisabledOk returns a tuple with the PairingDisabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyPingIDDevice) GetPairingDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PairingDisabled) {
		return nil, false
	}
	return o.PairingDisabled, true
}

// HasPairingDisabled returns a boolean if a field has been set.
func (o *DeviceAuthenticationPolicyPingIDDevice) HasPairingDisabled() bool {
	if o != nil && !IsNil(o.PairingDisabled) {
		return true
	}

	return false
}

// SetPairingDisabled gets a reference to the given bool and assigns it to the PairingDisabled field.
func (o *DeviceAuthenticationPolicyPingIDDevice) SetPairingDisabled(v bool) {
	o.PairingDisabled = &v
}

// GetOtp returns the Otp field value
func (o *DeviceAuthenticationPolicyPingIDDevice) GetOtp() DeviceAuthenticationPolicyPingIDDeviceOtp {
	if o == nil {
		var ret DeviceAuthenticationPolicyPingIDDeviceOtp
		return ret
	}

	return o.Otp
}

// GetOtpOk returns a tuple with the Otp field value
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyPingIDDevice) GetOtpOk() (*DeviceAuthenticationPolicyPingIDDeviceOtp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Otp, true
}

// SetOtp sets field value
func (o *DeviceAuthenticationPolicyPingIDDevice) SetOtp(v DeviceAuthenticationPolicyPingIDDeviceOtp) {
	o.Otp = v
}

// GetPromptForNicknameOnPairing returns the PromptForNicknameOnPairing field value if set, zero value otherwise.
func (o *DeviceAuthenticationPolicyPingIDDevice) GetPromptForNicknameOnPairing() bool {
	if o == nil || IsNil(o.PromptForNicknameOnPairing) {
		var ret bool
		return ret
	}
	return *o.PromptForNicknameOnPairing
}

// GetPromptForNicknameOnPairingOk returns a tuple with the PromptForNicknameOnPairing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyPingIDDevice) GetPromptForNicknameOnPairingOk() (*bool, bool) {
	if o == nil || IsNil(o.PromptForNicknameOnPairing) {
		return nil, false
	}
	return o.PromptForNicknameOnPairing, true
}

// HasPromptForNicknameOnPairing returns a boolean if a field has been set.
func (o *DeviceAuthenticationPolicyPingIDDevice) HasPromptForNicknameOnPairing() bool {
	if o != nil && !IsNil(o.PromptForNicknameOnPairing) {
		return true
	}

	return false
}

// SetPromptForNicknameOnPairing gets a reference to the given bool and assigns it to the PromptForNicknameOnPairing field.
func (o *DeviceAuthenticationPolicyPingIDDevice) SetPromptForNicknameOnPairing(v bool) {
	o.PromptForNicknameOnPairing = &v
}

// GetPairingKeyLifetime returns the PairingKeyLifetime field value if set, zero value otherwise.
func (o *DeviceAuthenticationPolicyPingIDDevice) GetPairingKeyLifetime() DeviceAuthenticationPolicyPingIDDevicePairingKeyLifetime {
	if o == nil || IsNil(o.PairingKeyLifetime) {
		var ret DeviceAuthenticationPolicyPingIDDevicePairingKeyLifetime
		return ret
	}
	return *o.PairingKeyLifetime
}

// GetPairingKeyLifetimeOk returns a tuple with the PairingKeyLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyPingIDDevice) GetPairingKeyLifetimeOk() (*DeviceAuthenticationPolicyPingIDDevicePairingKeyLifetime, bool) {
	if o == nil || IsNil(o.PairingKeyLifetime) {
		return nil, false
	}
	return o.PairingKeyLifetime, true
}

// HasPairingKeyLifetime returns a boolean if a field has been set.
func (o *DeviceAuthenticationPolicyPingIDDevice) HasPairingKeyLifetime() bool {
	if o != nil && !IsNil(o.PairingKeyLifetime) {
		return true
	}

	return false
}

// SetPairingKeyLifetime gets a reference to the given DeviceAuthenticationPolicyPingIDDevicePairingKeyLifetime and assigns it to the PairingKeyLifetime field.
func (o *DeviceAuthenticationPolicyPingIDDevice) SetPairingKeyLifetime(v DeviceAuthenticationPolicyPingIDDevicePairingKeyLifetime) {
	o.PairingKeyLifetime = &v
}

func (o DeviceAuthenticationPolicyPingIDDevice) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceAuthenticationPolicyPingIDDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.PairingDisabled) {
		toSerialize["pairingDisabled"] = o.PairingDisabled
	}
	toSerialize["otp"] = o.Otp
	if !IsNil(o.PromptForNicknameOnPairing) {
		toSerialize["promptForNicknameOnPairing"] = o.PromptForNicknameOnPairing
	}
	if !IsNil(o.PairingKeyLifetime) {
		toSerialize["pairingKeyLifetime"] = o.PairingKeyLifetime
	}
	return toSerialize, nil
}

type NullableDeviceAuthenticationPolicyPingIDDevice struct {
	value *DeviceAuthenticationPolicyPingIDDevice
	isSet bool
}

func (v NullableDeviceAuthenticationPolicyPingIDDevice) Get() *DeviceAuthenticationPolicyPingIDDevice {
	return v.value
}

func (v *NullableDeviceAuthenticationPolicyPingIDDevice) Set(val *DeviceAuthenticationPolicyPingIDDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceAuthenticationPolicyPingIDDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceAuthenticationPolicyPingIDDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceAuthenticationPolicyPingIDDevice(val *DeviceAuthenticationPolicyPingIDDevice) *NullableDeviceAuthenticationPolicyPingIDDevice {
	return &NullableDeviceAuthenticationPolicyPingIDDevice{value: val, isSet: true}
}

func (v NullableDeviceAuthenticationPolicyPingIDDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceAuthenticationPolicyPingIDDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
