/*
PingOne Platform API - PingOne MFA

The PingOne Platform API covering the PingOne MFA service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mfa

import (
	"encoding/json"
	"fmt"
)

// EnumFIDO2PolicyMDSAuthenticatorOption Use `option` to specify the types of devices you want to allow on the basis of the attestation provided. Can be one of the following values: - `NONE` - do not request attestation, allow all FIDO devices - `AUDIT_ONLY` - attestation is requested and the information is used for logging purposes, but the information is not used for filtering authenticators - `GLOBAL` - allow use of all FIDO authenticators listed in the Global Authenticators table. - `CERTIFIED` - allow only FIDO Certified authenticators - `SPECIFIC` - allow only the authenticators specified with the `mdsAuthenticatorsRequirements.allowedAuthenticators` parameter.
type EnumFIDO2PolicyMDSAuthenticatorOption string

// List of EnumFIDO2PolicyMDSAuthenticatorOption
const (
	ENUMFIDO2POLICYMDSAUTHENTICATOROPTION_NONE       EnumFIDO2PolicyMDSAuthenticatorOption = "NONE"
	ENUMFIDO2POLICYMDSAUTHENTICATOROPTION_AUDIT_ONLY EnumFIDO2PolicyMDSAuthenticatorOption = "AUDIT_ONLY"
	ENUMFIDO2POLICYMDSAUTHENTICATOROPTION_GLOBAL     EnumFIDO2PolicyMDSAuthenticatorOption = "GLOBAL"
	ENUMFIDO2POLICYMDSAUTHENTICATOROPTION_CERTIFIED  EnumFIDO2PolicyMDSAuthenticatorOption = "CERTIFIED"
	ENUMFIDO2POLICYMDSAUTHENTICATOROPTION_SPECIFIC   EnumFIDO2PolicyMDSAuthenticatorOption = "SPECIFIC"
)

// All allowed values of EnumFIDO2PolicyMDSAuthenticatorOption enum
var AllowedEnumFIDO2PolicyMDSAuthenticatorOptionEnumValues = []EnumFIDO2PolicyMDSAuthenticatorOption{
	"NONE",
	"AUDIT_ONLY",
	"GLOBAL",
	"CERTIFIED",
	"SPECIFIC",
}

func (v *EnumFIDO2PolicyMDSAuthenticatorOption) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumFIDO2PolicyMDSAuthenticatorOption(value)
	for _, existing := range AllowedEnumFIDO2PolicyMDSAuthenticatorOptionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumFIDO2PolicyMDSAuthenticatorOption", value)
}

// NewEnumFIDO2PolicyMDSAuthenticatorOptionFromValue returns a pointer to a valid EnumFIDO2PolicyMDSAuthenticatorOption
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumFIDO2PolicyMDSAuthenticatorOptionFromValue(v string) (*EnumFIDO2PolicyMDSAuthenticatorOption, error) {
	ev := EnumFIDO2PolicyMDSAuthenticatorOption(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumFIDO2PolicyMDSAuthenticatorOption: valid values are %v", v, AllowedEnumFIDO2PolicyMDSAuthenticatorOptionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumFIDO2PolicyMDSAuthenticatorOption) IsValid() bool {
	for _, existing := range AllowedEnumFIDO2PolicyMDSAuthenticatorOptionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumFIDO2PolicyMDSAuthenticatorOption value
func (v EnumFIDO2PolicyMDSAuthenticatorOption) Ptr() *EnumFIDO2PolicyMDSAuthenticatorOption {
	return &v
}

type NullableEnumFIDO2PolicyMDSAuthenticatorOption struct {
	value *EnumFIDO2PolicyMDSAuthenticatorOption
	isSet bool
}

func (v NullableEnumFIDO2PolicyMDSAuthenticatorOption) Get() *EnumFIDO2PolicyMDSAuthenticatorOption {
	return v.value
}

func (v *NullableEnumFIDO2PolicyMDSAuthenticatorOption) Set(val *EnumFIDO2PolicyMDSAuthenticatorOption) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumFIDO2PolicyMDSAuthenticatorOption) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumFIDO2PolicyMDSAuthenticatorOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumFIDO2PolicyMDSAuthenticatorOption(val *EnumFIDO2PolicyMDSAuthenticatorOption) *NullableEnumFIDO2PolicyMDSAuthenticatorOption {
	return &NullableEnumFIDO2PolicyMDSAuthenticatorOption{value: val, isSet: true}
}

func (v NullableEnumFIDO2PolicyMDSAuthenticatorOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumFIDO2PolicyMDSAuthenticatorOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
