/*
PingOne Platform API - PingOne MFA

The PingOne Platform API covering the PingOne MFA service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mfa

import (
	"encoding/json"
	"time"
)

// checks if the DeviceAuthenticationPolicyCommon type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceAuthenticationPolicyCommon{}

// DeviceAuthenticationPolicyCommon struct for DeviceAuthenticationPolicyCommon
type DeviceAuthenticationPolicyCommon struct {
	Links       *map[string]LinksHATEOASValue `json:"_links,omitempty"`
	Environment *ObjectEnvironment            `json:"environment,omitempty"`
	// Device authentication policy's UUID.
	Id *string `json:"id,omitempty"`
	// Device authentication policy's name.
	Name                  string                                          `json:"name"`
	NewDeviceNotification *EnumMFADevicePolicyNewDeviceNotification       `json:"newDeviceNotification,omitempty"`
	Authentication        *DeviceAuthenticationPolicyCommonAuthentication `json:"authentication,omitempty"`
	Sms                   DeviceAuthenticationPolicyOfflineDevice         `json:"sms"`
	Voice                 DeviceAuthenticationPolicyOfflineDevice         `json:"voice"`
	Email                 DeviceAuthenticationPolicyOfflineDevice         `json:"email"`
	Fido2                 *DeviceAuthenticationPolicyCommonFido2          `json:"fido2,omitempty"`
	Totp                  DeviceAuthenticationPolicyCommonTotp            `json:"totp"`
	// A boolean that specifies whether the policy is the default for the environment.
	Default bool `json:"default"`
	// Deprecated
	ForSignOnPolicy bool `json:"forSignOnPolicy"`
	// When applying an MFA policy, PingOne ordinarily checks if a user account is locked, and if so, prevents the user from authenticating. Set `ignoreUserLock` to `true` if you want PingOne to skip this account lock check.
	IgnoreUserLock      *bool                                                `json:"ignoreUserLock,omitempty"`
	NotificationsPolicy *DeviceAuthenticationPolicyCommonNotificationsPolicy `json:"notificationsPolicy,omitempty"`
	RememberMe          *DeviceAuthenticationPolicyCommonRememberMe          `json:"rememberMe,omitempty"`
	// The time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// NewDeviceAuthenticationPolicyCommon instantiates a new DeviceAuthenticationPolicyCommon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceAuthenticationPolicyCommon(name string, sms DeviceAuthenticationPolicyOfflineDevice, voice DeviceAuthenticationPolicyOfflineDevice, email DeviceAuthenticationPolicyOfflineDevice, totp DeviceAuthenticationPolicyCommonTotp, default_ bool, forSignOnPolicy bool) *DeviceAuthenticationPolicyCommon {
	this := DeviceAuthenticationPolicyCommon{}
	this.Name = name
	this.Sms = sms
	this.Voice = voice
	this.Email = email
	this.Totp = totp
	this.Default = default_
	this.ForSignOnPolicy = forSignOnPolicy
	return &this
}

// NewDeviceAuthenticationPolicyCommonWithDefaults instantiates a new DeviceAuthenticationPolicyCommon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceAuthenticationPolicyCommonWithDefaults() *DeviceAuthenticationPolicyCommon {
	this := DeviceAuthenticationPolicyCommon{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *DeviceAuthenticationPolicyCommon) GetLinks() map[string]LinksHATEOASValue {
	if o == nil || IsNil(o.Links) {
		var ret map[string]LinksHATEOASValue
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyCommon) GetLinksOk() (*map[string]LinksHATEOASValue, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *DeviceAuthenticationPolicyCommon) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]LinksHATEOASValue and assigns it to the Links field.
func (o *DeviceAuthenticationPolicyCommon) SetLinks(v map[string]LinksHATEOASValue) {
	o.Links = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *DeviceAuthenticationPolicyCommon) GetEnvironment() ObjectEnvironment {
	if o == nil || IsNil(o.Environment) {
		var ret ObjectEnvironment
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyCommon) GetEnvironmentOk() (*ObjectEnvironment, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *DeviceAuthenticationPolicyCommon) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given ObjectEnvironment and assigns it to the Environment field.
func (o *DeviceAuthenticationPolicyCommon) SetEnvironment(v ObjectEnvironment) {
	o.Environment = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeviceAuthenticationPolicyCommon) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyCommon) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeviceAuthenticationPolicyCommon) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DeviceAuthenticationPolicyCommon) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *DeviceAuthenticationPolicyCommon) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyCommon) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DeviceAuthenticationPolicyCommon) SetName(v string) {
	o.Name = v
}

// GetNewDeviceNotification returns the NewDeviceNotification field value if set, zero value otherwise.
func (o *DeviceAuthenticationPolicyCommon) GetNewDeviceNotification() EnumMFADevicePolicyNewDeviceNotification {
	if o == nil || IsNil(o.NewDeviceNotification) {
		var ret EnumMFADevicePolicyNewDeviceNotification
		return ret
	}
	return *o.NewDeviceNotification
}

// GetNewDeviceNotificationOk returns a tuple with the NewDeviceNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyCommon) GetNewDeviceNotificationOk() (*EnumMFADevicePolicyNewDeviceNotification, bool) {
	if o == nil || IsNil(o.NewDeviceNotification) {
		return nil, false
	}
	return o.NewDeviceNotification, true
}

// HasNewDeviceNotification returns a boolean if a field has been set.
func (o *DeviceAuthenticationPolicyCommon) HasNewDeviceNotification() bool {
	if o != nil && !IsNil(o.NewDeviceNotification) {
		return true
	}

	return false
}

// SetNewDeviceNotification gets a reference to the given EnumMFADevicePolicyNewDeviceNotification and assigns it to the NewDeviceNotification field.
func (o *DeviceAuthenticationPolicyCommon) SetNewDeviceNotification(v EnumMFADevicePolicyNewDeviceNotification) {
	o.NewDeviceNotification = &v
}

// GetAuthentication returns the Authentication field value if set, zero value otherwise.
func (o *DeviceAuthenticationPolicyCommon) GetAuthentication() DeviceAuthenticationPolicyCommonAuthentication {
	if o == nil || IsNil(o.Authentication) {
		var ret DeviceAuthenticationPolicyCommonAuthentication
		return ret
	}
	return *o.Authentication
}

// GetAuthenticationOk returns a tuple with the Authentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyCommon) GetAuthenticationOk() (*DeviceAuthenticationPolicyCommonAuthentication, bool) {
	if o == nil || IsNil(o.Authentication) {
		return nil, false
	}
	return o.Authentication, true
}

// HasAuthentication returns a boolean if a field has been set.
func (o *DeviceAuthenticationPolicyCommon) HasAuthentication() bool {
	if o != nil && !IsNil(o.Authentication) {
		return true
	}

	return false
}

// SetAuthentication gets a reference to the given DeviceAuthenticationPolicyCommonAuthentication and assigns it to the Authentication field.
func (o *DeviceAuthenticationPolicyCommon) SetAuthentication(v DeviceAuthenticationPolicyCommonAuthentication) {
	o.Authentication = &v
}

// GetSms returns the Sms field value
func (o *DeviceAuthenticationPolicyCommon) GetSms() DeviceAuthenticationPolicyOfflineDevice {
	if o == nil {
		var ret DeviceAuthenticationPolicyOfflineDevice
		return ret
	}

	return o.Sms
}

// GetSmsOk returns a tuple with the Sms field value
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyCommon) GetSmsOk() (*DeviceAuthenticationPolicyOfflineDevice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sms, true
}

// SetSms sets field value
func (o *DeviceAuthenticationPolicyCommon) SetSms(v DeviceAuthenticationPolicyOfflineDevice) {
	o.Sms = v
}

// GetVoice returns the Voice field value
func (o *DeviceAuthenticationPolicyCommon) GetVoice() DeviceAuthenticationPolicyOfflineDevice {
	if o == nil {
		var ret DeviceAuthenticationPolicyOfflineDevice
		return ret
	}

	return o.Voice
}

// GetVoiceOk returns a tuple with the Voice field value
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyCommon) GetVoiceOk() (*DeviceAuthenticationPolicyOfflineDevice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Voice, true
}

// SetVoice sets field value
func (o *DeviceAuthenticationPolicyCommon) SetVoice(v DeviceAuthenticationPolicyOfflineDevice) {
	o.Voice = v
}

// GetEmail returns the Email field value
func (o *DeviceAuthenticationPolicyCommon) GetEmail() DeviceAuthenticationPolicyOfflineDevice {
	if o == nil {
		var ret DeviceAuthenticationPolicyOfflineDevice
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyCommon) GetEmailOk() (*DeviceAuthenticationPolicyOfflineDevice, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *DeviceAuthenticationPolicyCommon) SetEmail(v DeviceAuthenticationPolicyOfflineDevice) {
	o.Email = v
}

// GetFido2 returns the Fido2 field value if set, zero value otherwise.
func (o *DeviceAuthenticationPolicyCommon) GetFido2() DeviceAuthenticationPolicyCommonFido2 {
	if o == nil || IsNil(o.Fido2) {
		var ret DeviceAuthenticationPolicyCommonFido2
		return ret
	}
	return *o.Fido2
}

// GetFido2Ok returns a tuple with the Fido2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyCommon) GetFido2Ok() (*DeviceAuthenticationPolicyCommonFido2, bool) {
	if o == nil || IsNil(o.Fido2) {
		return nil, false
	}
	return o.Fido2, true
}

// HasFido2 returns a boolean if a field has been set.
func (o *DeviceAuthenticationPolicyCommon) HasFido2() bool {
	if o != nil && !IsNil(o.Fido2) {
		return true
	}

	return false
}

// SetFido2 gets a reference to the given DeviceAuthenticationPolicyCommonFido2 and assigns it to the Fido2 field.
func (o *DeviceAuthenticationPolicyCommon) SetFido2(v DeviceAuthenticationPolicyCommonFido2) {
	o.Fido2 = &v
}

// GetTotp returns the Totp field value
func (o *DeviceAuthenticationPolicyCommon) GetTotp() DeviceAuthenticationPolicyCommonTotp {
	if o == nil {
		var ret DeviceAuthenticationPolicyCommonTotp
		return ret
	}

	return o.Totp
}

// GetTotpOk returns a tuple with the Totp field value
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyCommon) GetTotpOk() (*DeviceAuthenticationPolicyCommonTotp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Totp, true
}

// SetTotp sets field value
func (o *DeviceAuthenticationPolicyCommon) SetTotp(v DeviceAuthenticationPolicyCommonTotp) {
	o.Totp = v
}

// GetDefault returns the Default field value
func (o *DeviceAuthenticationPolicyCommon) GetDefault() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Default
}

// GetDefaultOk returns a tuple with the Default field value
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyCommon) GetDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Default, true
}

// SetDefault sets field value
func (o *DeviceAuthenticationPolicyCommon) SetDefault(v bool) {
	o.Default = v
}

// GetForSignOnPolicy returns the ForSignOnPolicy field value
// Deprecated
func (o *DeviceAuthenticationPolicyCommon) GetForSignOnPolicy() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ForSignOnPolicy
}

// GetForSignOnPolicyOk returns a tuple with the ForSignOnPolicy field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *DeviceAuthenticationPolicyCommon) GetForSignOnPolicyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForSignOnPolicy, true
}

// SetForSignOnPolicy sets field value
// Deprecated
func (o *DeviceAuthenticationPolicyCommon) SetForSignOnPolicy(v bool) {
	o.ForSignOnPolicy = v
}

// GetIgnoreUserLock returns the IgnoreUserLock field value if set, zero value otherwise.
func (o *DeviceAuthenticationPolicyCommon) GetIgnoreUserLock() bool {
	if o == nil || IsNil(o.IgnoreUserLock) {
		var ret bool
		return ret
	}
	return *o.IgnoreUserLock
}

// GetIgnoreUserLockOk returns a tuple with the IgnoreUserLock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyCommon) GetIgnoreUserLockOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreUserLock) {
		return nil, false
	}
	return o.IgnoreUserLock, true
}

// HasIgnoreUserLock returns a boolean if a field has been set.
func (o *DeviceAuthenticationPolicyCommon) HasIgnoreUserLock() bool {
	if o != nil && !IsNil(o.IgnoreUserLock) {
		return true
	}

	return false
}

// SetIgnoreUserLock gets a reference to the given bool and assigns it to the IgnoreUserLock field.
func (o *DeviceAuthenticationPolicyCommon) SetIgnoreUserLock(v bool) {
	o.IgnoreUserLock = &v
}

// GetNotificationsPolicy returns the NotificationsPolicy field value if set, zero value otherwise.
func (o *DeviceAuthenticationPolicyCommon) GetNotificationsPolicy() DeviceAuthenticationPolicyCommonNotificationsPolicy {
	if o == nil || IsNil(o.NotificationsPolicy) {
		var ret DeviceAuthenticationPolicyCommonNotificationsPolicy
		return ret
	}
	return *o.NotificationsPolicy
}

// GetNotificationsPolicyOk returns a tuple with the NotificationsPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyCommon) GetNotificationsPolicyOk() (*DeviceAuthenticationPolicyCommonNotificationsPolicy, bool) {
	if o == nil || IsNil(o.NotificationsPolicy) {
		return nil, false
	}
	return o.NotificationsPolicy, true
}

// HasNotificationsPolicy returns a boolean if a field has been set.
func (o *DeviceAuthenticationPolicyCommon) HasNotificationsPolicy() bool {
	if o != nil && !IsNil(o.NotificationsPolicy) {
		return true
	}

	return false
}

// SetNotificationsPolicy gets a reference to the given DeviceAuthenticationPolicyCommonNotificationsPolicy and assigns it to the NotificationsPolicy field.
func (o *DeviceAuthenticationPolicyCommon) SetNotificationsPolicy(v DeviceAuthenticationPolicyCommonNotificationsPolicy) {
	o.NotificationsPolicy = &v
}

// GetRememberMe returns the RememberMe field value if set, zero value otherwise.
func (o *DeviceAuthenticationPolicyCommon) GetRememberMe() DeviceAuthenticationPolicyCommonRememberMe {
	if o == nil || IsNil(o.RememberMe) {
		var ret DeviceAuthenticationPolicyCommonRememberMe
		return ret
	}
	return *o.RememberMe
}

// GetRememberMeOk returns a tuple with the RememberMe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyCommon) GetRememberMeOk() (*DeviceAuthenticationPolicyCommonRememberMe, bool) {
	if o == nil || IsNil(o.RememberMe) {
		return nil, false
	}
	return o.RememberMe, true
}

// HasRememberMe returns a boolean if a field has been set.
func (o *DeviceAuthenticationPolicyCommon) HasRememberMe() bool {
	if o != nil && !IsNil(o.RememberMe) {
		return true
	}

	return false
}

// SetRememberMe gets a reference to the given DeviceAuthenticationPolicyCommonRememberMe and assigns it to the RememberMe field.
func (o *DeviceAuthenticationPolicyCommon) SetRememberMe(v DeviceAuthenticationPolicyCommonRememberMe) {
	o.RememberMe = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DeviceAuthenticationPolicyCommon) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyCommon) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DeviceAuthenticationPolicyCommon) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *DeviceAuthenticationPolicyCommon) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o DeviceAuthenticationPolicyCommon) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceAuthenticationPolicyCommon) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.NewDeviceNotification) {
		toSerialize["newDeviceNotification"] = o.NewDeviceNotification
	}
	if !IsNil(o.Authentication) {
		toSerialize["authentication"] = o.Authentication
	}
	toSerialize["sms"] = o.Sms
	toSerialize["voice"] = o.Voice
	toSerialize["email"] = o.Email
	if !IsNil(o.Fido2) {
		toSerialize["fido2"] = o.Fido2
	}
	toSerialize["totp"] = o.Totp
	toSerialize["default"] = o.Default
	toSerialize["forSignOnPolicy"] = o.ForSignOnPolicy
	if !IsNil(o.IgnoreUserLock) {
		toSerialize["ignoreUserLock"] = o.IgnoreUserLock
	}
	if !IsNil(o.NotificationsPolicy) {
		toSerialize["notificationsPolicy"] = o.NotificationsPolicy
	}
	if !IsNil(o.RememberMe) {
		toSerialize["rememberMe"] = o.RememberMe
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableDeviceAuthenticationPolicyCommon struct {
	value *DeviceAuthenticationPolicyCommon
	isSet bool
}

func (v NullableDeviceAuthenticationPolicyCommon) Get() *DeviceAuthenticationPolicyCommon {
	return v.value
}

func (v *NullableDeviceAuthenticationPolicyCommon) Set(val *DeviceAuthenticationPolicyCommon) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceAuthenticationPolicyCommon) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceAuthenticationPolicyCommon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceAuthenticationPolicyCommon(val *DeviceAuthenticationPolicyCommon) *NullableDeviceAuthenticationPolicyCommon {
	return &NullableDeviceAuthenticationPolicyCommon{value: val, isSet: true}
}

func (v NullableDeviceAuthenticationPolicyCommon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceAuthenticationPolicyCommon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
