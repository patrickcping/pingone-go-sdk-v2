/*
PingOne Platform API - PingOne MFA

The PingOne Platform API covering the PingOne MFA service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mfa

import (
	"encoding/json"
	"fmt"
)

// EnumPingIDApplicationType Value must be set to `pingIdAppConfig`.
type EnumPingIDApplicationType string

// List of EnumPingIDApplicationType
const (
	ENUMPINGIDAPPLICATIONTYPE_PING_ID_APP_CONFIG EnumPingIDApplicationType = "pingIdAppConfig"
)

// All allowed values of EnumPingIDApplicationType enum
var AllowedEnumPingIDApplicationTypeEnumValues = []EnumPingIDApplicationType{
	"pingIdAppConfig",
}

func (v *EnumPingIDApplicationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumPingIDApplicationType(value)
	for _, existing := range AllowedEnumPingIDApplicationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumPingIDApplicationType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumPingIDApplicationTypeFromValue returns a pointer to a valid EnumPingIDApplicationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumPingIDApplicationTypeFromValue(v string) (*EnumPingIDApplicationType, error) {
	ev := EnumPingIDApplicationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumPingIDApplicationType: valid values are %v", v, AllowedEnumPingIDApplicationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumPingIDApplicationType) IsValid() bool {
	for _, existing := range AllowedEnumPingIDApplicationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumPingIDApplicationType value
func (v EnumPingIDApplicationType) Ptr() *EnumPingIDApplicationType {
	return &v
}

type NullableEnumPingIDApplicationType struct {
	value *EnumPingIDApplicationType
	isSet bool
}

func (v NullableEnumPingIDApplicationType) Get() *EnumPingIDApplicationType {
	return v.value
}

func (v *NullableEnumPingIDApplicationType) Set(val *EnumPingIDApplicationType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumPingIDApplicationType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumPingIDApplicationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumPingIDApplicationType(val *EnumPingIDApplicationType) *NullableEnumPingIDApplicationType {
	return &NullableEnumPingIDApplicationType{value: val, isSet: true}
}

func (v NullableEnumPingIDApplicationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumPingIDApplicationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
