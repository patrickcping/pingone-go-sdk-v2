/*
PingOne Platform API - PingOne MFA

The PingOne Platform API covering the PingOne MFA service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mfa

import (
	"encoding/json"
)

// checks if the DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit{}

// DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit struct for DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit
type DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit struct {
	// The number of consecutive push notifications that can be ignored or rejected by a user within a defined period before push notifications are blocked for the application. The minimum value is 1 and the maximum value is 50. If this parameter is not provided, the default value is 5.
	Count        *int32                                                                  `json:"count,omitempty"`
	LockDuration *DeviceAuthenticationPolicyMobileApplicationsInnerPushLimitLockDuration `json:"lockDuration,omitempty"`
	TimePeriod   *DeviceAuthenticationPolicyMobileApplicationsInnerPushLimitTimePeriod   `json:"timePeriod,omitempty"`
}

// NewDeviceAuthenticationPolicyMobileApplicationsInnerPushLimit instantiates a new DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceAuthenticationPolicyMobileApplicationsInnerPushLimit() *DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit {
	this := DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit{}
	var count int32 = 5
	this.Count = &count
	return &this
}

// NewDeviceAuthenticationPolicyMobileApplicationsInnerPushLimitWithDefaults instantiates a new DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceAuthenticationPolicyMobileApplicationsInnerPushLimitWithDefaults() *DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit {
	this := DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit{}
	var count int32 = 5
	this.Count = &count
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) SetCount(v int32) {
	o.Count = &v
}

// GetLockDuration returns the LockDuration field value if set, zero value otherwise.
func (o *DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) GetLockDuration() DeviceAuthenticationPolicyMobileApplicationsInnerPushLimitLockDuration {
	if o == nil || IsNil(o.LockDuration) {
		var ret DeviceAuthenticationPolicyMobileApplicationsInnerPushLimitLockDuration
		return ret
	}
	return *o.LockDuration
}

// GetLockDurationOk returns a tuple with the LockDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) GetLockDurationOk() (*DeviceAuthenticationPolicyMobileApplicationsInnerPushLimitLockDuration, bool) {
	if o == nil || IsNil(o.LockDuration) {
		return nil, false
	}
	return o.LockDuration, true
}

// HasLockDuration returns a boolean if a field has been set.
func (o *DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) HasLockDuration() bool {
	if o != nil && !IsNil(o.LockDuration) {
		return true
	}

	return false
}

// SetLockDuration gets a reference to the given DeviceAuthenticationPolicyMobileApplicationsInnerPushLimitLockDuration and assigns it to the LockDuration field.
func (o *DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) SetLockDuration(v DeviceAuthenticationPolicyMobileApplicationsInnerPushLimitLockDuration) {
	o.LockDuration = &v
}

// GetTimePeriod returns the TimePeriod field value if set, zero value otherwise.
func (o *DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) GetTimePeriod() DeviceAuthenticationPolicyMobileApplicationsInnerPushLimitTimePeriod {
	if o == nil || IsNil(o.TimePeriod) {
		var ret DeviceAuthenticationPolicyMobileApplicationsInnerPushLimitTimePeriod
		return ret
	}
	return *o.TimePeriod
}

// GetTimePeriodOk returns a tuple with the TimePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) GetTimePeriodOk() (*DeviceAuthenticationPolicyMobileApplicationsInnerPushLimitTimePeriod, bool) {
	if o == nil || IsNil(o.TimePeriod) {
		return nil, false
	}
	return o.TimePeriod, true
}

// HasTimePeriod returns a boolean if a field has been set.
func (o *DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) HasTimePeriod() bool {
	if o != nil && !IsNil(o.TimePeriod) {
		return true
	}

	return false
}

// SetTimePeriod gets a reference to the given DeviceAuthenticationPolicyMobileApplicationsInnerPushLimitTimePeriod and assigns it to the TimePeriod field.
func (o *DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) SetTimePeriod(v DeviceAuthenticationPolicyMobileApplicationsInnerPushLimitTimePeriod) {
	o.TimePeriod = &v
}

func (o DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.LockDuration) {
		toSerialize["lockDuration"] = o.LockDuration
	}
	if !IsNil(o.TimePeriod) {
		toSerialize["timePeriod"] = o.TimePeriod
	}
	return toSerialize, nil
}

type NullableDeviceAuthenticationPolicyMobileApplicationsInnerPushLimit struct {
	value *DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit
	isSet bool
}

func (v NullableDeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) Get() *DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit {
	return v.value
}

func (v *NullableDeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) Set(val *DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceAuthenticationPolicyMobileApplicationsInnerPushLimit(val *DeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) *NullableDeviceAuthenticationPolicyMobileApplicationsInnerPushLimit {
	return &NullableDeviceAuthenticationPolicyMobileApplicationsInnerPushLimit{value: val, isSet: true}
}

func (v NullableDeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceAuthenticationPolicyMobileApplicationsInnerPushLimit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
