/*
PingOne Platform API - PingOne MFA

The PingOne Platform API covering the PingOne MFA service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mfa

import (
	"encoding/json"
)

// checks if the DeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1{}

// DeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1 struct for DeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1
type DeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1 struct {
	// Specifies whether OTP authentication is enabled or disabled for the policy.
	Enabled bool `json:"enabled"`
}

// NewDeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1 instantiates a new DeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1(enabled bool) *DeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1 {
	this := DeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1{}
	this.Enabled = enabled
	return &this
}

// NewDeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1WithDefaults instantiates a new DeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1WithDefaults() *DeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1 {
	this := DeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1{}
	return &this
}

// GetEnabled returns the Enabled field value
func (o *DeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *DeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1) SetEnabled(v bool) {
	o.Enabled = v
}

func (o DeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	return toSerialize, nil
}

type NullableDeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1 struct {
	value *DeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1
	isSet bool
}

func (v NullableDeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1) Get() *DeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1 {
	return v.value
}

func (v *NullableDeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1) Set(val *DeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1(val *DeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1) *NullableDeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1 {
	return &NullableDeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1{value: val, isSet: true}
}

func (v NullableDeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceAuthenticationPolicyPingOneMFAAllOfMobileOtp1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
