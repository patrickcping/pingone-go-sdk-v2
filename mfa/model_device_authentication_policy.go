/*
PingOne Platform API - PingOne MFA

The PingOne Platform API covering the PingOne MFA service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mfa

import (
	"encoding/json"
	"fmt"
)

// DeviceAuthenticationPolicy - struct for DeviceAuthenticationPolicy
type DeviceAuthenticationPolicy struct {
	DeviceAuthenticationPolicyPingID     *DeviceAuthenticationPolicyPingID
	DeviceAuthenticationPolicyPingOneMFA *DeviceAuthenticationPolicyPingOneMFA
}

// DeviceAuthenticationPolicyPingIDAsDeviceAuthenticationPolicy is a convenience function that returns DeviceAuthenticationPolicyPingID wrapped in DeviceAuthenticationPolicy
func DeviceAuthenticationPolicyPingIDAsDeviceAuthenticationPolicy(v *DeviceAuthenticationPolicyPingID) DeviceAuthenticationPolicy {
	return DeviceAuthenticationPolicy{
		DeviceAuthenticationPolicyPingID: v,
	}
}

// DeviceAuthenticationPolicyPingOneMFAAsDeviceAuthenticationPolicy is a convenience function that returns DeviceAuthenticationPolicyPingOneMFA wrapped in DeviceAuthenticationPolicy
func DeviceAuthenticationPolicyPingOneMFAAsDeviceAuthenticationPolicy(v *DeviceAuthenticationPolicyPingOneMFA) DeviceAuthenticationPolicy {
	return DeviceAuthenticationPolicy{
		DeviceAuthenticationPolicyPingOneMFA: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *DeviceAuthenticationPolicy) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DeviceAuthenticationPolicyPingID
	err = json.Unmarshal(data, &dst.DeviceAuthenticationPolicyPingID)
	if err == nil {
		if dst.DeviceAuthenticationPolicyPingID.Desktop != nil || dst.DeviceAuthenticationPolicyPingID.OathToken != nil || dst.DeviceAuthenticationPolicyPingID.Yubikey != nil {
			match++
		} else if len(dst.DeviceAuthenticationPolicyPingID.Mobile.Applications) > 0 {
			for _, app := range dst.DeviceAuthenticationPolicyPingID.Mobile.Applications {
				if app.Type == ENUMPINGIDAPPLICATIONTYPE_PING_ID_APP_CONFIG {
					match++
				}
			}
		} else {
			dst.DeviceAuthenticationPolicyPingID = nil
		}
	} else {
		dst.DeviceAuthenticationPolicyPingID = nil
	}

	// try to unmarshal data into DeviceAuthenticationPolicyPingOneMFA
	err = json.Unmarshal(data, &dst.DeviceAuthenticationPolicyPingOneMFA)
	if err == nil {
		jsonDeviceAuthenticationPolicyPingOneMFA, _ := json.Marshal(dst.DeviceAuthenticationPolicyPingOneMFA)
		if string(jsonDeviceAuthenticationPolicyPingOneMFA) == "{}" { // empty struct
			dst.DeviceAuthenticationPolicyPingOneMFA = nil
		} else {
			match++
		}
	} else {
		dst.DeviceAuthenticationPolicyPingOneMFA = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DeviceAuthenticationPolicyPingID = nil
		dst.DeviceAuthenticationPolicyPingOneMFA = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DeviceAuthenticationPolicy)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DeviceAuthenticationPolicy)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DeviceAuthenticationPolicy) MarshalJSON() ([]byte, error) {
	if src.DeviceAuthenticationPolicyPingID != nil {
		return json.Marshal(&src.DeviceAuthenticationPolicyPingID)
	}

	if src.DeviceAuthenticationPolicyPingOneMFA != nil {
		return json.Marshal(&src.DeviceAuthenticationPolicyPingOneMFA)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DeviceAuthenticationPolicy) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DeviceAuthenticationPolicyPingID != nil {
		return obj.DeviceAuthenticationPolicyPingID
	}

	if obj.DeviceAuthenticationPolicyPingOneMFA != nil {
		return obj.DeviceAuthenticationPolicyPingOneMFA
	}

	// all schemas are nil
	return nil
}

type NullableDeviceAuthenticationPolicy struct {
	value *DeviceAuthenticationPolicy
	isSet bool
}

func (v NullableDeviceAuthenticationPolicy) Get() *DeviceAuthenticationPolicy {
	return v.value
}

func (v *NullableDeviceAuthenticationPolicy) Set(val *DeviceAuthenticationPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceAuthenticationPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceAuthenticationPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceAuthenticationPolicy(val *DeviceAuthenticationPolicy) *NullableDeviceAuthenticationPolicy {
	return &NullableDeviceAuthenticationPolicy{value: val, isSet: true}
}

func (v NullableDeviceAuthenticationPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceAuthenticationPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
