/*
PingOne Platform API - PingOne MFA

The PingOne Platform API covering the PingOne MFA service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mfa

import (
	"encoding/json"
	"fmt"
)

// EnumMFADevicePolicyNewDeviceNotification Use `newDeviceNotification` to control whether a user should be notified if a new authentication method has been added to their account. Can take one of the following values: - `NONE` - don't notify the user when a new authentication method is added. - `EMAIL_THEN_SMS` - notify the user by email. If there is no email address in the user profile, notify the user by SMS. If there is no phone number either, don't notify the user. - `SMS_THEN_EMAIL` - notify the user by SMS. If there is no phone number in the user profile, notify the user by email. If there is no email address either, don't notify the user. If the parameter is not provided, the default value is `EMAIL_THEN_SMS`.
type EnumMFADevicePolicyNewDeviceNotification string

// List of EnumMFADevicePolicyNewDeviceNotification
const (
	ENUMMFADEVICEPOLICYNEWDEVICENOTIFICATION_NONE           EnumMFADevicePolicyNewDeviceNotification = "NONE"
	ENUMMFADEVICEPOLICYNEWDEVICENOTIFICATION_EMAIL_THEN_SMS EnumMFADevicePolicyNewDeviceNotification = "EMAIL_THEN_SMS"
	ENUMMFADEVICEPOLICYNEWDEVICENOTIFICATION_SMS_THEN_EMAIL EnumMFADevicePolicyNewDeviceNotification = "SMS_THEN_EMAIL"
)

// All allowed values of EnumMFADevicePolicyNewDeviceNotification enum
var AllowedEnumMFADevicePolicyNewDeviceNotificationEnumValues = []EnumMFADevicePolicyNewDeviceNotification{
	"NONE",
	"EMAIL_THEN_SMS",
	"SMS_THEN_EMAIL",
}

func (v *EnumMFADevicePolicyNewDeviceNotification) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumMFADevicePolicyNewDeviceNotification(value)
	for _, existing := range AllowedEnumMFADevicePolicyNewDeviceNotificationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumMFADevicePolicyNewDeviceNotification(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumMFADevicePolicyNewDeviceNotificationFromValue returns a pointer to a valid EnumMFADevicePolicyNewDeviceNotification
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumMFADevicePolicyNewDeviceNotificationFromValue(v string) (*EnumMFADevicePolicyNewDeviceNotification, error) {
	ev := EnumMFADevicePolicyNewDeviceNotification(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumMFADevicePolicyNewDeviceNotification: valid values are %v", v, AllowedEnumMFADevicePolicyNewDeviceNotificationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumMFADevicePolicyNewDeviceNotification) IsValid() bool {
	for _, existing := range AllowedEnumMFADevicePolicyNewDeviceNotificationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumMFADevicePolicyNewDeviceNotification value
func (v EnumMFADevicePolicyNewDeviceNotification) Ptr() *EnumMFADevicePolicyNewDeviceNotification {
	return &v
}

type NullableEnumMFADevicePolicyNewDeviceNotification struct {
	value *EnumMFADevicePolicyNewDeviceNotification
	isSet bool
}

func (v NullableEnumMFADevicePolicyNewDeviceNotification) Get() *EnumMFADevicePolicyNewDeviceNotification {
	return v.value
}

func (v *NullableEnumMFADevicePolicyNewDeviceNotification) Set(val *EnumMFADevicePolicyNewDeviceNotification) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumMFADevicePolicyNewDeviceNotification) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumMFADevicePolicyNewDeviceNotification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumMFADevicePolicyNewDeviceNotification(val *EnumMFADevicePolicyNewDeviceNotification) *NullableEnumMFADevicePolicyNewDeviceNotification {
	return &NullableEnumMFADevicePolicyNewDeviceNotification{value: val, isSet: true}
}

func (v NullableEnumMFADevicePolicyNewDeviceNotification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumMFADevicePolicyNewDeviceNotification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
