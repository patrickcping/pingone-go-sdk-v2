/*
PingOne Platform API - PingOne MFA

The PingOne Platform API covering the PingOne MFA service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mfa

import (
	"encoding/json"
	"fmt"
)

// EnumMFAPushCredentialAttrType Specifies the push credential type. Valid values: * APNS (for Apple) * FCM_HTTP_V1 (for Google) * FCM (deprecated, used previously for Google) * HMS (for Huawei)
type EnumMFAPushCredentialAttrType string

// List of EnumMFAPushCredentialAttrType
const (
	ENUMMFAPUSHCREDENTIALATTRTYPE_APNS        EnumMFAPushCredentialAttrType = "APNS"
	ENUMMFAPUSHCREDENTIALATTRTYPE_FCM         EnumMFAPushCredentialAttrType = "FCM"
	ENUMMFAPUSHCREDENTIALATTRTYPE_HMS         EnumMFAPushCredentialAttrType = "HMS"
	ENUMMFAPUSHCREDENTIALATTRTYPE_FCM_HTTP_V1 EnumMFAPushCredentialAttrType = "FCM_HTTP_V1"
)

// All allowed values of EnumMFAPushCredentialAttrType enum
var AllowedEnumMFAPushCredentialAttrTypeEnumValues = []EnumMFAPushCredentialAttrType{
	"APNS",
	"FCM",
	"HMS",
	"FCM_HTTP_V1",
}

func (v *EnumMFAPushCredentialAttrType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumMFAPushCredentialAttrType(value)
	for _, existing := range AllowedEnumMFAPushCredentialAttrTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumMFAPushCredentialAttrType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumMFAPushCredentialAttrTypeFromValue returns a pointer to a valid EnumMFAPushCredentialAttrType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumMFAPushCredentialAttrTypeFromValue(v string) (*EnumMFAPushCredentialAttrType, error) {
	ev := EnumMFAPushCredentialAttrType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumMFAPushCredentialAttrType: valid values are %v", v, AllowedEnumMFAPushCredentialAttrTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumMFAPushCredentialAttrType) IsValid() bool {
	for _, existing := range AllowedEnumMFAPushCredentialAttrTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumMFAPushCredentialAttrType value
func (v EnumMFAPushCredentialAttrType) Ptr() *EnumMFAPushCredentialAttrType {
	return &v
}

type NullableEnumMFAPushCredentialAttrType struct {
	value *EnumMFAPushCredentialAttrType
	isSet bool
}

func (v NullableEnumMFAPushCredentialAttrType) Get() *EnumMFAPushCredentialAttrType {
	return v.value
}

func (v *NullableEnumMFAPushCredentialAttrType) Set(val *EnumMFAPushCredentialAttrType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumMFAPushCredentialAttrType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumMFAPushCredentialAttrType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumMFAPushCredentialAttrType(val *EnumMFAPushCredentialAttrType) *NullableEnumMFAPushCredentialAttrType {
	return &NullableEnumMFAPushCredentialAttrType{value: val, isSet: true}
}

func (v NullableEnumMFAPushCredentialAttrType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumMFAPushCredentialAttrType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
