/*
PingOne Platform API - PingOne MFA

The PingOne Platform API covering the PingOne MFA service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mfa

import (
	"encoding/json"
)

// checks if the MFASettingsUsers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MFASettingsUsers{}

// MFASettingsUsers Contains information about the default settings for new users.
type MFASettingsUsers struct {
	// Set `mfaEnabled` to `true` if you want MFA to be enabled by default for new users.
	MfaEnabled *bool `json:"mfaEnabled,omitempty"`
}

// NewMFASettingsUsers instantiates a new MFASettingsUsers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMFASettingsUsers() *MFASettingsUsers {
	this := MFASettingsUsers{}
	return &this
}

// NewMFASettingsUsersWithDefaults instantiates a new MFASettingsUsers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMFASettingsUsersWithDefaults() *MFASettingsUsers {
	this := MFASettingsUsers{}
	return &this
}

// GetMfaEnabled returns the MfaEnabled field value if set, zero value otherwise.
func (o *MFASettingsUsers) GetMfaEnabled() bool {
	if o == nil || IsNil(o.MfaEnabled) {
		var ret bool
		return ret
	}
	return *o.MfaEnabled
}

// GetMfaEnabledOk returns a tuple with the MfaEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MFASettingsUsers) GetMfaEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.MfaEnabled) {
		return nil, false
	}
	return o.MfaEnabled, true
}

// HasMfaEnabled returns a boolean if a field has been set.
func (o *MFASettingsUsers) HasMfaEnabled() bool {
	if o != nil && !IsNil(o.MfaEnabled) {
		return true
	}

	return false
}

// SetMfaEnabled gets a reference to the given bool and assigns it to the MfaEnabled field.
func (o *MFASettingsUsers) SetMfaEnabled(v bool) {
	o.MfaEnabled = &v
}

func (o MFASettingsUsers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MFASettingsUsers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MfaEnabled) {
		toSerialize["mfaEnabled"] = o.MfaEnabled
	}
	return toSerialize, nil
}

type NullableMFASettingsUsers struct {
	value *MFASettingsUsers
	isSet bool
}

func (v NullableMFASettingsUsers) Get() *MFASettingsUsers {
	return v.value
}

func (v *NullableMFASettingsUsers) Set(val *MFASettingsUsers) {
	v.value = val
	v.isSet = true
}

func (v NullableMFASettingsUsers) IsSet() bool {
	return v.isSet
}

func (v *NullableMFASettingsUsers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMFASettingsUsers(val *MFASettingsUsers) *NullableMFASettingsUsers {
	return &NullableMFASettingsUsers{value: val, isSet: true}
}

func (v NullableMFASettingsUsers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMFASettingsUsers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
