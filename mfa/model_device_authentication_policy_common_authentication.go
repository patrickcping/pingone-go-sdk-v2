/*
PingOne Platform API - PingOne MFA

The PingOne Platform API covering the PingOne MFA service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mfa

import (
	"encoding/json"
)

// checks if the DeviceAuthenticationPolicyCommonAuthentication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceAuthenticationPolicyCommonAuthentication{}

// DeviceAuthenticationPolicyCommonAuthentication An object that contains the device selection settings.
type DeviceAuthenticationPolicyCommonAuthentication struct {
	DeviceSelection EnumMFADevicePolicySelection `json:"deviceSelection"`
}

// NewDeviceAuthenticationPolicyCommonAuthentication instantiates a new DeviceAuthenticationPolicyCommonAuthentication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceAuthenticationPolicyCommonAuthentication(deviceSelection EnumMFADevicePolicySelection) *DeviceAuthenticationPolicyCommonAuthentication {
	this := DeviceAuthenticationPolicyCommonAuthentication{}
	this.DeviceSelection = deviceSelection
	return &this
}

// NewDeviceAuthenticationPolicyCommonAuthenticationWithDefaults instantiates a new DeviceAuthenticationPolicyCommonAuthentication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceAuthenticationPolicyCommonAuthenticationWithDefaults() *DeviceAuthenticationPolicyCommonAuthentication {
	this := DeviceAuthenticationPolicyCommonAuthentication{}
	return &this
}

// GetDeviceSelection returns the DeviceSelection field value
func (o *DeviceAuthenticationPolicyCommonAuthentication) GetDeviceSelection() EnumMFADevicePolicySelection {
	if o == nil {
		var ret EnumMFADevicePolicySelection
		return ret
	}

	return o.DeviceSelection
}

// GetDeviceSelectionOk returns a tuple with the DeviceSelection field value
// and a boolean to check if the value has been set.
func (o *DeviceAuthenticationPolicyCommonAuthentication) GetDeviceSelectionOk() (*EnumMFADevicePolicySelection, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeviceSelection, true
}

// SetDeviceSelection sets field value
func (o *DeviceAuthenticationPolicyCommonAuthentication) SetDeviceSelection(v EnumMFADevicePolicySelection) {
	o.DeviceSelection = v
}

func (o DeviceAuthenticationPolicyCommonAuthentication) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceAuthenticationPolicyCommonAuthentication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["deviceSelection"] = o.DeviceSelection
	return toSerialize, nil
}

type NullableDeviceAuthenticationPolicyCommonAuthentication struct {
	value *DeviceAuthenticationPolicyCommonAuthentication
	isSet bool
}

func (v NullableDeviceAuthenticationPolicyCommonAuthentication) Get() *DeviceAuthenticationPolicyCommonAuthentication {
	return v.value
}

func (v *NullableDeviceAuthenticationPolicyCommonAuthentication) Set(val *DeviceAuthenticationPolicyCommonAuthentication) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceAuthenticationPolicyCommonAuthentication) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceAuthenticationPolicyCommonAuthentication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceAuthenticationPolicyCommonAuthentication(val *DeviceAuthenticationPolicyCommonAuthentication) *NullableDeviceAuthenticationPolicyCommonAuthentication {
	return &NullableDeviceAuthenticationPolicyCommonAuthentication{value: val, isSet: true}
}

func (v NullableDeviceAuthenticationPolicyCommonAuthentication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceAuthenticationPolicyCommonAuthentication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
