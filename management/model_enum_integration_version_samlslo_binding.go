/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumIntegrationVersionSAMLSLOBinding The SLO binding. Must be either HTTP_POST or HTTP_REDIRECT
type EnumIntegrationVersionSAMLSLOBinding string

// List of EnumIntegrationVersionSAMLSLOBinding
const (
	ENUMINTEGRATIONVERSIONSAMLSLOBINDING_POST     EnumIntegrationVersionSAMLSLOBinding = "HTTP_POST"
	ENUMINTEGRATIONVERSIONSAMLSLOBINDING_REDIRECT EnumIntegrationVersionSAMLSLOBinding = "HTTP_REDIRECT"
)

// All allowed values of EnumIntegrationVersionSAMLSLOBinding enum
var AllowedEnumIntegrationVersionSAMLSLOBindingEnumValues = []EnumIntegrationVersionSAMLSLOBinding{
	"HTTP_POST",
	"HTTP_REDIRECT",
}

func (v *EnumIntegrationVersionSAMLSLOBinding) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumIntegrationVersionSAMLSLOBinding(value)
	for _, existing := range AllowedEnumIntegrationVersionSAMLSLOBindingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumIntegrationVersionSAMLSLOBinding(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumIntegrationVersionSAMLSLOBindingFromValue returns a pointer to a valid EnumIntegrationVersionSAMLSLOBinding
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumIntegrationVersionSAMLSLOBindingFromValue(v string) (*EnumIntegrationVersionSAMLSLOBinding, error) {
	ev := EnumIntegrationVersionSAMLSLOBinding(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumIntegrationVersionSAMLSLOBinding: valid values are %v", v, AllowedEnumIntegrationVersionSAMLSLOBindingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumIntegrationVersionSAMLSLOBinding) IsValid() bool {
	for _, existing := range AllowedEnumIntegrationVersionSAMLSLOBindingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumIntegrationVersionSAMLSLOBinding value
func (v EnumIntegrationVersionSAMLSLOBinding) Ptr() *EnumIntegrationVersionSAMLSLOBinding {
	return &v
}

type NullableEnumIntegrationVersionSAMLSLOBinding struct {
	value *EnumIntegrationVersionSAMLSLOBinding
	isSet bool
}

func (v NullableEnumIntegrationVersionSAMLSLOBinding) Get() *EnumIntegrationVersionSAMLSLOBinding {
	return v.value
}

func (v *NullableEnumIntegrationVersionSAMLSLOBinding) Set(val *EnumIntegrationVersionSAMLSLOBinding) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumIntegrationVersionSAMLSLOBinding) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumIntegrationVersionSAMLSLOBinding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumIntegrationVersionSAMLSLOBinding(val *EnumIntegrationVersionSAMLSLOBinding) *NullableEnumIntegrationVersionSAMLSLOBinding {
	return &NullableEnumIntegrationVersionSAMLSLOBinding{value: val, isSet: true}
}

func (v NullableEnumIntegrationVersionSAMLSLOBinding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumIntegrationVersionSAMLSLOBinding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
