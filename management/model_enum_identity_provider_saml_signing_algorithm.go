/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumIdentityProviderSAMLSigningAlgorithm The signing key algorithm used by PingOne. Value will depend on which key algorithm and signature algorithm you chose when creating your signing key. Possible values are `SHA256withRSA`, `SHA384withRSA`, `SHA512withRSA`, `SHA256withECDSA`, `SHA384withECDSA`, `SHA512eithEDCSA`.
type EnumIdentityProviderSAMLSigningAlgorithm string

// List of EnumIdentityProviderSAMLSigningAlgorithm
const (
	ENUMIDENTITYPROVIDERSAMLSIGNINGALGORITHM_SHA256WITH_RSA   EnumIdentityProviderSAMLSigningAlgorithm = "SHA256withRSA"
	ENUMIDENTITYPROVIDERSAMLSIGNINGALGORITHM_SHA384WITH_RSA   EnumIdentityProviderSAMLSigningAlgorithm = "SHA384withRSA"
	ENUMIDENTITYPROVIDERSAMLSIGNINGALGORITHM_SHA512WITH_RSA   EnumIdentityProviderSAMLSigningAlgorithm = "SHA512withRSA"
	ENUMIDENTITYPROVIDERSAMLSIGNINGALGORITHM_SHA256WITH_ECDSA EnumIdentityProviderSAMLSigningAlgorithm = "SHA256withECDSA"
	ENUMIDENTITYPROVIDERSAMLSIGNINGALGORITHM_SHA384WITH_ECDSA EnumIdentityProviderSAMLSigningAlgorithm = "SHA384withECDSA"
	ENUMIDENTITYPROVIDERSAMLSIGNINGALGORITHM_SHA512EITH_EDCSA EnumIdentityProviderSAMLSigningAlgorithm = "SHA512eithEDCSA"
)

// All allowed values of EnumIdentityProviderSAMLSigningAlgorithm enum
var AllowedEnumIdentityProviderSAMLSigningAlgorithmEnumValues = []EnumIdentityProviderSAMLSigningAlgorithm{
	"SHA256withRSA",
	"SHA384withRSA",
	"SHA512withRSA",
	"SHA256withECDSA",
	"SHA384withECDSA",
	"SHA512eithEDCSA",
}

func (v *EnumIdentityProviderSAMLSigningAlgorithm) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumIdentityProviderSAMLSigningAlgorithm(value)
	for _, existing := range AllowedEnumIdentityProviderSAMLSigningAlgorithmEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumIdentityProviderSAMLSigningAlgorithm(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumIdentityProviderSAMLSigningAlgorithmFromValue returns a pointer to a valid EnumIdentityProviderSAMLSigningAlgorithm
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumIdentityProviderSAMLSigningAlgorithmFromValue(v string) (*EnumIdentityProviderSAMLSigningAlgorithm, error) {
	ev := EnumIdentityProviderSAMLSigningAlgorithm(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumIdentityProviderSAMLSigningAlgorithm: valid values are %v", v, AllowedEnumIdentityProviderSAMLSigningAlgorithmEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumIdentityProviderSAMLSigningAlgorithm) IsValid() bool {
	for _, existing := range AllowedEnumIdentityProviderSAMLSigningAlgorithmEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumIdentityProviderSAMLSigningAlgorithm value
func (v EnumIdentityProviderSAMLSigningAlgorithm) Ptr() *EnumIdentityProviderSAMLSigningAlgorithm {
	return &v
}

type NullableEnumIdentityProviderSAMLSigningAlgorithm struct {
	value *EnumIdentityProviderSAMLSigningAlgorithm
	isSet bool
}

func (v NullableEnumIdentityProviderSAMLSigningAlgorithm) Get() *EnumIdentityProviderSAMLSigningAlgorithm {
	return v.value
}

func (v *NullableEnumIdentityProviderSAMLSigningAlgorithm) Set(val *EnumIdentityProviderSAMLSigningAlgorithm) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumIdentityProviderSAMLSigningAlgorithm) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumIdentityProviderSAMLSigningAlgorithm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumIdentityProviderSAMLSigningAlgorithm(val *EnumIdentityProviderSAMLSigningAlgorithm) *NullableEnumIdentityProviderSAMLSigningAlgorithm {
	return &NullableEnumIdentityProviderSAMLSigningAlgorithm{value: val, isSet: true}
}

func (v NullableEnumIdentityProviderSAMLSigningAlgorithm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumIdentityProviderSAMLSigningAlgorithm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
