/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumPropagationStoreTypeAqueraGroupSourceName The source to use for the group name. Options are either `Common Name` or `Distinguished Name`.
type EnumPropagationStoreTypeAqueraGroupSourceName string

// List of EnumPropagationStoreTypeAqueraGroupSourceName
const (
	ENUMPROPAGATIONSTORETYPEAQUERAGROUPSOURCENAME_COMMON_NAME        EnumPropagationStoreTypeAqueraGroupSourceName = "Common Name"
	ENUMPROPAGATIONSTORETYPEAQUERAGROUPSOURCENAME_DISTINGUISHED_NAME EnumPropagationStoreTypeAqueraGroupSourceName = "Distinguished Name"
)

// All allowed values of EnumPropagationStoreTypeAqueraGroupSourceName enum
var AllowedEnumPropagationStoreTypeAqueraGroupSourceNameEnumValues = []EnumPropagationStoreTypeAqueraGroupSourceName{
	"Common Name",
	"Distinguished Name",
}

func (v *EnumPropagationStoreTypeAqueraGroupSourceName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumPropagationStoreTypeAqueraGroupSourceName(value)
	for _, existing := range AllowedEnumPropagationStoreTypeAqueraGroupSourceNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumPropagationStoreTypeAqueraGroupSourceName(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumPropagationStoreTypeAqueraGroupSourceNameFromValue returns a pointer to a valid EnumPropagationStoreTypeAqueraGroupSourceName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumPropagationStoreTypeAqueraGroupSourceNameFromValue(v string) (*EnumPropagationStoreTypeAqueraGroupSourceName, error) {
	ev := EnumPropagationStoreTypeAqueraGroupSourceName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumPropagationStoreTypeAqueraGroupSourceName: valid values are %v", v, AllowedEnumPropagationStoreTypeAqueraGroupSourceNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumPropagationStoreTypeAqueraGroupSourceName) IsValid() bool {
	for _, existing := range AllowedEnumPropagationStoreTypeAqueraGroupSourceNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumPropagationStoreTypeAqueraGroupSourceName value
func (v EnumPropagationStoreTypeAqueraGroupSourceName) Ptr() *EnumPropagationStoreTypeAqueraGroupSourceName {
	return &v
}

type NullableEnumPropagationStoreTypeAqueraGroupSourceName struct {
	value *EnumPropagationStoreTypeAqueraGroupSourceName
	isSet bool
}

func (v NullableEnumPropagationStoreTypeAqueraGroupSourceName) Get() *EnumPropagationStoreTypeAqueraGroupSourceName {
	return v.value
}

func (v *NullableEnumPropagationStoreTypeAqueraGroupSourceName) Set(val *EnumPropagationStoreTypeAqueraGroupSourceName) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumPropagationStoreTypeAqueraGroupSourceName) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumPropagationStoreTypeAqueraGroupSourceName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumPropagationStoreTypeAqueraGroupSourceName(val *EnumPropagationStoreTypeAqueraGroupSourceName) *NullableEnumPropagationStoreTypeAqueraGroupSourceName {
	return &NullableEnumPropagationStoreTypeAqueraGroupSourceName{value: val, isSet: true}
}

func (v NullableEnumPropagationStoreTypeAqueraGroupSourceName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumPropagationStoreTypeAqueraGroupSourceName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
