/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumIdentityProviderAttributeMappingUpdate Indicates whether to update the user attribute in the directory with the non-empty mapped value from the IdP. Options are EMPTY_ONLY (only update the user attribute if it has an empty value); ALWAYS (always update the user attribute value).
type EnumIdentityProviderAttributeMappingUpdate string

// List of EnumIdentityProviderAttributeMappingUpdate
const (
	ENUMIDENTITYPROVIDERATTRIBUTEMAPPINGUPDATE_EMPTY_ONLY EnumIdentityProviderAttributeMappingUpdate = "EMPTY_ONLY"
	ENUMIDENTITYPROVIDERATTRIBUTEMAPPINGUPDATE_ALWAYS     EnumIdentityProviderAttributeMappingUpdate = "ALWAYS"
)

// All allowed values of EnumIdentityProviderAttributeMappingUpdate enum
var AllowedEnumIdentityProviderAttributeMappingUpdateEnumValues = []EnumIdentityProviderAttributeMappingUpdate{
	"EMPTY_ONLY",
	"ALWAYS",
}

func (v *EnumIdentityProviderAttributeMappingUpdate) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumIdentityProviderAttributeMappingUpdate(value)
	for _, existing := range AllowedEnumIdentityProviderAttributeMappingUpdateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumIdentityProviderAttributeMappingUpdate(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumIdentityProviderAttributeMappingUpdateFromValue returns a pointer to a valid EnumIdentityProviderAttributeMappingUpdate
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumIdentityProviderAttributeMappingUpdateFromValue(v string) (*EnumIdentityProviderAttributeMappingUpdate, error) {
	ev := EnumIdentityProviderAttributeMappingUpdate(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumIdentityProviderAttributeMappingUpdate: valid values are %v", v, AllowedEnumIdentityProviderAttributeMappingUpdateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumIdentityProviderAttributeMappingUpdate) IsValid() bool {
	for _, existing := range AllowedEnumIdentityProviderAttributeMappingUpdateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumIdentityProviderAttributeMappingUpdate value
func (v EnumIdentityProviderAttributeMappingUpdate) Ptr() *EnumIdentityProviderAttributeMappingUpdate {
	return &v
}

type NullableEnumIdentityProviderAttributeMappingUpdate struct {
	value *EnumIdentityProviderAttributeMappingUpdate
	isSet bool
}

func (v NullableEnumIdentityProviderAttributeMappingUpdate) Get() *EnumIdentityProviderAttributeMappingUpdate {
	return v.value
}

func (v *NullableEnumIdentityProviderAttributeMappingUpdate) Set(val *EnumIdentityProviderAttributeMappingUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumIdentityProviderAttributeMappingUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumIdentityProviderAttributeMappingUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumIdentityProviderAttributeMappingUpdate(val *EnumIdentityProviderAttributeMappingUpdate) *NullableEnumIdentityProviderAttributeMappingUpdate {
	return &NullableEnumIdentityProviderAttributeMappingUpdate{value: val, isSet: true}
}

func (v NullableEnumIdentityProviderAttributeMappingUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumIdentityProviderAttributeMappingUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
