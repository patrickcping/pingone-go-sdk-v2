/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the SchemaAttributePatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaAttributePatch{}

// SchemaAttributePatch struct for SchemaAttributePatch
type SchemaAttributePatch struct {
	// A string that specifies an optional property that specifies the description of the attribute. If provided, it must not be an empty string. Valid characters consists of any Unicode letter, mark (for example, accent or umlaut), numeric character, punctuation character, or space.
	Description *string `json:"description,omitempty"`
	// A string that specifies an optional property that specifies the display name of the attribute such as 'T-shirt sizeâ€™. If provided, it must not be an empty string. Valid characters consist of any Unicode letter, mark (for example, accent or umlaut), numeric character, forward slash, dot, apostrophe, underscore, space, or hyphen.
	DisplayName *string `json:"displayName,omitempty"`
	// A boolean that specifies whether or not the attribute is enabled. This is a required property for POST and PUT operations; it cannot be omitted or explicitly set to null. Disabled attributes are ignored on create/update and not returned on read.
	Enabled *bool `json:"enabled,omitempty"`
	// A string that specifies the name of the attribute. The attribute name must be provided during creation, must not be empty and must not exceed 256 characters. It must also be unique within the schema for an environment. It must start with a letter and may be followed by letters, numbers or hyphens.
	Name *string `json:"name,omitempty"`
	// A boolean that specifies whether or not the attribute is required. Required attributes must be provided a value during create/update. Defaults to false if not provided.
	Required   *bool                          `json:"required,omitempty"`
	SchemaType *EnumSchemaAttributeSchemaType `json:"schemaType,omitempty"`
	// The list of sub-attributes of this attribute. Only `COMPLEX` attribute types can have sub-attributes, and only one-level of nesting is allowed. The leaf attribute definition must have a type of `STRING` or `JSON`. A `COMPLEX` attribute definition must have at least one child attribute definition.
	SubAttributes []SchemaAttribute        `json:"subAttributes,omitempty"`
	Type          *EnumSchemaAttributeType `json:"type,omitempty"`
	// A boolean that specifies whether or not the attribute must have a unique value within the environment. This is a required property for POST and PUT operations; it cannot be omitted or explicitly set to null.
	Unique *bool `json:"unique,omitempty"`
	// A boolean that specifies whether the attribute has multiple values or a single one. This value can only change from false to true, as changing from true to false is not allowed. Maximum number of values stored is 1,000.
	MultiValued      *bool                                  `json:"multiValued,omitempty"`
	EnumeratedValues []SchemaAttributeEnumeratedValuesInner `json:"enumeratedValues,omitempty"`
	RegexValidation  *SchemaAttributeRegexValidation        `json:"regexValidation,omitempty"`
}

// NewSchemaAttributePatch instantiates a new SchemaAttributePatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaAttributePatch() *SchemaAttributePatch {
	this := SchemaAttributePatch{}
	var type_ EnumSchemaAttributeType = ENUMSCHEMAATTRIBUTETYPE_STRING
	this.Type = &type_
	return &this
}

// NewSchemaAttributePatchWithDefaults instantiates a new SchemaAttributePatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaAttributePatchWithDefaults() *SchemaAttributePatch {
	this := SchemaAttributePatch{}
	var type_ EnumSchemaAttributeType = ENUMSCHEMAATTRIBUTETYPE_STRING
	this.Type = &type_
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SchemaAttributePatch) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttributePatch) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SchemaAttributePatch) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SchemaAttributePatch) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *SchemaAttributePatch) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttributePatch) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *SchemaAttributePatch) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *SchemaAttributePatch) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SchemaAttributePatch) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttributePatch) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SchemaAttributePatch) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SchemaAttributePatch) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SchemaAttributePatch) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttributePatch) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SchemaAttributePatch) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SchemaAttributePatch) SetName(v string) {
	o.Name = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *SchemaAttributePatch) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttributePatch) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *SchemaAttributePatch) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *SchemaAttributePatch) SetRequired(v bool) {
	o.Required = &v
}

// GetSchemaType returns the SchemaType field value if set, zero value otherwise.
func (o *SchemaAttributePatch) GetSchemaType() EnumSchemaAttributeSchemaType {
	if o == nil || IsNil(o.SchemaType) {
		var ret EnumSchemaAttributeSchemaType
		return ret
	}
	return *o.SchemaType
}

// GetSchemaTypeOk returns a tuple with the SchemaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttributePatch) GetSchemaTypeOk() (*EnumSchemaAttributeSchemaType, bool) {
	if o == nil || IsNil(o.SchemaType) {
		return nil, false
	}
	return o.SchemaType, true
}

// HasSchemaType returns a boolean if a field has been set.
func (o *SchemaAttributePatch) HasSchemaType() bool {
	if o != nil && !IsNil(o.SchemaType) {
		return true
	}

	return false
}

// SetSchemaType gets a reference to the given EnumSchemaAttributeSchemaType and assigns it to the SchemaType field.
func (o *SchemaAttributePatch) SetSchemaType(v EnumSchemaAttributeSchemaType) {
	o.SchemaType = &v
}

// GetSubAttributes returns the SubAttributes field value if set, zero value otherwise.
func (o *SchemaAttributePatch) GetSubAttributes() []SchemaAttribute {
	if o == nil || IsNil(o.SubAttributes) {
		var ret []SchemaAttribute
		return ret
	}
	return o.SubAttributes
}

// GetSubAttributesOk returns a tuple with the SubAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttributePatch) GetSubAttributesOk() ([]SchemaAttribute, bool) {
	if o == nil || IsNil(o.SubAttributes) {
		return nil, false
	}
	return o.SubAttributes, true
}

// HasSubAttributes returns a boolean if a field has been set.
func (o *SchemaAttributePatch) HasSubAttributes() bool {
	if o != nil && !IsNil(o.SubAttributes) {
		return true
	}

	return false
}

// SetSubAttributes gets a reference to the given []SchemaAttribute and assigns it to the SubAttributes field.
func (o *SchemaAttributePatch) SetSubAttributes(v []SchemaAttribute) {
	o.SubAttributes = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SchemaAttributePatch) GetType() EnumSchemaAttributeType {
	if o == nil || IsNil(o.Type) {
		var ret EnumSchemaAttributeType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttributePatch) GetTypeOk() (*EnumSchemaAttributeType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SchemaAttributePatch) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given EnumSchemaAttributeType and assigns it to the Type field.
func (o *SchemaAttributePatch) SetType(v EnumSchemaAttributeType) {
	o.Type = &v
}

// GetUnique returns the Unique field value if set, zero value otherwise.
func (o *SchemaAttributePatch) GetUnique() bool {
	if o == nil || IsNil(o.Unique) {
		var ret bool
		return ret
	}
	return *o.Unique
}

// GetUniqueOk returns a tuple with the Unique field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttributePatch) GetUniqueOk() (*bool, bool) {
	if o == nil || IsNil(o.Unique) {
		return nil, false
	}
	return o.Unique, true
}

// HasUnique returns a boolean if a field has been set.
func (o *SchemaAttributePatch) HasUnique() bool {
	if o != nil && !IsNil(o.Unique) {
		return true
	}

	return false
}

// SetUnique gets a reference to the given bool and assigns it to the Unique field.
func (o *SchemaAttributePatch) SetUnique(v bool) {
	o.Unique = &v
}

// GetMultiValued returns the MultiValued field value if set, zero value otherwise.
func (o *SchemaAttributePatch) GetMultiValued() bool {
	if o == nil || IsNil(o.MultiValued) {
		var ret bool
		return ret
	}
	return *o.MultiValued
}

// GetMultiValuedOk returns a tuple with the MultiValued field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttributePatch) GetMultiValuedOk() (*bool, bool) {
	if o == nil || IsNil(o.MultiValued) {
		return nil, false
	}
	return o.MultiValued, true
}

// HasMultiValued returns a boolean if a field has been set.
func (o *SchemaAttributePatch) HasMultiValued() bool {
	if o != nil && !IsNil(o.MultiValued) {
		return true
	}

	return false
}

// SetMultiValued gets a reference to the given bool and assigns it to the MultiValued field.
func (o *SchemaAttributePatch) SetMultiValued(v bool) {
	o.MultiValued = &v
}

// GetEnumeratedValues returns the EnumeratedValues field value if set, zero value otherwise.
func (o *SchemaAttributePatch) GetEnumeratedValues() []SchemaAttributeEnumeratedValuesInner {
	if o == nil || IsNil(o.EnumeratedValues) {
		var ret []SchemaAttributeEnumeratedValuesInner
		return ret
	}
	return o.EnumeratedValues
}

// GetEnumeratedValuesOk returns a tuple with the EnumeratedValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttributePatch) GetEnumeratedValuesOk() ([]SchemaAttributeEnumeratedValuesInner, bool) {
	if o == nil || IsNil(o.EnumeratedValues) {
		return nil, false
	}
	return o.EnumeratedValues, true
}

// HasEnumeratedValues returns a boolean if a field has been set.
func (o *SchemaAttributePatch) HasEnumeratedValues() bool {
	if o != nil && !IsNil(o.EnumeratedValues) {
		return true
	}

	return false
}

// SetEnumeratedValues gets a reference to the given []SchemaAttributeEnumeratedValuesInner and assigns it to the EnumeratedValues field.
func (o *SchemaAttributePatch) SetEnumeratedValues(v []SchemaAttributeEnumeratedValuesInner) {
	o.EnumeratedValues = v
}

// GetRegexValidation returns the RegexValidation field value if set, zero value otherwise.
func (o *SchemaAttributePatch) GetRegexValidation() SchemaAttributeRegexValidation {
	if o == nil || IsNil(o.RegexValidation) {
		var ret SchemaAttributeRegexValidation
		return ret
	}
	return *o.RegexValidation
}

// GetRegexValidationOk returns a tuple with the RegexValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttributePatch) GetRegexValidationOk() (*SchemaAttributeRegexValidation, bool) {
	if o == nil || IsNil(o.RegexValidation) {
		return nil, false
	}
	return o.RegexValidation, true
}

// HasRegexValidation returns a boolean if a field has been set.
func (o *SchemaAttributePatch) HasRegexValidation() bool {
	if o != nil && !IsNil(o.RegexValidation) {
		return true
	}

	return false
}

// SetRegexValidation gets a reference to the given SchemaAttributeRegexValidation and assigns it to the RegexValidation field.
func (o *SchemaAttributePatch) SetRegexValidation(v SchemaAttributeRegexValidation) {
	o.RegexValidation = &v
}

func (o SchemaAttributePatch) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaAttributePatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.SchemaType) {
		toSerialize["schemaType"] = o.SchemaType
	}
	if !IsNil(o.SubAttributes) {
		toSerialize["subAttributes"] = o.SubAttributes
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Unique) {
		toSerialize["unique"] = o.Unique
	}
	if !IsNil(o.MultiValued) {
		toSerialize["multiValued"] = o.MultiValued
	}
	if !IsNil(o.EnumeratedValues) {
		toSerialize["enumeratedValues"] = o.EnumeratedValues
	}
	if !IsNil(o.RegexValidation) {
		toSerialize["regexValidation"] = o.RegexValidation
	}
	return toSerialize, nil
}

type NullableSchemaAttributePatch struct {
	value *SchemaAttributePatch
	isSet bool
}

func (v NullableSchemaAttributePatch) Get() *SchemaAttributePatch {
	return v.value
}

func (v *NullableSchemaAttributePatch) Set(val *SchemaAttributePatch) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaAttributePatch) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaAttributePatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaAttributePatch(val *SchemaAttributePatch) *NullableSchemaAttributePatch {
	return &NullableSchemaAttributePatch{value: val, isSet: true}
}

func (v NullableSchemaAttributePatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaAttributePatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
