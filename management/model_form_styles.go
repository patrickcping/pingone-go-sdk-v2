/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the FormStyles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormStyles{}

// FormStyles struct for FormStyles
type FormStyles struct {
	Alignment *EnumFormItemAlignment `json:"alignment,omitempty"`
	// A string that specifies the button background color. The value must be a valid hexadecimal color.
	BackgroundColor *string `json:"backgroundColor,omitempty"`
	// A string that specifies the button text color. The value must be a valid hexadecimal color.
	TextColor *string `json:"textColor,omitempty"`
	// A string that specifies the button border color. The value must be a valid hexadecimal color.
	BorderColor *string `json:"borderColor,omitempty"`
	// A boolean that specifies whether the button is enabled.
	Enabled *bool              `json:"enabled,omitempty"`
	Height  *int32             `json:"height,omitempty"`
	Padding *FormStylesPadding `json:"padding,omitempty"`
	// An integer that specifies the button width. Set as a percentage.
	Width     *int32                   `json:"width,omitempty"`
	WidthUnit *EnumFormStylesWidthUnit `json:"widthUnit,omitempty"`
}

// NewFormStyles instantiates a new FormStyles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormStyles() *FormStyles {
	this := FormStyles{}
	return &this
}

// NewFormStylesWithDefaults instantiates a new FormStyles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormStylesWithDefaults() *FormStyles {
	this := FormStyles{}
	return &this
}

// GetAlignment returns the Alignment field value if set, zero value otherwise.
func (o *FormStyles) GetAlignment() EnumFormItemAlignment {
	if o == nil || IsNil(o.Alignment) {
		var ret EnumFormItemAlignment
		return ret
	}
	return *o.Alignment
}

// GetAlignmentOk returns a tuple with the Alignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormStyles) GetAlignmentOk() (*EnumFormItemAlignment, bool) {
	if o == nil || IsNil(o.Alignment) {
		return nil, false
	}
	return o.Alignment, true
}

// HasAlignment returns a boolean if a field has been set.
func (o *FormStyles) HasAlignment() bool {
	if o != nil && !IsNil(o.Alignment) {
		return true
	}

	return false
}

// SetAlignment gets a reference to the given EnumFormItemAlignment and assigns it to the Alignment field.
func (o *FormStyles) SetAlignment(v EnumFormItemAlignment) {
	o.Alignment = &v
}

// GetBackgroundColor returns the BackgroundColor field value if set, zero value otherwise.
func (o *FormStyles) GetBackgroundColor() string {
	if o == nil || IsNil(o.BackgroundColor) {
		var ret string
		return ret
	}
	return *o.BackgroundColor
}

// GetBackgroundColorOk returns a tuple with the BackgroundColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormStyles) GetBackgroundColorOk() (*string, bool) {
	if o == nil || IsNil(o.BackgroundColor) {
		return nil, false
	}
	return o.BackgroundColor, true
}

// HasBackgroundColor returns a boolean if a field has been set.
func (o *FormStyles) HasBackgroundColor() bool {
	if o != nil && !IsNil(o.BackgroundColor) {
		return true
	}

	return false
}

// SetBackgroundColor gets a reference to the given string and assigns it to the BackgroundColor field.
func (o *FormStyles) SetBackgroundColor(v string) {
	o.BackgroundColor = &v
}

// GetTextColor returns the TextColor field value if set, zero value otherwise.
func (o *FormStyles) GetTextColor() string {
	if o == nil || IsNil(o.TextColor) {
		var ret string
		return ret
	}
	return *o.TextColor
}

// GetTextColorOk returns a tuple with the TextColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormStyles) GetTextColorOk() (*string, bool) {
	if o == nil || IsNil(o.TextColor) {
		return nil, false
	}
	return o.TextColor, true
}

// HasTextColor returns a boolean if a field has been set.
func (o *FormStyles) HasTextColor() bool {
	if o != nil && !IsNil(o.TextColor) {
		return true
	}

	return false
}

// SetTextColor gets a reference to the given string and assigns it to the TextColor field.
func (o *FormStyles) SetTextColor(v string) {
	o.TextColor = &v
}

// GetBorderColor returns the BorderColor field value if set, zero value otherwise.
func (o *FormStyles) GetBorderColor() string {
	if o == nil || IsNil(o.BorderColor) {
		var ret string
		return ret
	}
	return *o.BorderColor
}

// GetBorderColorOk returns a tuple with the BorderColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormStyles) GetBorderColorOk() (*string, bool) {
	if o == nil || IsNil(o.BorderColor) {
		return nil, false
	}
	return o.BorderColor, true
}

// HasBorderColor returns a boolean if a field has been set.
func (o *FormStyles) HasBorderColor() bool {
	if o != nil && !IsNil(o.BorderColor) {
		return true
	}

	return false
}

// SetBorderColor gets a reference to the given string and assigns it to the BorderColor field.
func (o *FormStyles) SetBorderColor(v string) {
	o.BorderColor = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *FormStyles) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormStyles) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *FormStyles) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *FormStyles) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *FormStyles) GetHeight() int32 {
	if o == nil || IsNil(o.Height) {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormStyles) GetHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *FormStyles) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *FormStyles) SetHeight(v int32) {
	o.Height = &v
}

// GetPadding returns the Padding field value if set, zero value otherwise.
func (o *FormStyles) GetPadding() FormStylesPadding {
	if o == nil || IsNil(o.Padding) {
		var ret FormStylesPadding
		return ret
	}
	return *o.Padding
}

// GetPaddingOk returns a tuple with the Padding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormStyles) GetPaddingOk() (*FormStylesPadding, bool) {
	if o == nil || IsNil(o.Padding) {
		return nil, false
	}
	return o.Padding, true
}

// HasPadding returns a boolean if a field has been set.
func (o *FormStyles) HasPadding() bool {
	if o != nil && !IsNil(o.Padding) {
		return true
	}

	return false
}

// SetPadding gets a reference to the given FormStylesPadding and assigns it to the Padding field.
func (o *FormStyles) SetPadding(v FormStylesPadding) {
	o.Padding = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *FormStyles) GetWidth() int32 {
	if o == nil || IsNil(o.Width) {
		var ret int32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormStyles) GetWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *FormStyles) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int32 and assigns it to the Width field.
func (o *FormStyles) SetWidth(v int32) {
	o.Width = &v
}

// GetWidthUnit returns the WidthUnit field value if set, zero value otherwise.
func (o *FormStyles) GetWidthUnit() EnumFormStylesWidthUnit {
	if o == nil || IsNil(o.WidthUnit) {
		var ret EnumFormStylesWidthUnit
		return ret
	}
	return *o.WidthUnit
}

// GetWidthUnitOk returns a tuple with the WidthUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormStyles) GetWidthUnitOk() (*EnumFormStylesWidthUnit, bool) {
	if o == nil || IsNil(o.WidthUnit) {
		return nil, false
	}
	return o.WidthUnit, true
}

// HasWidthUnit returns a boolean if a field has been set.
func (o *FormStyles) HasWidthUnit() bool {
	if o != nil && !IsNil(o.WidthUnit) {
		return true
	}

	return false
}

// SetWidthUnit gets a reference to the given EnumFormStylesWidthUnit and assigns it to the WidthUnit field.
func (o *FormStyles) SetWidthUnit(v EnumFormStylesWidthUnit) {
	o.WidthUnit = &v
}

func (o FormStyles) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormStyles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Alignment) {
		toSerialize["alignment"] = o.Alignment
	}
	if !IsNil(o.BackgroundColor) {
		toSerialize["backgroundColor"] = o.BackgroundColor
	}
	if !IsNil(o.TextColor) {
		toSerialize["textColor"] = o.TextColor
	}
	if !IsNil(o.BorderColor) {
		toSerialize["borderColor"] = o.BorderColor
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.Padding) {
		toSerialize["padding"] = o.Padding
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	if !IsNil(o.WidthUnit) {
		toSerialize["widthUnit"] = o.WidthUnit
	}
	return toSerialize, nil
}

type NullableFormStyles struct {
	value *FormStyles
	isSet bool
}

func (v NullableFormStyles) Get() *FormStyles {
	return v.value
}

func (v *NullableFormStyles) Set(val *FormStyles) {
	v.value = val
	v.isSet = true
}

func (v NullableFormStyles) IsSet() bool {
	return v.isSet
}

func (v *NullableFormStyles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormStyles(val *FormStyles) *NullableFormStyles {
	return &NullableFormStyles{value: val, isSet: true}
}

func (v NullableFormStyles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormStyles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
