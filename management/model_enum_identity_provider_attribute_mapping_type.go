/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumIdentityProviderAttributeMappingType The mapping type. Options are CORE (This attribute is required by the schema and cannot be removed. The name and update properties cannot be changed.) or CUSTOM (All user-created attributes are of this type.)
type EnumIdentityProviderAttributeMappingType string

// List of EnumIdentityProviderAttributeMappingType
const (
	ENUMIDENTITYPROVIDERATTRIBUTEMAPPINGTYPE_CORE   EnumIdentityProviderAttributeMappingType = "CORE"
	ENUMIDENTITYPROVIDERATTRIBUTEMAPPINGTYPE_CUSTOM EnumIdentityProviderAttributeMappingType = "CUSTOM"
)

// All allowed values of EnumIdentityProviderAttributeMappingType enum
var AllowedEnumIdentityProviderAttributeMappingTypeEnumValues = []EnumIdentityProviderAttributeMappingType{
	"CORE",
	"CUSTOM",
}

func (v *EnumIdentityProviderAttributeMappingType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumIdentityProviderAttributeMappingType(value)
	for _, existing := range AllowedEnumIdentityProviderAttributeMappingTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumIdentityProviderAttributeMappingType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumIdentityProviderAttributeMappingTypeFromValue returns a pointer to a valid EnumIdentityProviderAttributeMappingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumIdentityProviderAttributeMappingTypeFromValue(v string) (*EnumIdentityProviderAttributeMappingType, error) {
	ev := EnumIdentityProviderAttributeMappingType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumIdentityProviderAttributeMappingType: valid values are %v", v, AllowedEnumIdentityProviderAttributeMappingTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumIdentityProviderAttributeMappingType) IsValid() bool {
	for _, existing := range AllowedEnumIdentityProviderAttributeMappingTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumIdentityProviderAttributeMappingType value
func (v EnumIdentityProviderAttributeMappingType) Ptr() *EnumIdentityProviderAttributeMappingType {
	return &v
}

type NullableEnumIdentityProviderAttributeMappingType struct {
	value *EnumIdentityProviderAttributeMappingType
	isSet bool
}

func (v NullableEnumIdentityProviderAttributeMappingType) Get() *EnumIdentityProviderAttributeMappingType {
	return v.value
}

func (v *NullableEnumIdentityProviderAttributeMappingType) Set(val *EnumIdentityProviderAttributeMappingType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumIdentityProviderAttributeMappingType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumIdentityProviderAttributeMappingType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumIdentityProviderAttributeMappingType(val *EnumIdentityProviderAttributeMappingType) *NullableEnumIdentityProviderAttributeMappingType {
	return &NullableEnumIdentityProviderAttributeMappingType{value: val, isSet: true}
}

func (v NullableEnumIdentityProviderAttributeMappingType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumIdentityProviderAttributeMappingType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
