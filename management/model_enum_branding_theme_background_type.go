/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumBrandingThemeBackgroundType The background type for the theme. Options are `NONE`, `COLOR`, `IMAGE`, `DEFAULT`.
type EnumBrandingThemeBackgroundType string

// List of EnumBrandingThemeBackgroundType
const (
	ENUMBRANDINGTHEMEBACKGROUNDTYPE_NONE    EnumBrandingThemeBackgroundType = "NONE"
	ENUMBRANDINGTHEMEBACKGROUNDTYPE_COLOR   EnumBrandingThemeBackgroundType = "COLOR"
	ENUMBRANDINGTHEMEBACKGROUNDTYPE_IMAGE   EnumBrandingThemeBackgroundType = "IMAGE"
	ENUMBRANDINGTHEMEBACKGROUNDTYPE_DEFAULT EnumBrandingThemeBackgroundType = "DEFAULT"
)

// All allowed values of EnumBrandingThemeBackgroundType enum
var AllowedEnumBrandingThemeBackgroundTypeEnumValues = []EnumBrandingThemeBackgroundType{
	"NONE",
	"COLOR",
	"IMAGE",
	"DEFAULT",
}

func (v *EnumBrandingThemeBackgroundType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumBrandingThemeBackgroundType(value)
	for _, existing := range AllowedEnumBrandingThemeBackgroundTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumBrandingThemeBackgroundType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumBrandingThemeBackgroundTypeFromValue returns a pointer to a valid EnumBrandingThemeBackgroundType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumBrandingThemeBackgroundTypeFromValue(v string) (*EnumBrandingThemeBackgroundType, error) {
	ev := EnumBrandingThemeBackgroundType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumBrandingThemeBackgroundType: valid values are %v", v, AllowedEnumBrandingThemeBackgroundTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumBrandingThemeBackgroundType) IsValid() bool {
	for _, existing := range AllowedEnumBrandingThemeBackgroundTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumBrandingThemeBackgroundType value
func (v EnumBrandingThemeBackgroundType) Ptr() *EnumBrandingThemeBackgroundType {
	return &v
}

type NullableEnumBrandingThemeBackgroundType struct {
	value *EnumBrandingThemeBackgroundType
	isSet bool
}

func (v NullableEnumBrandingThemeBackgroundType) Get() *EnumBrandingThemeBackgroundType {
	return v.value
}

func (v *NullableEnumBrandingThemeBackgroundType) Set(val *EnumBrandingThemeBackgroundType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumBrandingThemeBackgroundType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumBrandingThemeBackgroundType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumBrandingThemeBackgroundType(val *EnumBrandingThemeBackgroundType) *NullableEnumBrandingThemeBackgroundType {
	return &NullableEnumBrandingThemeBackgroundType{value: val, isSet: true}
}

func (v NullableEnumBrandingThemeBackgroundType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumBrandingThemeBackgroundType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
