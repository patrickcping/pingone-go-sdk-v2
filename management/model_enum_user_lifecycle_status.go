/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumUserLifecycleStatus A string that specifies information about the account lifecycle. Options for status are `ACCOUNT_OK` and `VERIFICATION_REQUIRED`. This property value is only allowed to be set when importing a user to set the initial account status. If the initial status is set to `VERIFICATION_REQUIRED` and an email address is provided, a verification email is sent.
type EnumUserLifecycleStatus string

// List of EnumUserLifecycleStatus
const (
	ENUMUSERLIFECYCLESTATUS_ACCOUNT_OK            EnumUserLifecycleStatus = "ACCOUNT_OK"
	ENUMUSERLIFECYCLESTATUS_VERIFICATION_REQUIRED EnumUserLifecycleStatus = "VERIFICATION_REQUIRED"
)

// All allowed values of EnumUserLifecycleStatus enum
var AllowedEnumUserLifecycleStatusEnumValues = []EnumUserLifecycleStatus{
	"ACCOUNT_OK",
	"VERIFICATION_REQUIRED",
}

func (v *EnumUserLifecycleStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumUserLifecycleStatus(value)
	for _, existing := range AllowedEnumUserLifecycleStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumUserLifecycleStatus(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumUserLifecycleStatusFromValue returns a pointer to a valid EnumUserLifecycleStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumUserLifecycleStatusFromValue(v string) (*EnumUserLifecycleStatus, error) {
	ev := EnumUserLifecycleStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumUserLifecycleStatus: valid values are %v", v, AllowedEnumUserLifecycleStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumUserLifecycleStatus) IsValid() bool {
	for _, existing := range AllowedEnumUserLifecycleStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumUserLifecycleStatus value
func (v EnumUserLifecycleStatus) Ptr() *EnumUserLifecycleStatus {
	return &v
}

type NullableEnumUserLifecycleStatus struct {
	value *EnumUserLifecycleStatus
	isSet bool
}

func (v NullableEnumUserLifecycleStatus) Get() *EnumUserLifecycleStatus {
	return v.value
}

func (v *NullableEnumUserLifecycleStatus) Set(val *EnumUserLifecycleStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumUserLifecycleStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumUserLifecycleStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumUserLifecycleStatus(val *EnumUserLifecycleStatus) *NullableEnumUserLifecycleStatus {
	return &NullableEnumUserLifecycleStatus{value: val, isSet: true}
}

func (v NullableEnumUserLifecycleStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumUserLifecycleStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
