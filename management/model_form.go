/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"time"
)

// checks if the Form type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Form{}

// Form struct for Form
type Form struct {
	Links *map[string]LinksHATEOASValue `json:"_links,omitempty"`
	// A string that specifies the resourceâ€™s unique identifier.
	Id          *string            `json:"id,omitempty"`
	Environment *ObjectEnvironment `json:"environment,omitempty"`
	// A string that specifies the form name, which must be provided and must be unique within an environment.
	Name string `json:"name"`
	// A string that specifies the description of the form.
	Description *string          `json:"description,omitempty"`
	Category    EnumFormCategory `json:"category"`
	Components  FormComponents   `json:"components"`
	// An integer that specifies the number of columns in the form (min = 1; max = 4).
	Cols *int32 `json:"cols,omitempty"`
	// A boolean that specifies whether optional fields are highlighted in the rendered form.
	MarkOptional bool `json:"markOptional"`
	// A boolean that specifies whether required fields are highlighted in the rendered form.
	MarkRequired      bool                       `json:"markRequired"`
	TranslationMethod *EnumFormTranslationMethod `json:"translationMethod,omitempty"`
	// A read-only object that specifies the list of the FormField types in the form.
	FieldTypes []EnumFormFieldType `json:"fieldTypes,omitempty"`
	// An object that provides a map of i18n keys to their translations. This object includes both the keys and their default translations. The PingOne language management service finds this object, and creates the new keys for translation for this form.
	LanguageBundle *map[string]string `json:"languageBundle,omitempty"`
	// The date the resouce was created (ISO-8061 format).
	Created *time.Time `json:"created,omitempty"`
	// The date the resouce was modified (ISO-8061 format).
	Modified *time.Time `json:"modified,omitempty"`
}

// NewForm instantiates a new Form object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewForm(name string, category EnumFormCategory, components FormComponents, markOptional bool, markRequired bool) *Form {
	this := Form{}
	this.Name = name
	this.Category = category
	this.Components = components
	this.MarkOptional = markOptional
	this.MarkRequired = markRequired
	return &this
}

// NewFormWithDefaults instantiates a new Form object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormWithDefaults() *Form {
	this := Form{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Form) GetLinks() map[string]LinksHATEOASValue {
	if o == nil || IsNil(o.Links) {
		var ret map[string]LinksHATEOASValue
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetLinksOk() (*map[string]LinksHATEOASValue, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Form) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]LinksHATEOASValue and assigns it to the Links field.
func (o *Form) SetLinks(v map[string]LinksHATEOASValue) {
	o.Links = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Form) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Form) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Form) SetId(v string) {
	o.Id = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *Form) GetEnvironment() ObjectEnvironment {
	if o == nil || IsNil(o.Environment) {
		var ret ObjectEnvironment
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetEnvironmentOk() (*ObjectEnvironment, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *Form) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given ObjectEnvironment and assigns it to the Environment field.
func (o *Form) SetEnvironment(v ObjectEnvironment) {
	o.Environment = &v
}

// GetName returns the Name field value
func (o *Form) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Form) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Form) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Form) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Form) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Form) SetDescription(v string) {
	o.Description = &v
}

// GetCategory returns the Category field value
func (o *Form) GetCategory() EnumFormCategory {
	if o == nil {
		var ret EnumFormCategory
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *Form) GetCategoryOk() (*EnumFormCategory, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *Form) SetCategory(v EnumFormCategory) {
	o.Category = v
}

// GetComponents returns the Components field value
func (o *Form) GetComponents() FormComponents {
	if o == nil {
		var ret FormComponents
		return ret
	}

	return o.Components
}

// GetComponentsOk returns a tuple with the Components field value
// and a boolean to check if the value has been set.
func (o *Form) GetComponentsOk() (*FormComponents, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Components, true
}

// SetComponents sets field value
func (o *Form) SetComponents(v FormComponents) {
	o.Components = v
}

// GetCols returns the Cols field value if set, zero value otherwise.
func (o *Form) GetCols() int32 {
	if o == nil || IsNil(o.Cols) {
		var ret int32
		return ret
	}
	return *o.Cols
}

// GetColsOk returns a tuple with the Cols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetColsOk() (*int32, bool) {
	if o == nil || IsNil(o.Cols) {
		return nil, false
	}
	return o.Cols, true
}

// HasCols returns a boolean if a field has been set.
func (o *Form) HasCols() bool {
	if o != nil && !IsNil(o.Cols) {
		return true
	}

	return false
}

// SetCols gets a reference to the given int32 and assigns it to the Cols field.
func (o *Form) SetCols(v int32) {
	o.Cols = &v
}

// GetMarkOptional returns the MarkOptional field value
func (o *Form) GetMarkOptional() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MarkOptional
}

// GetMarkOptionalOk returns a tuple with the MarkOptional field value
// and a boolean to check if the value has been set.
func (o *Form) GetMarkOptionalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MarkOptional, true
}

// SetMarkOptional sets field value
func (o *Form) SetMarkOptional(v bool) {
	o.MarkOptional = v
}

// GetMarkRequired returns the MarkRequired field value
func (o *Form) GetMarkRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.MarkRequired
}

// GetMarkRequiredOk returns a tuple with the MarkRequired field value
// and a boolean to check if the value has been set.
func (o *Form) GetMarkRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MarkRequired, true
}

// SetMarkRequired sets field value
func (o *Form) SetMarkRequired(v bool) {
	o.MarkRequired = v
}

// GetTranslationMethod returns the TranslationMethod field value if set, zero value otherwise.
func (o *Form) GetTranslationMethod() EnumFormTranslationMethod {
	if o == nil || IsNil(o.TranslationMethod) {
		var ret EnumFormTranslationMethod
		return ret
	}
	return *o.TranslationMethod
}

// GetTranslationMethodOk returns a tuple with the TranslationMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetTranslationMethodOk() (*EnumFormTranslationMethod, bool) {
	if o == nil || IsNil(o.TranslationMethod) {
		return nil, false
	}
	return o.TranslationMethod, true
}

// HasTranslationMethod returns a boolean if a field has been set.
func (o *Form) HasTranslationMethod() bool {
	if o != nil && !IsNil(o.TranslationMethod) {
		return true
	}

	return false
}

// SetTranslationMethod gets a reference to the given EnumFormTranslationMethod and assigns it to the TranslationMethod field.
func (o *Form) SetTranslationMethod(v EnumFormTranslationMethod) {
	o.TranslationMethod = &v
}

// GetFieldTypes returns the FieldTypes field value if set, zero value otherwise.
func (o *Form) GetFieldTypes() []EnumFormFieldType {
	if o == nil || IsNil(o.FieldTypes) {
		var ret []EnumFormFieldType
		return ret
	}
	return o.FieldTypes
}

// GetFieldTypesOk returns a tuple with the FieldTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetFieldTypesOk() ([]EnumFormFieldType, bool) {
	if o == nil || IsNil(o.FieldTypes) {
		return nil, false
	}
	return o.FieldTypes, true
}

// HasFieldTypes returns a boolean if a field has been set.
func (o *Form) HasFieldTypes() bool {
	if o != nil && !IsNil(o.FieldTypes) {
		return true
	}

	return false
}

// SetFieldTypes gets a reference to the given []EnumFormFieldType and assigns it to the FieldTypes field.
func (o *Form) SetFieldTypes(v []EnumFormFieldType) {
	o.FieldTypes = v
}

// GetLanguageBundle returns the LanguageBundle field value if set, zero value otherwise.
func (o *Form) GetLanguageBundle() map[string]string {
	if o == nil || IsNil(o.LanguageBundle) {
		var ret map[string]string
		return ret
	}
	return *o.LanguageBundle
}

// GetLanguageBundleOk returns a tuple with the LanguageBundle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetLanguageBundleOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.LanguageBundle) {
		return nil, false
	}
	return o.LanguageBundle, true
}

// HasLanguageBundle returns a boolean if a field has been set.
func (o *Form) HasLanguageBundle() bool {
	if o != nil && !IsNil(o.LanguageBundle) {
		return true
	}

	return false
}

// SetLanguageBundle gets a reference to the given map[string]string and assigns it to the LanguageBundle field.
func (o *Form) SetLanguageBundle(v map[string]string) {
	o.LanguageBundle = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Form) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Form) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *Form) SetCreated(v time.Time) {
	o.Created = &v
}

// GetModified returns the Modified field value if set, zero value otherwise.
func (o *Form) GetModified() time.Time {
	if o == nil || IsNil(o.Modified) {
		var ret time.Time
		return ret
	}
	return *o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Form) GetModifiedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Modified) {
		return nil, false
	}
	return o.Modified, true
}

// HasModified returns a boolean if a field has been set.
func (o *Form) HasModified() bool {
	if o != nil && !IsNil(o.Modified) {
		return true
	}

	return false
}

// SetModified gets a reference to the given time.Time and assigns it to the Modified field.
func (o *Form) SetModified(v time.Time) {
	o.Modified = &v
}

func (o Form) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Form) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["category"] = o.Category
	toSerialize["components"] = o.Components
	if !IsNil(o.Cols) {
		toSerialize["cols"] = o.Cols
	}
	toSerialize["markOptional"] = o.MarkOptional
	toSerialize["markRequired"] = o.MarkRequired
	if !IsNil(o.TranslationMethod) {
		toSerialize["translationMethod"] = o.TranslationMethod
	}
	if !IsNil(o.FieldTypes) {
		toSerialize["fieldTypes"] = o.FieldTypes
	}
	if !IsNil(o.LanguageBundle) {
		toSerialize["languageBundle"] = o.LanguageBundle
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Modified) {
		toSerialize["modified"] = o.Modified
	}
	return toSerialize, nil
}

type NullableForm struct {
	value *Form
	isSet bool
}

func (v NullableForm) Get() *Form {
	return v.value
}

func (v *NullableForm) Set(val *Form) {
	v.value = val
	v.isSet = true
}

func (v NullableForm) IsSet() bool {
	return v.isSet
}

func (v *NullableForm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForm(val *Form) *NullableForm {
	return &NullableForm{value: val, isSet: true}
}

func (v NullableForm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
