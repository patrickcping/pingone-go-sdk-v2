/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumKeyRotationPolicySigAlgorithm The signature algorithm this KRP will apply to generated `KrpKeys`. `SHA256withRSA` is currently the only supported value.
type EnumKeyRotationPolicySigAlgorithm string

// List of EnumKeyRotationPolicySigAlgorithm
const (
	ENUMKEYROTATIONPOLICYSIGALGORITHM_SHA256WITH_RSA EnumKeyRotationPolicySigAlgorithm = "SHA256withRSA"
)

// All allowed values of EnumKeyRotationPolicySigAlgorithm enum
var AllowedEnumKeyRotationPolicySigAlgorithmEnumValues = []EnumKeyRotationPolicySigAlgorithm{
	"SHA256withRSA",
}

func (v *EnumKeyRotationPolicySigAlgorithm) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumKeyRotationPolicySigAlgorithm(value)
	for _, existing := range AllowedEnumKeyRotationPolicySigAlgorithmEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumKeyRotationPolicySigAlgorithm(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumKeyRotationPolicySigAlgorithmFromValue returns a pointer to a valid EnumKeyRotationPolicySigAlgorithm
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumKeyRotationPolicySigAlgorithmFromValue(v string) (*EnumKeyRotationPolicySigAlgorithm, error) {
	ev := EnumKeyRotationPolicySigAlgorithm(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumKeyRotationPolicySigAlgorithm: valid values are %v", v, AllowedEnumKeyRotationPolicySigAlgorithmEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumKeyRotationPolicySigAlgorithm) IsValid() bool {
	for _, existing := range AllowedEnumKeyRotationPolicySigAlgorithmEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumKeyRotationPolicySigAlgorithm value
func (v EnumKeyRotationPolicySigAlgorithm) Ptr() *EnumKeyRotationPolicySigAlgorithm {
	return &v
}

type NullableEnumKeyRotationPolicySigAlgorithm struct {
	value *EnumKeyRotationPolicySigAlgorithm
	isSet bool
}

func (v NullableEnumKeyRotationPolicySigAlgorithm) Get() *EnumKeyRotationPolicySigAlgorithm {
	return v.value
}

func (v *NullableEnumKeyRotationPolicySigAlgorithm) Set(val *EnumKeyRotationPolicySigAlgorithm) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumKeyRotationPolicySigAlgorithm) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumKeyRotationPolicySigAlgorithm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumKeyRotationPolicySigAlgorithm(val *EnumKeyRotationPolicySigAlgorithm) *NullableEnumKeyRotationPolicySigAlgorithm {
	return &NullableEnumKeyRotationPolicySigAlgorithm{value: val, isSet: true}
}

func (v NullableEnumKeyRotationPolicySigAlgorithm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumKeyRotationPolicySigAlgorithm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
