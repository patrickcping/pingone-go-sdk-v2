/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the IntegrationVersionCommonConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationVersionCommonConfiguration{}

// IntegrationVersionCommonConfiguration The configuration of the integration version. If specified, configuration.schema and configuration.properties is required.
type IntegrationVersionCommonConfiguration struct {
	// Contains a JSON schema defining the integration version.
	Schema map[string]interface{} `json:"schema"`
	// Contains the property names and assigned values for the integration version.
	Properties map[string]interface{} `json:"properties"`
}

// NewIntegrationVersionCommonConfiguration instantiates a new IntegrationVersionCommonConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationVersionCommonConfiguration(schema map[string]interface{}, properties map[string]interface{}) *IntegrationVersionCommonConfiguration {
	this := IntegrationVersionCommonConfiguration{}
	this.Schema = schema
	this.Properties = properties
	return &this
}

// NewIntegrationVersionCommonConfigurationWithDefaults instantiates a new IntegrationVersionCommonConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationVersionCommonConfigurationWithDefaults() *IntegrationVersionCommonConfiguration {
	this := IntegrationVersionCommonConfiguration{}
	return &this
}

// GetSchema returns the Schema field value
func (o *IntegrationVersionCommonConfiguration) GetSchema() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value
// and a boolean to check if the value has been set.
func (o *IntegrationVersionCommonConfiguration) GetSchemaOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Schema, true
}

// SetSchema sets field value
func (o *IntegrationVersionCommonConfiguration) SetSchema(v map[string]interface{}) {
	o.Schema = v
}

// GetProperties returns the Properties field value
func (o *IntegrationVersionCommonConfiguration) GetProperties() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *IntegrationVersionCommonConfiguration) GetPropertiesOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Properties, true
}

// SetProperties sets field value
func (o *IntegrationVersionCommonConfiguration) SetProperties(v map[string]interface{}) {
	o.Properties = v
}

func (o IntegrationVersionCommonConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationVersionCommonConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["schema"] = o.Schema
	toSerialize["properties"] = o.Properties
	return toSerialize, nil
}

type NullableIntegrationVersionCommonConfiguration struct {
	value *IntegrationVersionCommonConfiguration
	isSet bool
}

func (v NullableIntegrationVersionCommonConfiguration) Get() *IntegrationVersionCommonConfiguration {
	return v.value
}

func (v *NullableIntegrationVersionCommonConfiguration) Set(val *IntegrationVersionCommonConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationVersionCommonConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationVersionCommonConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationVersionCommonConfiguration(val *IntegrationVersionCommonConfiguration) *NullableIntegrationVersionCommonConfiguration {
	return &NullableIntegrationVersionCommonConfiguration{value: val, isSet: true}
}

func (v NullableIntegrationVersionCommonConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationVersionCommonConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
