/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumAdministratorSecurityAuthenticationMethod Indicates whether to use PingOne MFA, an external IdP, or a combination of both for admin sign-on. Possible values are `PINGONE`, `EXTERNAL`, or `HYBRID`. The default is `PINGONE`.
type EnumAdministratorSecurityAuthenticationMethod string

// List of EnumAdministratorSecurityAuthenticationMethod
const (
	ENUMADMINISTRATORSECURITYAUTHENTICATIONMETHOD_PINGONE  EnumAdministratorSecurityAuthenticationMethod = "PINGONE"
	ENUMADMINISTRATORSECURITYAUTHENTICATIONMETHOD_EXTERNAL EnumAdministratorSecurityAuthenticationMethod = "EXTERNAL"
	ENUMADMINISTRATORSECURITYAUTHENTICATIONMETHOD_HYBRID   EnumAdministratorSecurityAuthenticationMethod = "HYBRID"
)

// All allowed values of EnumAdministratorSecurityAuthenticationMethod enum
var AllowedEnumAdministratorSecurityAuthenticationMethodEnumValues = []EnumAdministratorSecurityAuthenticationMethod{
	"PINGONE",
	"EXTERNAL",
	"HYBRID",
}

func (v *EnumAdministratorSecurityAuthenticationMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAdministratorSecurityAuthenticationMethod(value)
	for _, existing := range AllowedEnumAdministratorSecurityAuthenticationMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAdministratorSecurityAuthenticationMethod(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAdministratorSecurityAuthenticationMethodFromValue returns a pointer to a valid EnumAdministratorSecurityAuthenticationMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAdministratorSecurityAuthenticationMethodFromValue(v string) (*EnumAdministratorSecurityAuthenticationMethod, error) {
	ev := EnumAdministratorSecurityAuthenticationMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAdministratorSecurityAuthenticationMethod: valid values are %v", v, AllowedEnumAdministratorSecurityAuthenticationMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAdministratorSecurityAuthenticationMethod) IsValid() bool {
	for _, existing := range AllowedEnumAdministratorSecurityAuthenticationMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAdministratorSecurityAuthenticationMethod value
func (v EnumAdministratorSecurityAuthenticationMethod) Ptr() *EnumAdministratorSecurityAuthenticationMethod {
	return &v
}

type NullableEnumAdministratorSecurityAuthenticationMethod struct {
	value *EnumAdministratorSecurityAuthenticationMethod
	isSet bool
}

func (v NullableEnumAdministratorSecurityAuthenticationMethod) Get() *EnumAdministratorSecurityAuthenticationMethod {
	return v.value
}

func (v *NullableEnumAdministratorSecurityAuthenticationMethod) Set(val *EnumAdministratorSecurityAuthenticationMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAdministratorSecurityAuthenticationMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAdministratorSecurityAuthenticationMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAdministratorSecurityAuthenticationMethod(val *EnumAdministratorSecurityAuthenticationMethod) *NullableEnumAdministratorSecurityAuthenticationMethod {
	return &NullableEnumAdministratorSecurityAuthenticationMethod{value: val, isSet: true}
}

func (v NullableEnumAdministratorSecurityAuthenticationMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAdministratorSecurityAuthenticationMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
