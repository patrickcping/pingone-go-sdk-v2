/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"time"
)

// checks if the KeyRotationPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyRotationPolicy{}

// KeyRotationPolicy struct for KeyRotationPolicy
type KeyRotationPolicy struct {
	Links     *map[string]LinksHATEOASValue  `json:"_links,omitempty"`
	Algorithm EnumKeyRotationPolicyAlgorithm `json:"algorithm"`
	// The `kid` (key identifier) of the `KrpKey` designated as `CURRENT`.
	CurrentKeyId *string `json:"currentKeyId,omitempty"`
	// The DN this KRP will apply to generated `KrpKeys`. Is applied as both `issuerDN` and `subjectDN` because generated `KrpKeys` are self-signed.
	Dn string `json:"dn"`
	// The resourceâ€™s unique identifier.
	Id          *string            `json:"id,omitempty"`
	Environment *ObjectEnvironment `json:"environment,omitempty"`
	// The number of bytes of a cryptographic key this KRP will apply to generated `KrpKeys`.
	KeyLength int32 `json:"keyLength"`
	// Human-readable name displayed in the admin console.
	Name string `json:"name"`
	// The `kid` (key identifier) of the `KrpKey` designated as `NEXT`.
	NextKeyId *string `json:"nextKeyId,omitempty"`
	// The last time this KRP was rotated.
	RotatedAt *time.Time `json:"rotatedAt,omitempty"`
	// The number of days to elapse before this KRP rotates `KrpKeys`. The default value is `90` days. The minimum value is `30` days. The maximum value is 1 day less than the `validityPeriod` value.
	RotationPeriod     *int32                            `json:"rotationPeriod,omitempty"`
	SignatureAlgorithm EnumKeyRotationPolicySigAlgorithm `json:"signatureAlgorithm"`
	UsageType          EnumKeyRotationPolicyUsageType    `json:"usageType"`
	// Controls the `startsAt` and `expiresAt` fields this KRP will apply to generated `KrpKeys`. The default value is `365` days.
	ValidityPeriod *int32 `json:"validityPeriod,omitempty"`
}

// NewKeyRotationPolicy instantiates a new KeyRotationPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyRotationPolicy(algorithm EnumKeyRotationPolicyAlgorithm, dn string, keyLength int32, name string, signatureAlgorithm EnumKeyRotationPolicySigAlgorithm, usageType EnumKeyRotationPolicyUsageType) *KeyRotationPolicy {
	this := KeyRotationPolicy{}
	this.Algorithm = algorithm
	this.Dn = dn
	this.KeyLength = keyLength
	this.Name = name
	var rotationPeriod int32 = 90
	this.RotationPeriod = &rotationPeriod
	this.SignatureAlgorithm = signatureAlgorithm
	this.UsageType = usageType
	var validityPeriod int32 = 365
	this.ValidityPeriod = &validityPeriod
	return &this
}

// NewKeyRotationPolicyWithDefaults instantiates a new KeyRotationPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyRotationPolicyWithDefaults() *KeyRotationPolicy {
	this := KeyRotationPolicy{}
	var rotationPeriod int32 = 90
	this.RotationPeriod = &rotationPeriod
	var validityPeriod int32 = 365
	this.ValidityPeriod = &validityPeriod
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *KeyRotationPolicy) GetLinks() map[string]LinksHATEOASValue {
	if o == nil || IsNil(o.Links) {
		var ret map[string]LinksHATEOASValue
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyRotationPolicy) GetLinksOk() (*map[string]LinksHATEOASValue, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *KeyRotationPolicy) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]LinksHATEOASValue and assigns it to the Links field.
func (o *KeyRotationPolicy) SetLinks(v map[string]LinksHATEOASValue) {
	o.Links = &v
}

// GetAlgorithm returns the Algorithm field value
func (o *KeyRotationPolicy) GetAlgorithm() EnumKeyRotationPolicyAlgorithm {
	if o == nil {
		var ret EnumKeyRotationPolicyAlgorithm
		return ret
	}

	return o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value
// and a boolean to check if the value has been set.
func (o *KeyRotationPolicy) GetAlgorithmOk() (*EnumKeyRotationPolicyAlgorithm, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Algorithm, true
}

// SetAlgorithm sets field value
func (o *KeyRotationPolicy) SetAlgorithm(v EnumKeyRotationPolicyAlgorithm) {
	o.Algorithm = v
}

// GetCurrentKeyId returns the CurrentKeyId field value if set, zero value otherwise.
func (o *KeyRotationPolicy) GetCurrentKeyId() string {
	if o == nil || IsNil(o.CurrentKeyId) {
		var ret string
		return ret
	}
	return *o.CurrentKeyId
}

// GetCurrentKeyIdOk returns a tuple with the CurrentKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyRotationPolicy) GetCurrentKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentKeyId) {
		return nil, false
	}
	return o.CurrentKeyId, true
}

// HasCurrentKeyId returns a boolean if a field has been set.
func (o *KeyRotationPolicy) HasCurrentKeyId() bool {
	if o != nil && !IsNil(o.CurrentKeyId) {
		return true
	}

	return false
}

// SetCurrentKeyId gets a reference to the given string and assigns it to the CurrentKeyId field.
func (o *KeyRotationPolicy) SetCurrentKeyId(v string) {
	o.CurrentKeyId = &v
}

// GetDn returns the Dn field value
func (o *KeyRotationPolicy) GetDn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dn
}

// GetDnOk returns a tuple with the Dn field value
// and a boolean to check if the value has been set.
func (o *KeyRotationPolicy) GetDnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dn, true
}

// SetDn sets field value
func (o *KeyRotationPolicy) SetDn(v string) {
	o.Dn = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *KeyRotationPolicy) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyRotationPolicy) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *KeyRotationPolicy) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *KeyRotationPolicy) SetId(v string) {
	o.Id = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *KeyRotationPolicy) GetEnvironment() ObjectEnvironment {
	if o == nil || IsNil(o.Environment) {
		var ret ObjectEnvironment
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyRotationPolicy) GetEnvironmentOk() (*ObjectEnvironment, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *KeyRotationPolicy) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given ObjectEnvironment and assigns it to the Environment field.
func (o *KeyRotationPolicy) SetEnvironment(v ObjectEnvironment) {
	o.Environment = &v
}

// GetKeyLength returns the KeyLength field value
func (o *KeyRotationPolicy) GetKeyLength() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.KeyLength
}

// GetKeyLengthOk returns a tuple with the KeyLength field value
// and a boolean to check if the value has been set.
func (o *KeyRotationPolicy) GetKeyLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.KeyLength, true
}

// SetKeyLength sets field value
func (o *KeyRotationPolicy) SetKeyLength(v int32) {
	o.KeyLength = v
}

// GetName returns the Name field value
func (o *KeyRotationPolicy) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KeyRotationPolicy) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KeyRotationPolicy) SetName(v string) {
	o.Name = v
}

// GetNextKeyId returns the NextKeyId field value if set, zero value otherwise.
func (o *KeyRotationPolicy) GetNextKeyId() string {
	if o == nil || IsNil(o.NextKeyId) {
		var ret string
		return ret
	}
	return *o.NextKeyId
}

// GetNextKeyIdOk returns a tuple with the NextKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyRotationPolicy) GetNextKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.NextKeyId) {
		return nil, false
	}
	return o.NextKeyId, true
}

// HasNextKeyId returns a boolean if a field has been set.
func (o *KeyRotationPolicy) HasNextKeyId() bool {
	if o != nil && !IsNil(o.NextKeyId) {
		return true
	}

	return false
}

// SetNextKeyId gets a reference to the given string and assigns it to the NextKeyId field.
func (o *KeyRotationPolicy) SetNextKeyId(v string) {
	o.NextKeyId = &v
}

// GetRotatedAt returns the RotatedAt field value if set, zero value otherwise.
func (o *KeyRotationPolicy) GetRotatedAt() time.Time {
	if o == nil || IsNil(o.RotatedAt) {
		var ret time.Time
		return ret
	}
	return *o.RotatedAt
}

// GetRotatedAtOk returns a tuple with the RotatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyRotationPolicy) GetRotatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RotatedAt) {
		return nil, false
	}
	return o.RotatedAt, true
}

// HasRotatedAt returns a boolean if a field has been set.
func (o *KeyRotationPolicy) HasRotatedAt() bool {
	if o != nil && !IsNil(o.RotatedAt) {
		return true
	}

	return false
}

// SetRotatedAt gets a reference to the given time.Time and assigns it to the RotatedAt field.
func (o *KeyRotationPolicy) SetRotatedAt(v time.Time) {
	o.RotatedAt = &v
}

// GetRotationPeriod returns the RotationPeriod field value if set, zero value otherwise.
func (o *KeyRotationPolicy) GetRotationPeriod() int32 {
	if o == nil || IsNil(o.RotationPeriod) {
		var ret int32
		return ret
	}
	return *o.RotationPeriod
}

// GetRotationPeriodOk returns a tuple with the RotationPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyRotationPolicy) GetRotationPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.RotationPeriod) {
		return nil, false
	}
	return o.RotationPeriod, true
}

// HasRotationPeriod returns a boolean if a field has been set.
func (o *KeyRotationPolicy) HasRotationPeriod() bool {
	if o != nil && !IsNil(o.RotationPeriod) {
		return true
	}

	return false
}

// SetRotationPeriod gets a reference to the given int32 and assigns it to the RotationPeriod field.
func (o *KeyRotationPolicy) SetRotationPeriod(v int32) {
	o.RotationPeriod = &v
}

// GetSignatureAlgorithm returns the SignatureAlgorithm field value
func (o *KeyRotationPolicy) GetSignatureAlgorithm() EnumKeyRotationPolicySigAlgorithm {
	if o == nil {
		var ret EnumKeyRotationPolicySigAlgorithm
		return ret
	}

	return o.SignatureAlgorithm
}

// GetSignatureAlgorithmOk returns a tuple with the SignatureAlgorithm field value
// and a boolean to check if the value has been set.
func (o *KeyRotationPolicy) GetSignatureAlgorithmOk() (*EnumKeyRotationPolicySigAlgorithm, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignatureAlgorithm, true
}

// SetSignatureAlgorithm sets field value
func (o *KeyRotationPolicy) SetSignatureAlgorithm(v EnumKeyRotationPolicySigAlgorithm) {
	o.SignatureAlgorithm = v
}

// GetUsageType returns the UsageType field value
func (o *KeyRotationPolicy) GetUsageType() EnumKeyRotationPolicyUsageType {
	if o == nil {
		var ret EnumKeyRotationPolicyUsageType
		return ret
	}

	return o.UsageType
}

// GetUsageTypeOk returns a tuple with the UsageType field value
// and a boolean to check if the value has been set.
func (o *KeyRotationPolicy) GetUsageTypeOk() (*EnumKeyRotationPolicyUsageType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsageType, true
}

// SetUsageType sets field value
func (o *KeyRotationPolicy) SetUsageType(v EnumKeyRotationPolicyUsageType) {
	o.UsageType = v
}

// GetValidityPeriod returns the ValidityPeriod field value if set, zero value otherwise.
func (o *KeyRotationPolicy) GetValidityPeriod() int32 {
	if o == nil || IsNil(o.ValidityPeriod) {
		var ret int32
		return ret
	}
	return *o.ValidityPeriod
}

// GetValidityPeriodOk returns a tuple with the ValidityPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyRotationPolicy) GetValidityPeriodOk() (*int32, bool) {
	if o == nil || IsNil(o.ValidityPeriod) {
		return nil, false
	}
	return o.ValidityPeriod, true
}

// HasValidityPeriod returns a boolean if a field has been set.
func (o *KeyRotationPolicy) HasValidityPeriod() bool {
	if o != nil && !IsNil(o.ValidityPeriod) {
		return true
	}

	return false
}

// SetValidityPeriod gets a reference to the given int32 and assigns it to the ValidityPeriod field.
func (o *KeyRotationPolicy) SetValidityPeriod(v int32) {
	o.ValidityPeriod = &v
}

func (o KeyRotationPolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyRotationPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	toSerialize["algorithm"] = o.Algorithm
	if !IsNil(o.CurrentKeyId) {
		toSerialize["currentKeyId"] = o.CurrentKeyId
	}
	toSerialize["dn"] = o.Dn
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	toSerialize["keyLength"] = o.KeyLength
	toSerialize["name"] = o.Name
	if !IsNil(o.NextKeyId) {
		toSerialize["nextKeyId"] = o.NextKeyId
	}
	if !IsNil(o.RotatedAt) {
		toSerialize["rotatedAt"] = o.RotatedAt
	}
	if !IsNil(o.RotationPeriod) {
		toSerialize["rotationPeriod"] = o.RotationPeriod
	}
	toSerialize["signatureAlgorithm"] = o.SignatureAlgorithm
	toSerialize["usageType"] = o.UsageType
	if !IsNil(o.ValidityPeriod) {
		toSerialize["validityPeriod"] = o.ValidityPeriod
	}
	return toSerialize, nil
}

type NullableKeyRotationPolicy struct {
	value *KeyRotationPolicy
	isSet bool
}

func (v NullableKeyRotationPolicy) Get() *KeyRotationPolicy {
	return v.value
}

func (v *NullableKeyRotationPolicy) Set(val *KeyRotationPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyRotationPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyRotationPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyRotationPolicy(val *KeyRotationPolicy) *NullableKeyRotationPolicy {
	return &NullableKeyRotationPolicy{value: val, isSet: true}
}

func (v NullableKeyRotationPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyRotationPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
