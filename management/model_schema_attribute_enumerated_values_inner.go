/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the SchemaAttributeEnumeratedValuesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaAttributeEnumeratedValuesInner{}

// SchemaAttributeEnumeratedValuesInner An object representation of an enumerated value. Maximum number of enumerations is 100.
type SchemaAttributeEnumeratedValuesInner struct {
	// A string that specifies the immutable value. Values are case sensitive; two values that differ only by case are not allowed.
	Value string `json:"value"`
	// A boolean that specifies whether the enumerated value is archived. Archived values cannot be added to a user, but existing archived values are preserved. This allows clients that read the schema to know all possible values of an attribute.
	Archived *bool `json:"archived,omitempty"`
	// A string that specifies the description of the enumerated value.
	Description *string `json:"description,omitempty"`
}

// NewSchemaAttributeEnumeratedValuesInner instantiates a new SchemaAttributeEnumeratedValuesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaAttributeEnumeratedValuesInner(value string) *SchemaAttributeEnumeratedValuesInner {
	this := SchemaAttributeEnumeratedValuesInner{}
	this.Value = value
	return &this
}

// NewSchemaAttributeEnumeratedValuesInnerWithDefaults instantiates a new SchemaAttributeEnumeratedValuesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaAttributeEnumeratedValuesInnerWithDefaults() *SchemaAttributeEnumeratedValuesInner {
	this := SchemaAttributeEnumeratedValuesInner{}
	return &this
}

// GetValue returns the Value field value
func (o *SchemaAttributeEnumeratedValuesInner) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *SchemaAttributeEnumeratedValuesInner) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *SchemaAttributeEnumeratedValuesInner) SetValue(v string) {
	o.Value = v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *SchemaAttributeEnumeratedValuesInner) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttributeEnumeratedValuesInner) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *SchemaAttributeEnumeratedValuesInner) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *SchemaAttributeEnumeratedValuesInner) SetArchived(v bool) {
	o.Archived = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SchemaAttributeEnumeratedValuesInner) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAttributeEnumeratedValuesInner) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SchemaAttributeEnumeratedValuesInner) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SchemaAttributeEnumeratedValuesInner) SetDescription(v string) {
	o.Description = &v
}

func (o SchemaAttributeEnumeratedValuesInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaAttributeEnumeratedValuesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["value"] = o.Value
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableSchemaAttributeEnumeratedValuesInner struct {
	value *SchemaAttributeEnumeratedValuesInner
	isSet bool
}

func (v NullableSchemaAttributeEnumeratedValuesInner) Get() *SchemaAttributeEnumeratedValuesInner {
	return v.value
}

func (v *NullableSchemaAttributeEnumeratedValuesInner) Set(val *SchemaAttributeEnumeratedValuesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaAttributeEnumeratedValuesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaAttributeEnumeratedValuesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaAttributeEnumeratedValuesInner(val *SchemaAttributeEnumeratedValuesInner) *NullableSchemaAttributeEnumeratedValuesInner {
	return &NullableSchemaAttributeEnumeratedValuesInner{value: val, isSet: true}
}

func (v NullableSchemaAttributeEnumeratedValuesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaAttributeEnumeratedValuesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
