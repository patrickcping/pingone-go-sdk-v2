/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumIntegrationVersionIntegrationKitIntegratedWithName Name of the compatible Ping product with which this version integrates. Can include PINGID, PINGONE_ENTERPRISE, PINGONE, PINGACCESS, PINGFEDERATE, PINGDIRECTORY, or PINGDATAGOVERNANCE
type EnumIntegrationVersionIntegrationKitIntegratedWithName string

// List of EnumIntegrationVersionIntegrationKitIntegratedWithName
const (
	ENUMINTEGRATIONVERSIONINTEGRATIONKITINTEGRATEDWITHNAME_PINGID             EnumIntegrationVersionIntegrationKitIntegratedWithName = "PINGID"
	ENUMINTEGRATIONVERSIONINTEGRATIONKITINTEGRATEDWITHNAME_PINGONE_ENTERPRISE EnumIntegrationVersionIntegrationKitIntegratedWithName = "PINGONE_ENTERPRISE"
	ENUMINTEGRATIONVERSIONINTEGRATIONKITINTEGRATEDWITHNAME_PINGONE            EnumIntegrationVersionIntegrationKitIntegratedWithName = "PINGONE"
	ENUMINTEGRATIONVERSIONINTEGRATIONKITINTEGRATEDWITHNAME_PINGACCESS         EnumIntegrationVersionIntegrationKitIntegratedWithName = "PINGACCESS"
	ENUMINTEGRATIONVERSIONINTEGRATIONKITINTEGRATEDWITHNAME_PINGFEDERATE       EnumIntegrationVersionIntegrationKitIntegratedWithName = "PINGFEDERATE"
	ENUMINTEGRATIONVERSIONINTEGRATIONKITINTEGRATEDWITHNAME_PINGDIRECTORY      EnumIntegrationVersionIntegrationKitIntegratedWithName = "PINGDIRECTORY"
	ENUMINTEGRATIONVERSIONINTEGRATIONKITINTEGRATEDWITHNAME_PINGDATAGOVERNANCE EnumIntegrationVersionIntegrationKitIntegratedWithName = "PINGDATAGOVERNANCE"
)

// All allowed values of EnumIntegrationVersionIntegrationKitIntegratedWithName enum
var AllowedEnumIntegrationVersionIntegrationKitIntegratedWithNameEnumValues = []EnumIntegrationVersionIntegrationKitIntegratedWithName{
	"PINGID",
	"PINGONE_ENTERPRISE",
	"PINGONE",
	"PINGACCESS",
	"PINGFEDERATE",
	"PINGDIRECTORY",
	"PINGDATAGOVERNANCE",
}

func (v *EnumIntegrationVersionIntegrationKitIntegratedWithName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumIntegrationVersionIntegrationKitIntegratedWithName(value)
	for _, existing := range AllowedEnumIntegrationVersionIntegrationKitIntegratedWithNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumIntegrationVersionIntegrationKitIntegratedWithName(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumIntegrationVersionIntegrationKitIntegratedWithNameFromValue returns a pointer to a valid EnumIntegrationVersionIntegrationKitIntegratedWithName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumIntegrationVersionIntegrationKitIntegratedWithNameFromValue(v string) (*EnumIntegrationVersionIntegrationKitIntegratedWithName, error) {
	ev := EnumIntegrationVersionIntegrationKitIntegratedWithName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumIntegrationVersionIntegrationKitIntegratedWithName: valid values are %v", v, AllowedEnumIntegrationVersionIntegrationKitIntegratedWithNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumIntegrationVersionIntegrationKitIntegratedWithName) IsValid() bool {
	for _, existing := range AllowedEnumIntegrationVersionIntegrationKitIntegratedWithNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumIntegrationVersionIntegrationKitIntegratedWithName value
func (v EnumIntegrationVersionIntegrationKitIntegratedWithName) Ptr() *EnumIntegrationVersionIntegrationKitIntegratedWithName {
	return &v
}

type NullableEnumIntegrationVersionIntegrationKitIntegratedWithName struct {
	value *EnumIntegrationVersionIntegrationKitIntegratedWithName
	isSet bool
}

func (v NullableEnumIntegrationVersionIntegrationKitIntegratedWithName) Get() *EnumIntegrationVersionIntegrationKitIntegratedWithName {
	return v.value
}

func (v *NullableEnumIntegrationVersionIntegrationKitIntegratedWithName) Set(val *EnumIntegrationVersionIntegrationKitIntegratedWithName) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumIntegrationVersionIntegrationKitIntegratedWithName) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumIntegrationVersionIntegrationKitIntegratedWithName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumIntegrationVersionIntegrationKitIntegratedWithName(val *EnumIntegrationVersionIntegrationKitIntegratedWithName) *NullableEnumIntegrationVersionIntegrationKitIntegratedWithName {
	return &NullableEnumIntegrationVersionIntegrationKitIntegratedWithName{value: val, isSet: true}
}

func (v NullableEnumIntegrationVersionIntegrationKitIntegratedWithName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumIntegrationVersionIntegrationKitIntegratedWithName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
