/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the CustomAdminRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomAdminRole{}

// CustomAdminRole struct for CustomAdminRole
type CustomAdminRole struct {
	Links *map[string]LinksHATEOASValue `json:"_links,omitempty"`
	// The scope types to which the role can be applied.
	ApplicableTo []EnumCustomAdminRoleApplicableTo `json:"applicableTo,omitempty"`
	// A relationship that specifies if an actor is assigned the current custom role for a jurisdiction, then the actor can assign any of this set of roles to another actor for the same jurisdiction or sub-jurisdiction. This capability is dreived from the canBeAssignedBy property.
	CanAssign []CustomAdminRoleCanAssignInner `json:"canAssign,omitempty"`
	// A relationship that determines whether a user assigned to one of this set of roles for a jurisdiction can assign the current custom role to another user for the same jurisdiction or sub-jurisdiction.
	CanBeAssignedBy []CustomAdminRoleCanAssignInner `json:"canBeAssignedBy"`
	// The description of the role.
	Description *string            `json:"description,omitempty"`
	Environment *ObjectEnvironment `json:"environment,omitempty"`
	// A string that specifies the resourceâ€™s unique identifier.
	Id *string `json:"id,omitempty"`
	// The role name.
	Name string `json:"name"`
	// The set of permissions assigned to the role.
	Permissions []CustomAdminRolePermissionsInner `json:"permissions"`
	Type        *EnumCustomAdminRoleType          `json:"type,omitempty"`
}

// NewCustomAdminRole instantiates a new CustomAdminRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomAdminRole(canBeAssignedBy []CustomAdminRoleCanAssignInner, name string, permissions []CustomAdminRolePermissionsInner) *CustomAdminRole {
	this := CustomAdminRole{}
	this.CanBeAssignedBy = canBeAssignedBy
	this.Name = name
	this.Permissions = permissions
	return &this
}

// NewCustomAdminRoleWithDefaults instantiates a new CustomAdminRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomAdminRoleWithDefaults() *CustomAdminRole {
	this := CustomAdminRole{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *CustomAdminRole) GetLinks() map[string]LinksHATEOASValue {
	if o == nil || IsNil(o.Links) {
		var ret map[string]LinksHATEOASValue
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomAdminRole) GetLinksOk() (*map[string]LinksHATEOASValue, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *CustomAdminRole) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]LinksHATEOASValue and assigns it to the Links field.
func (o *CustomAdminRole) SetLinks(v map[string]LinksHATEOASValue) {
	o.Links = &v
}

// GetApplicableTo returns the ApplicableTo field value if set, zero value otherwise.
func (o *CustomAdminRole) GetApplicableTo() []EnumCustomAdminRoleApplicableTo {
	if o == nil || IsNil(o.ApplicableTo) {
		var ret []EnumCustomAdminRoleApplicableTo
		return ret
	}
	return o.ApplicableTo
}

// GetApplicableToOk returns a tuple with the ApplicableTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomAdminRole) GetApplicableToOk() ([]EnumCustomAdminRoleApplicableTo, bool) {
	if o == nil || IsNil(o.ApplicableTo) {
		return nil, false
	}
	return o.ApplicableTo, true
}

// HasApplicableTo returns a boolean if a field has been set.
func (o *CustomAdminRole) HasApplicableTo() bool {
	if o != nil && !IsNil(o.ApplicableTo) {
		return true
	}

	return false
}

// SetApplicableTo gets a reference to the given []EnumCustomAdminRoleApplicableTo and assigns it to the ApplicableTo field.
func (o *CustomAdminRole) SetApplicableTo(v []EnumCustomAdminRoleApplicableTo) {
	o.ApplicableTo = v
}

// GetCanAssign returns the CanAssign field value if set, zero value otherwise.
func (o *CustomAdminRole) GetCanAssign() []CustomAdminRoleCanAssignInner {
	if o == nil || IsNil(o.CanAssign) {
		var ret []CustomAdminRoleCanAssignInner
		return ret
	}
	return o.CanAssign
}

// GetCanAssignOk returns a tuple with the CanAssign field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomAdminRole) GetCanAssignOk() ([]CustomAdminRoleCanAssignInner, bool) {
	if o == nil || IsNil(o.CanAssign) {
		return nil, false
	}
	return o.CanAssign, true
}

// HasCanAssign returns a boolean if a field has been set.
func (o *CustomAdminRole) HasCanAssign() bool {
	if o != nil && !IsNil(o.CanAssign) {
		return true
	}

	return false
}

// SetCanAssign gets a reference to the given []CustomAdminRoleCanAssignInner and assigns it to the CanAssign field.
func (o *CustomAdminRole) SetCanAssign(v []CustomAdminRoleCanAssignInner) {
	o.CanAssign = v
}

// GetCanBeAssignedBy returns the CanBeAssignedBy field value
func (o *CustomAdminRole) GetCanBeAssignedBy() []CustomAdminRoleCanAssignInner {
	if o == nil {
		var ret []CustomAdminRoleCanAssignInner
		return ret
	}

	return o.CanBeAssignedBy
}

// GetCanBeAssignedByOk returns a tuple with the CanBeAssignedBy field value
// and a boolean to check if the value has been set.
func (o *CustomAdminRole) GetCanBeAssignedByOk() ([]CustomAdminRoleCanAssignInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanBeAssignedBy, true
}

// SetCanBeAssignedBy sets field value
func (o *CustomAdminRole) SetCanBeAssignedBy(v []CustomAdminRoleCanAssignInner) {
	o.CanBeAssignedBy = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CustomAdminRole) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomAdminRole) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CustomAdminRole) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CustomAdminRole) SetDescription(v string) {
	o.Description = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *CustomAdminRole) GetEnvironment() ObjectEnvironment {
	if o == nil || IsNil(o.Environment) {
		var ret ObjectEnvironment
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomAdminRole) GetEnvironmentOk() (*ObjectEnvironment, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *CustomAdminRole) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given ObjectEnvironment and assigns it to the Environment field.
func (o *CustomAdminRole) SetEnvironment(v ObjectEnvironment) {
	o.Environment = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CustomAdminRole) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomAdminRole) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CustomAdminRole) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CustomAdminRole) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *CustomAdminRole) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CustomAdminRole) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CustomAdminRole) SetName(v string) {
	o.Name = v
}

// GetPermissions returns the Permissions field value
func (o *CustomAdminRole) GetPermissions() []CustomAdminRolePermissionsInner {
	if o == nil {
		var ret []CustomAdminRolePermissionsInner
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *CustomAdminRole) GetPermissionsOk() ([]CustomAdminRolePermissionsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *CustomAdminRole) SetPermissions(v []CustomAdminRolePermissionsInner) {
	o.Permissions = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CustomAdminRole) GetType() EnumCustomAdminRoleType {
	if o == nil || IsNil(o.Type) {
		var ret EnumCustomAdminRoleType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomAdminRole) GetTypeOk() (*EnumCustomAdminRoleType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CustomAdminRole) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given EnumCustomAdminRoleType and assigns it to the Type field.
func (o *CustomAdminRole) SetType(v EnumCustomAdminRoleType) {
	o.Type = &v
}

func (o CustomAdminRole) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomAdminRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.ApplicableTo) {
		toSerialize["applicableTo"] = o.ApplicableTo
	}
	if !IsNil(o.CanAssign) {
		toSerialize["canAssign"] = o.CanAssign
	}
	toSerialize["canBeAssignedBy"] = o.CanBeAssignedBy
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	toSerialize["permissions"] = o.Permissions
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableCustomAdminRole struct {
	value *CustomAdminRole
	isSet bool
}

func (v NullableCustomAdminRole) Get() *CustomAdminRole {
	return v.value
}

func (v *NullableCustomAdminRole) Set(val *CustomAdminRole) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomAdminRole) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomAdminRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomAdminRole(val *CustomAdminRole) *NullableCustomAdminRole {
	return &NullableCustomAdminRole{value: val, isSet: true}
}

func (v NullableCustomAdminRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomAdminRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
