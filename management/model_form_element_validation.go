/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the FormElementValidation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormElementValidation{}

// FormElementValidation An object containing validation data for the field. This is a required property when the type is `TEXT`.
type FormElementValidation struct {
	// A string that specifies a validation regular expression. The expression must be a valid regular expression string. This is a required property when the validation type is `CUSTOM`.
	Regex *string                        `json:"regex,omitempty"`
	Type  *EnumFormElementValidationType `json:"type,omitempty"`
	// A string that specifies the error message to be displayed when the field validation fails.
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// NewFormElementValidation instantiates a new FormElementValidation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormElementValidation() *FormElementValidation {
	this := FormElementValidation{}
	return &this
}

// NewFormElementValidationWithDefaults instantiates a new FormElementValidation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormElementValidationWithDefaults() *FormElementValidation {
	this := FormElementValidation{}
	return &this
}

// GetRegex returns the Regex field value if set, zero value otherwise.
func (o *FormElementValidation) GetRegex() string {
	if o == nil || IsNil(o.Regex) {
		var ret string
		return ret
	}
	return *o.Regex
}

// GetRegexOk returns a tuple with the Regex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormElementValidation) GetRegexOk() (*string, bool) {
	if o == nil || IsNil(o.Regex) {
		return nil, false
	}
	return o.Regex, true
}

// HasRegex returns a boolean if a field has been set.
func (o *FormElementValidation) HasRegex() bool {
	if o != nil && !IsNil(o.Regex) {
		return true
	}

	return false
}

// SetRegex gets a reference to the given string and assigns it to the Regex field.
func (o *FormElementValidation) SetRegex(v string) {
	o.Regex = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FormElementValidation) GetType() EnumFormElementValidationType {
	if o == nil || IsNil(o.Type) {
		var ret EnumFormElementValidationType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormElementValidation) GetTypeOk() (*EnumFormElementValidationType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FormElementValidation) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given EnumFormElementValidationType and assigns it to the Type field.
func (o *FormElementValidation) SetType(v EnumFormElementValidationType) {
	o.Type = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *FormElementValidation) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormElementValidation) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *FormElementValidation) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *FormElementValidation) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

func (o FormElementValidation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormElementValidation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Regex) {
		toSerialize["regex"] = o.Regex
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	return toSerialize, nil
}

type NullableFormElementValidation struct {
	value *FormElementValidation
	isSet bool
}

func (v NullableFormElementValidation) Get() *FormElementValidation {
	return v.value
}

func (v *NullableFormElementValidation) Set(val *FormElementValidation) {
	v.value = val
	v.isSet = true
}

func (v NullableFormElementValidation) IsSet() bool {
	return v.isSet
}

func (v *NullableFormElementValidation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormElementValidation(val *FormElementValidation) *NullableFormElementValidation {
	return &NullableFormElementValidation{value: val, isSet: true}
}

func (v NullableFormElementValidation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormElementValidation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
