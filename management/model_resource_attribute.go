/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the ResourceAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceAttribute{}

// ResourceAttribute struct for ResourceAttribute
type ResourceAttribute struct {
	Links *map[string]LinksHATEOASValue `json:"_links,omitempty"`
	// A string that specifies the resource’s unique identifier.
	Id *string `json:"id,omitempty"`
	// A string that specifies the name of the custom resource attribute to be included in the access token. The following are reserved names and cannot be used. Thesese reserved names are applicable only when the resource's type property is `OPENID_CONNECT`: - `acr` - `amr` - `aud` - `auth_time` - `client_id` - `env` - `exp` - `iat` - `iss` - `jti` - `org` - `p1.*` (any name starting with the p1. prefix) - `scope` - `sid` - `sub`
	Name string                     `json:"name"`
	Type *EnumResourceAttributeType `json:"type,omitempty"`
	// A string that specifies the value of the custom resource attribute. This value can be a placeholder that references an attribute in the user schema, expressed as `${user.path.to.value}`, or it can be a static string. Placeholders must be valid, enabled attributes in the environment’s user schema. Examples fo valid values are `${user.email}`, `${user.name.family}`, and `myClaimValueString`
	Value       string                                     `json:"value"`
	Environment *ObjectEnvironment                         `json:"environment,omitempty"`
	Resource    *IdentityProviderAttributeIdentityProvider `json:"resource,omitempty"`
	// A boolean that specifies whether the attribute mapping should be available in the ID Token. This property is applicable only when the application's protocol property is `OPENID_CONNECT`. If omitted, the default is `true`. Note that the `idToken` and `userInfo` properties cannot both be set to `false`. At least one of these properties must have a value of `true`.
	IdToken *bool `json:"idToken,omitempty"`
	// A boolean that specifies whether the attribute mapping should be available through the `/as/userinfo` endpoint. This property is applicable only when the application's protocol property is `OPENID_CONNECT`. If omitted, the default is `true`. Note that the `idToken` and `userInfo` properties cannot both be set to `false`. At least one of these properties must have a value of `true`.
	UserInfo *bool `json:"userInfo,omitempty"`
}

// NewResourceAttribute instantiates a new ResourceAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceAttribute(name string, value string) *ResourceAttribute {
	this := ResourceAttribute{}
	this.Name = name
	this.Value = value
	return &this
}

// NewResourceAttributeWithDefaults instantiates a new ResourceAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceAttributeWithDefaults() *ResourceAttribute {
	this := ResourceAttribute{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ResourceAttribute) GetLinks() map[string]LinksHATEOASValue {
	if o == nil || IsNil(o.Links) {
		var ret map[string]LinksHATEOASValue
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceAttribute) GetLinksOk() (*map[string]LinksHATEOASValue, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ResourceAttribute) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]LinksHATEOASValue and assigns it to the Links field.
func (o *ResourceAttribute) SetLinks(v map[string]LinksHATEOASValue) {
	o.Links = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResourceAttribute) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceAttribute) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResourceAttribute) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ResourceAttribute) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *ResourceAttribute) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ResourceAttribute) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ResourceAttribute) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ResourceAttribute) GetType() EnumResourceAttributeType {
	if o == nil || IsNil(o.Type) {
		var ret EnumResourceAttributeType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceAttribute) GetTypeOk() (*EnumResourceAttributeType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ResourceAttribute) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given EnumResourceAttributeType and assigns it to the Type field.
func (o *ResourceAttribute) SetType(v EnumResourceAttributeType) {
	o.Type = &v
}

// GetValue returns the Value field value
func (o *ResourceAttribute) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ResourceAttribute) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ResourceAttribute) SetValue(v string) {
	o.Value = v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *ResourceAttribute) GetEnvironment() ObjectEnvironment {
	if o == nil || IsNil(o.Environment) {
		var ret ObjectEnvironment
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceAttribute) GetEnvironmentOk() (*ObjectEnvironment, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *ResourceAttribute) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given ObjectEnvironment and assigns it to the Environment field.
func (o *ResourceAttribute) SetEnvironment(v ObjectEnvironment) {
	o.Environment = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *ResourceAttribute) GetResource() IdentityProviderAttributeIdentityProvider {
	if o == nil || IsNil(o.Resource) {
		var ret IdentityProviderAttributeIdentityProvider
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceAttribute) GetResourceOk() (*IdentityProviderAttributeIdentityProvider, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *ResourceAttribute) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given IdentityProviderAttributeIdentityProvider and assigns it to the Resource field.
func (o *ResourceAttribute) SetResource(v IdentityProviderAttributeIdentityProvider) {
	o.Resource = &v
}

// GetIdToken returns the IdToken field value if set, zero value otherwise.
func (o *ResourceAttribute) GetIdToken() bool {
	if o == nil || IsNil(o.IdToken) {
		var ret bool
		return ret
	}
	return *o.IdToken
}

// GetIdTokenOk returns a tuple with the IdToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceAttribute) GetIdTokenOk() (*bool, bool) {
	if o == nil || IsNil(o.IdToken) {
		return nil, false
	}
	return o.IdToken, true
}

// HasIdToken returns a boolean if a field has been set.
func (o *ResourceAttribute) HasIdToken() bool {
	if o != nil && !IsNil(o.IdToken) {
		return true
	}

	return false
}

// SetIdToken gets a reference to the given bool and assigns it to the IdToken field.
func (o *ResourceAttribute) SetIdToken(v bool) {
	o.IdToken = &v
}

// GetUserInfo returns the UserInfo field value if set, zero value otherwise.
func (o *ResourceAttribute) GetUserInfo() bool {
	if o == nil || IsNil(o.UserInfo) {
		var ret bool
		return ret
	}
	return *o.UserInfo
}

// GetUserInfoOk returns a tuple with the UserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceAttribute) GetUserInfoOk() (*bool, bool) {
	if o == nil || IsNil(o.UserInfo) {
		return nil, false
	}
	return o.UserInfo, true
}

// HasUserInfo returns a boolean if a field has been set.
func (o *ResourceAttribute) HasUserInfo() bool {
	if o != nil && !IsNil(o.UserInfo) {
		return true
	}

	return false
}

// SetUserInfo gets a reference to the given bool and assigns it to the UserInfo field.
func (o *ResourceAttribute) SetUserInfo(v bool) {
	o.UserInfo = &v
}

func (o ResourceAttribute) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["value"] = o.Value
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.IdToken) {
		toSerialize["idToken"] = o.IdToken
	}
	if !IsNil(o.UserInfo) {
		toSerialize["userInfo"] = o.UserInfo
	}
	return toSerialize, nil
}

type NullableResourceAttribute struct {
	value *ResourceAttribute
	isSet bool
}

func (v NullableResourceAttribute) Get() *ResourceAttribute {
	return v.value
}

func (v *NullableResourceAttribute) Set(val *ResourceAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceAttribute(val *ResourceAttribute) *NullableResourceAttribute {
	return &NullableResourceAttribute{value: val, isSet: true}
}

func (v NullableResourceAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
