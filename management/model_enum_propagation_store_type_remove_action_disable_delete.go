/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumPropagationStoreTypeRemoveActionDisableDelete The action to take when deprovisioning (removing) a user. Options are either `Disable` or `Delete`.
type EnumPropagationStoreTypeRemoveActionDisableDelete string

// List of EnumPropagationStoreTypeRemoveActionDisableDelete
const (
	ENUMPROPAGATIONSTORETYPEREMOVEACTIONDISABLEDELETE_DISABLE EnumPropagationStoreTypeRemoveActionDisableDelete = "Disable"
	ENUMPROPAGATIONSTORETYPEREMOVEACTIONDISABLEDELETE_DELETE  EnumPropagationStoreTypeRemoveActionDisableDelete = "Delete"
)

// All allowed values of EnumPropagationStoreTypeRemoveActionDisableDelete enum
var AllowedEnumPropagationStoreTypeRemoveActionDisableDeleteEnumValues = []EnumPropagationStoreTypeRemoveActionDisableDelete{
	"Disable",
	"Delete",
}

func (v *EnumPropagationStoreTypeRemoveActionDisableDelete) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumPropagationStoreTypeRemoveActionDisableDelete(value)
	for _, existing := range AllowedEnumPropagationStoreTypeRemoveActionDisableDeleteEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumPropagationStoreTypeRemoveActionDisableDelete(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumPropagationStoreTypeRemoveActionDisableDeleteFromValue returns a pointer to a valid EnumPropagationStoreTypeRemoveActionDisableDelete
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumPropagationStoreTypeRemoveActionDisableDeleteFromValue(v string) (*EnumPropagationStoreTypeRemoveActionDisableDelete, error) {
	ev := EnumPropagationStoreTypeRemoveActionDisableDelete(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumPropagationStoreTypeRemoveActionDisableDelete: valid values are %v", v, AllowedEnumPropagationStoreTypeRemoveActionDisableDeleteEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumPropagationStoreTypeRemoveActionDisableDelete) IsValid() bool {
	for _, existing := range AllowedEnumPropagationStoreTypeRemoveActionDisableDeleteEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumPropagationStoreTypeRemoveActionDisableDelete value
func (v EnumPropagationStoreTypeRemoveActionDisableDelete) Ptr() *EnumPropagationStoreTypeRemoveActionDisableDelete {
	return &v
}

type NullableEnumPropagationStoreTypeRemoveActionDisableDelete struct {
	value *EnumPropagationStoreTypeRemoveActionDisableDelete
	isSet bool
}

func (v NullableEnumPropagationStoreTypeRemoveActionDisableDelete) Get() *EnumPropagationStoreTypeRemoveActionDisableDelete {
	return v.value
}

func (v *NullableEnumPropagationStoreTypeRemoveActionDisableDelete) Set(val *EnumPropagationStoreTypeRemoveActionDisableDelete) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumPropagationStoreTypeRemoveActionDisableDelete) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumPropagationStoreTypeRemoveActionDisableDelete) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumPropagationStoreTypeRemoveActionDisableDelete(val *EnumPropagationStoreTypeRemoveActionDisableDelete) *NullableEnumPropagationStoreTypeRemoveActionDisableDelete {
	return &NullableEnumPropagationStoreTypeRemoveActionDisableDelete{value: val, isSet: true}
}

func (v NullableEnumPropagationStoreTypeRemoveActionDisableDelete) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumPropagationStoreTypeRemoveActionDisableDelete) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
