/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumRegionCodeLicense the model 'EnumRegionCodeLicense'
type EnumRegionCodeLicense string

// List of EnumRegionCodeLicense
const (
	ENUMREGIONCODELICENSE_AP            EnumRegionCodeLicense = "AP"
	ENUMREGIONCODELICENSE_CA            EnumRegionCodeLicense = "CA"
	ENUMREGIONCODELICENSE_EU            EnumRegionCodeLicense = "EU"
	ENUMREGIONCODELICENSE_NORTH_AMERICA EnumRegionCodeLicense = "NORTH_AMERICA"
)

// All allowed values of EnumRegionCodeLicense enum
var AllowedEnumRegionCodeLicenseEnumValues = []EnumRegionCodeLicense{
	"AP",
	"CA",
	"EU",
	"NORTH_AMERICA",
}

func (v *EnumRegionCodeLicense) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumRegionCodeLicense(value)
	for _, existing := range AllowedEnumRegionCodeLicenseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumRegionCodeLicense(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumRegionCodeLicenseFromValue returns a pointer to a valid EnumRegionCodeLicense
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumRegionCodeLicenseFromValue(v string) (*EnumRegionCodeLicense, error) {
	ev := EnumRegionCodeLicense(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumRegionCodeLicense: valid values are %v", v, AllowedEnumRegionCodeLicenseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumRegionCodeLicense) IsValid() bool {
	for _, existing := range AllowedEnumRegionCodeLicenseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumRegionCodeLicense value
func (v EnumRegionCodeLicense) Ptr() *EnumRegionCodeLicense {
	return &v
}

type NullableEnumRegionCodeLicense struct {
	value *EnumRegionCodeLicense
	isSet bool
}

func (v NullableEnumRegionCodeLicense) Get() *EnumRegionCodeLicense {
	return v.value
}

func (v *NullableEnumRegionCodeLicense) Set(val *EnumRegionCodeLicense) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumRegionCodeLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumRegionCodeLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumRegionCodeLicense(val *EnumRegionCodeLicense) *NullableEnumRegionCodeLicense {
	return &NullableEnumRegionCodeLicense{value: val, isSet: true}
}

func (v NullableEnumRegionCodeLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumRegionCodeLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
