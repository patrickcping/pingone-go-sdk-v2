/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumPropagationStoreTypeSlackUniqueUserIdentifier The unique user identifier, must be either `primaryEmail` or `userName`.
type EnumPropagationStoreTypeSlackUniqueUserIdentifier string

// List of EnumPropagationStoreTypeSlackUniqueUserIdentifier
const (
	ENUMPROPAGATIONSTORETYPESLACKUNIQUEUSERIDENTIFIER_PRIMARY_EMAIL EnumPropagationStoreTypeSlackUniqueUserIdentifier = "primaryEmail"
	ENUMPROPAGATIONSTORETYPESLACKUNIQUEUSERIDENTIFIER_USER_NAME     EnumPropagationStoreTypeSlackUniqueUserIdentifier = "userName"
)

// All allowed values of EnumPropagationStoreTypeSlackUniqueUserIdentifier enum
var AllowedEnumPropagationStoreTypeSlackUniqueUserIdentifierEnumValues = []EnumPropagationStoreTypeSlackUniqueUserIdentifier{
	"primaryEmail",
	"userName",
}

func (v *EnumPropagationStoreTypeSlackUniqueUserIdentifier) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumPropagationStoreTypeSlackUniqueUserIdentifier(value)
	for _, existing := range AllowedEnumPropagationStoreTypeSlackUniqueUserIdentifierEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumPropagationStoreTypeSlackUniqueUserIdentifier(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumPropagationStoreTypeSlackUniqueUserIdentifierFromValue returns a pointer to a valid EnumPropagationStoreTypeSlackUniqueUserIdentifier
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumPropagationStoreTypeSlackUniqueUserIdentifierFromValue(v string) (*EnumPropagationStoreTypeSlackUniqueUserIdentifier, error) {
	ev := EnumPropagationStoreTypeSlackUniqueUserIdentifier(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumPropagationStoreTypeSlackUniqueUserIdentifier: valid values are %v", v, AllowedEnumPropagationStoreTypeSlackUniqueUserIdentifierEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumPropagationStoreTypeSlackUniqueUserIdentifier) IsValid() bool {
	for _, existing := range AllowedEnumPropagationStoreTypeSlackUniqueUserIdentifierEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumPropagationStoreTypeSlackUniqueUserIdentifier value
func (v EnumPropagationStoreTypeSlackUniqueUserIdentifier) Ptr() *EnumPropagationStoreTypeSlackUniqueUserIdentifier {
	return &v
}

type NullableEnumPropagationStoreTypeSlackUniqueUserIdentifier struct {
	value *EnumPropagationStoreTypeSlackUniqueUserIdentifier
	isSet bool
}

func (v NullableEnumPropagationStoreTypeSlackUniqueUserIdentifier) Get() *EnumPropagationStoreTypeSlackUniqueUserIdentifier {
	return v.value
}

func (v *NullableEnumPropagationStoreTypeSlackUniqueUserIdentifier) Set(val *EnumPropagationStoreTypeSlackUniqueUserIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumPropagationStoreTypeSlackUniqueUserIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumPropagationStoreTypeSlackUniqueUserIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumPropagationStoreTypeSlackUniqueUserIdentifier(val *EnumPropagationStoreTypeSlackUniqueUserIdentifier) *NullableEnumPropagationStoreTypeSlackUniqueUserIdentifier {
	return &NullableEnumPropagationStoreTypeSlackUniqueUserIdentifier{value: val, isSet: true}
}

func (v NullableEnumPropagationStoreTypeSlackUniqueUserIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumPropagationStoreTypeSlackUniqueUserIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
