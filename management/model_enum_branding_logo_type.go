/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumBrandingLogoType The type of format used for the image. Options are IMAGE and NONE.
type EnumBrandingLogoType string

// List of EnumBrandingLogoType
const (
	ENUMBRANDINGLOGOTYPE_IMAGE EnumBrandingLogoType = "IMAGE"
	ENUMBRANDINGLOGOTYPE_NONE  EnumBrandingLogoType = "NONE"
)

// All allowed values of EnumBrandingLogoType enum
var AllowedEnumBrandingLogoTypeEnumValues = []EnumBrandingLogoType{
	"IMAGE",
	"NONE",
}

func (v *EnumBrandingLogoType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumBrandingLogoType(value)
	for _, existing := range AllowedEnumBrandingLogoTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumBrandingLogoType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumBrandingLogoTypeFromValue returns a pointer to a valid EnumBrandingLogoType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumBrandingLogoTypeFromValue(v string) (*EnumBrandingLogoType, error) {
	ev := EnumBrandingLogoType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumBrandingLogoType: valid values are %v", v, AllowedEnumBrandingLogoTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumBrandingLogoType) IsValid() bool {
	for _, existing := range AllowedEnumBrandingLogoTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumBrandingLogoType value
func (v EnumBrandingLogoType) Ptr() *EnumBrandingLogoType {
	return &v
}

type NullableEnumBrandingLogoType struct {
	value *EnumBrandingLogoType
	isSet bool
}

func (v NullableEnumBrandingLogoType) Get() *EnumBrandingLogoType {
	return v.value
}

func (v *NullableEnumBrandingLogoType) Set(val *EnumBrandingLogoType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumBrandingLogoType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumBrandingLogoType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumBrandingLogoType(val *EnumBrandingLogoType) *NullableEnumBrandingLogoType {
	return &NullableEnumBrandingLogoType{value: val, isSet: true}
}

func (v NullableEnumBrandingLogoType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumBrandingLogoType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
