/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumCertificateKeySignagureAlgorithm Specifies the signature algorithm of the key. For RSA keys, options are `SHA256withRSA`, `SHA384withRSA` and `SHA512withRSA`. For elliptical curve (EC) keys, options are `SHA256withECDSA`, `SHA384withECDSA`, and `SHA512withECDSA`
type EnumCertificateKeySignagureAlgorithm string

// List of EnumCertificateKeySignagureAlgorithm
const (
	ENUMCERTIFICATEKEYSIGNAGUREALGORITHM_SHA256WITH_RSA   EnumCertificateKeySignagureAlgorithm = "SHA256withRSA"
	ENUMCERTIFICATEKEYSIGNAGUREALGORITHM_SHA384WITH_RSA   EnumCertificateKeySignagureAlgorithm = "SHA384withRSA"
	ENUMCERTIFICATEKEYSIGNAGUREALGORITHM_SHA512WITH_RSA   EnumCertificateKeySignagureAlgorithm = "SHA512withRSA"
	ENUMCERTIFICATEKEYSIGNAGUREALGORITHM_SHA256WITH_ECDSA EnumCertificateKeySignagureAlgorithm = "SHA256withECDSA"
	ENUMCERTIFICATEKEYSIGNAGUREALGORITHM_SHA384WITH_ECDSA EnumCertificateKeySignagureAlgorithm = "SHA384withECDSA"
	ENUMCERTIFICATEKEYSIGNAGUREALGORITHM_SHA512WITH_ECDSA EnumCertificateKeySignagureAlgorithm = "SHA512withECDSA"
)

// All allowed values of EnumCertificateKeySignagureAlgorithm enum
var AllowedEnumCertificateKeySignagureAlgorithmEnumValues = []EnumCertificateKeySignagureAlgorithm{
	"SHA256withRSA",
	"SHA384withRSA",
	"SHA512withRSA",
	"SHA256withECDSA",
	"SHA384withECDSA",
	"SHA512withECDSA",
}

func (v *EnumCertificateKeySignagureAlgorithm) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumCertificateKeySignagureAlgorithm(value)
	for _, existing := range AllowedEnumCertificateKeySignagureAlgorithmEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumCertificateKeySignagureAlgorithm(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumCertificateKeySignagureAlgorithmFromValue returns a pointer to a valid EnumCertificateKeySignagureAlgorithm
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumCertificateKeySignagureAlgorithmFromValue(v string) (*EnumCertificateKeySignagureAlgorithm, error) {
	ev := EnumCertificateKeySignagureAlgorithm(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumCertificateKeySignagureAlgorithm: valid values are %v", v, AllowedEnumCertificateKeySignagureAlgorithmEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumCertificateKeySignagureAlgorithm) IsValid() bool {
	for _, existing := range AllowedEnumCertificateKeySignagureAlgorithmEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumCertificateKeySignagureAlgorithm value
func (v EnumCertificateKeySignagureAlgorithm) Ptr() *EnumCertificateKeySignagureAlgorithm {
	return &v
}

type NullableEnumCertificateKeySignagureAlgorithm struct {
	value *EnumCertificateKeySignagureAlgorithm
	isSet bool
}

func (v NullableEnumCertificateKeySignagureAlgorithm) Get() *EnumCertificateKeySignagureAlgorithm {
	return v.value
}

func (v *NullableEnumCertificateKeySignagureAlgorithm) Set(val *EnumCertificateKeySignagureAlgorithm) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumCertificateKeySignagureAlgorithm) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumCertificateKeySignagureAlgorithm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumCertificateKeySignagureAlgorithm(val *EnumCertificateKeySignagureAlgorithm) *NullableEnumCertificateKeySignagureAlgorithm {
	return &NullableEnumCertificateKeySignagureAlgorithm{value: val, isSet: true}
}

func (v NullableEnumCertificateKeySignagureAlgorithm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumCertificateKeySignagureAlgorithm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
