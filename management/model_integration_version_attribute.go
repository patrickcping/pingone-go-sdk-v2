/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the IntegrationVersionAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationVersionAttribute{}

// IntegrationVersionAttribute struct for IntegrationVersionAttribute
type IntegrationVersionAttribute struct {
	// Auto-generated ID of this attribute.
	Id          *string                                 `json:"id,omitempty"`
	Integration *IntegrationVersionAttributeIntegration `json:"integration,omitempty"`
	// Attribute name the application expects. Unique within the integration version and in the form `urn:oasis:names:tc:SAML:2.0:attrname-format:uri`.
	Name *string `json:"name,omitempty"`
	// Whether or not the attribute is required. If true, the value property must be set with a non-empty value. Default is false.
	Required *bool `json:"required,omitempty"`
	// A JSON schema describing the current attribute mapping.
	Schema  string                              `json:"schema"`
	Version *IntegrationVersionAttributeVersion `json:"version,omitempty"`
}

// NewIntegrationVersionAttribute instantiates a new IntegrationVersionAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationVersionAttribute(schema string) *IntegrationVersionAttribute {
	this := IntegrationVersionAttribute{}
	this.Schema = schema
	return &this
}

// NewIntegrationVersionAttributeWithDefaults instantiates a new IntegrationVersionAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationVersionAttributeWithDefaults() *IntegrationVersionAttribute {
	this := IntegrationVersionAttribute{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IntegrationVersionAttribute) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationVersionAttribute) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IntegrationVersionAttribute) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IntegrationVersionAttribute) SetId(v string) {
	o.Id = &v
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *IntegrationVersionAttribute) GetIntegration() IntegrationVersionAttributeIntegration {
	if o == nil || IsNil(o.Integration) {
		var ret IntegrationVersionAttributeIntegration
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationVersionAttribute) GetIntegrationOk() (*IntegrationVersionAttributeIntegration, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *IntegrationVersionAttribute) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given IntegrationVersionAttributeIntegration and assigns it to the Integration field.
func (o *IntegrationVersionAttribute) SetIntegration(v IntegrationVersionAttributeIntegration) {
	o.Integration = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IntegrationVersionAttribute) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationVersionAttribute) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IntegrationVersionAttribute) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IntegrationVersionAttribute) SetName(v string) {
	o.Name = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *IntegrationVersionAttribute) GetRequired() bool {
	if o == nil || IsNil(o.Required) {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationVersionAttribute) GetRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *IntegrationVersionAttribute) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *IntegrationVersionAttribute) SetRequired(v bool) {
	o.Required = &v
}

// GetSchema returns the Schema field value
func (o *IntegrationVersionAttribute) GetSchema() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value
// and a boolean to check if the value has been set.
func (o *IntegrationVersionAttribute) GetSchemaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Schema, true
}

// SetSchema sets field value
func (o *IntegrationVersionAttribute) SetSchema(v string) {
	o.Schema = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *IntegrationVersionAttribute) GetVersion() IntegrationVersionAttributeVersion {
	if o == nil || IsNil(o.Version) {
		var ret IntegrationVersionAttributeVersion
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationVersionAttribute) GetVersionOk() (*IntegrationVersionAttributeVersion, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *IntegrationVersionAttribute) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given IntegrationVersionAttributeVersion and assigns it to the Version field.
func (o *IntegrationVersionAttribute) SetVersion(v IntegrationVersionAttributeVersion) {
	o.Version = &v
}

func (o IntegrationVersionAttribute) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationVersionAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	toSerialize["schema"] = o.Schema
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableIntegrationVersionAttribute struct {
	value *IntegrationVersionAttribute
	isSet bool
}

func (v NullableIntegrationVersionAttribute) Get() *IntegrationVersionAttribute {
	return v.value
}

func (v *NullableIntegrationVersionAttribute) Set(val *IntegrationVersionAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationVersionAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationVersionAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationVersionAttribute(val *IntegrationVersionAttribute) *NullableIntegrationVersionAttribute {
	return &NullableIntegrationVersionAttribute{value: val, isSet: true}
}

func (v NullableIntegrationVersionAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationVersionAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
