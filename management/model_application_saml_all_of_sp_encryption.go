/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the ApplicationSAMLAllOfSpEncryption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationSAMLAllOfSpEncryption{}

// ApplicationSAMLAllOfSpEncryption Enables PingOne to encrypt SAML assertions to be sent to the application. Assertions are not encrypted by default.
type ApplicationSAMLAllOfSpEncryption struct {
	Algorithm   EnumCertificateKeyEncryptionAlgorithm       `json:"algorithm"`
	Certificate ApplicationSAMLAllOfSpEncryptionCertificate `json:"certificate"`
}

// NewApplicationSAMLAllOfSpEncryption instantiates a new ApplicationSAMLAllOfSpEncryption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationSAMLAllOfSpEncryption(algorithm EnumCertificateKeyEncryptionAlgorithm, certificate ApplicationSAMLAllOfSpEncryptionCertificate) *ApplicationSAMLAllOfSpEncryption {
	this := ApplicationSAMLAllOfSpEncryption{}
	this.Algorithm = algorithm
	this.Certificate = certificate
	return &this
}

// NewApplicationSAMLAllOfSpEncryptionWithDefaults instantiates a new ApplicationSAMLAllOfSpEncryption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationSAMLAllOfSpEncryptionWithDefaults() *ApplicationSAMLAllOfSpEncryption {
	this := ApplicationSAMLAllOfSpEncryption{}
	return &this
}

// GetAlgorithm returns the Algorithm field value
func (o *ApplicationSAMLAllOfSpEncryption) GetAlgorithm() EnumCertificateKeyEncryptionAlgorithm {
	if o == nil {
		var ret EnumCertificateKeyEncryptionAlgorithm
		return ret
	}

	return o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value
// and a boolean to check if the value has been set.
func (o *ApplicationSAMLAllOfSpEncryption) GetAlgorithmOk() (*EnumCertificateKeyEncryptionAlgorithm, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Algorithm, true
}

// SetAlgorithm sets field value
func (o *ApplicationSAMLAllOfSpEncryption) SetAlgorithm(v EnumCertificateKeyEncryptionAlgorithm) {
	o.Algorithm = v
}

// GetCertificate returns the Certificate field value
func (o *ApplicationSAMLAllOfSpEncryption) GetCertificate() ApplicationSAMLAllOfSpEncryptionCertificate {
	if o == nil {
		var ret ApplicationSAMLAllOfSpEncryptionCertificate
		return ret
	}

	return o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value
// and a boolean to check if the value has been set.
func (o *ApplicationSAMLAllOfSpEncryption) GetCertificateOk() (*ApplicationSAMLAllOfSpEncryptionCertificate, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Certificate, true
}

// SetCertificate sets field value
func (o *ApplicationSAMLAllOfSpEncryption) SetCertificate(v ApplicationSAMLAllOfSpEncryptionCertificate) {
	o.Certificate = v
}

func (o ApplicationSAMLAllOfSpEncryption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationSAMLAllOfSpEncryption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["algorithm"] = o.Algorithm
	toSerialize["certificate"] = o.Certificate
	return toSerialize, nil
}

type NullableApplicationSAMLAllOfSpEncryption struct {
	value *ApplicationSAMLAllOfSpEncryption
	isSet bool
}

func (v NullableApplicationSAMLAllOfSpEncryption) Get() *ApplicationSAMLAllOfSpEncryption {
	return v.value
}

func (v *NullableApplicationSAMLAllOfSpEncryption) Set(val *ApplicationSAMLAllOfSpEncryption) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationSAMLAllOfSpEncryption) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationSAMLAllOfSpEncryption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationSAMLAllOfSpEncryption(val *ApplicationSAMLAllOfSpEncryption) *NullableApplicationSAMLAllOfSpEncryption {
	return &NullableApplicationSAMLAllOfSpEncryption{value: val, isSet: true}
}

func (v NullableApplicationSAMLAllOfSpEncryption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationSAMLAllOfSpEncryption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
