/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumApplicationOIDCPARRequirement Whether pushed authorization requests (PAR) are required. Options are `REQUIRED` and `OPTIONAL`. The default value is `OPTIONAL`.
type EnumApplicationOIDCPARRequirement string

// List of EnumApplicationOIDCPARRequirement
const (
	ENUMAPPLICATIONOIDCPARREQUIREMENT_REQUIRED EnumApplicationOIDCPARRequirement = "REQUIRED"
	ENUMAPPLICATIONOIDCPARREQUIREMENT_OPTIONAL EnumApplicationOIDCPARRequirement = "OPTIONAL"
)

// All allowed values of EnumApplicationOIDCPARRequirement enum
var AllowedEnumApplicationOIDCPARRequirementEnumValues = []EnumApplicationOIDCPARRequirement{
	"REQUIRED",
	"OPTIONAL",
}

func (v *EnumApplicationOIDCPARRequirement) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumApplicationOIDCPARRequirement(value)
	for _, existing := range AllowedEnumApplicationOIDCPARRequirementEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumApplicationOIDCPARRequirement(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumApplicationOIDCPARRequirementFromValue returns a pointer to a valid EnumApplicationOIDCPARRequirement
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumApplicationOIDCPARRequirementFromValue(v string) (*EnumApplicationOIDCPARRequirement, error) {
	ev := EnumApplicationOIDCPARRequirement(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumApplicationOIDCPARRequirement: valid values are %v", v, AllowedEnumApplicationOIDCPARRequirementEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumApplicationOIDCPARRequirement) IsValid() bool {
	for _, existing := range AllowedEnumApplicationOIDCPARRequirementEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumApplicationOIDCPARRequirement value
func (v EnumApplicationOIDCPARRequirement) Ptr() *EnumApplicationOIDCPARRequirement {
	return &v
}

type NullableEnumApplicationOIDCPARRequirement struct {
	value *EnumApplicationOIDCPARRequirement
	isSet bool
}

func (v NullableEnumApplicationOIDCPARRequirement) Get() *EnumApplicationOIDCPARRequirement {
	return v.value
}

func (v *NullableEnumApplicationOIDCPARRequirement) Set(val *EnumApplicationOIDCPARRequirement) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumApplicationOIDCPARRequirement) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumApplicationOIDCPARRequirement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumApplicationOIDCPARRequirement(val *EnumApplicationOIDCPARRequirement) *NullableEnumApplicationOIDCPARRequirement {
	return &NullableEnumApplicationOIDCPARRequirement{value: val, isSet: true}
}

func (v NullableEnumApplicationOIDCPARRequirement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumApplicationOIDCPARRequirement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
