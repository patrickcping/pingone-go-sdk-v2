/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the IntegrationVersionSAML type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationVersionSAML{}

// IntegrationVersionSAML struct for IntegrationVersionSAML
type IntegrationVersionSAML struct {
	Configuration *IntegrationVersionCommonConfiguration `json:"configuration,omitempty"`
	// Unicode characters. The description of this integration metadata version.
	Description *string `json:"description,omitempty"`
	// The platform-generated ID of this integration metadata version.
	Id          *string                              `json:"id,omitempty"`
	Integration *IntegrationVersionCommonIntegration `json:"integration,omitempty"`
	// A unique name for the integration metadata version.
	Name string `json:"name"`
	// A unique number for the integration version.
	Number string                      `json:"number"`
	Type   *EnumIntegrationVersionType `json:"type,omitempty"`
	// The URL to which PingOne sends SAML responses. Parameterize the URL using `${_paremter_}`. For example, `https://${subdomain}.slack.com`. The maximum length is 2000 characters.
	AssertionConsumerService string `json:"assertionConsumerService"`
	// The state of assertion encryption. `true` if encrypted.
	AssertionEncrypted *bool `json:"assertionEncrypted,omitempty"`
	// After an IdP-initiated SSO, this URL is passed in the RelayState value in the SAML response. Informs the IdP where to send its response. Parameterize the URL using `${_paremter_}`. For example, `https://${subdomain}.slack.com`.
	DefaultTarget *string `json:"defaultTarget,omitempty"`
	// Unique ID for the application.
	EntityId *string `json:"entityId,omitempty"`
	// This can be one of the following: urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress urn:oasis:names:tc:SAML:2.0:nameid-format:persistent urn:oasis:names:tc:SAML:2.0:nameid-format:transient
	NameIdFormat    *string                                   `json:"nameIdFormat,omitempty"`
	ProtocolVersion EnumIntegrationVersionSAMLProtocolVersion `json:"protocolVersion"`
	Slo             *IntegrationVersionSAMLAllOfSlo           `json:"slo,omitempty"`
	ThirdParty      *IntegrationVersionSAMLAllOfThirdParty    `json:"thirdParty,omitempty"`
}

// NewIntegrationVersionSAML instantiates a new IntegrationVersionSAML object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationVersionSAML(name string, number string, assertionConsumerService string, protocolVersion EnumIntegrationVersionSAMLProtocolVersion) *IntegrationVersionSAML {
	this := IntegrationVersionSAML{}
	this.Name = name
	this.Number = number
	this.AssertionConsumerService = assertionConsumerService
	this.ProtocolVersion = protocolVersion
	return &this
}

// NewIntegrationVersionSAMLWithDefaults instantiates a new IntegrationVersionSAML object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationVersionSAMLWithDefaults() *IntegrationVersionSAML {
	this := IntegrationVersionSAML{}
	return &this
}

// GetConfiguration returns the Configuration field value if set, zero value otherwise.
func (o *IntegrationVersionSAML) GetConfiguration() IntegrationVersionCommonConfiguration {
	if o == nil || IsNil(o.Configuration) {
		var ret IntegrationVersionCommonConfiguration
		return ret
	}
	return *o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationVersionSAML) GetConfigurationOk() (*IntegrationVersionCommonConfiguration, bool) {
	if o == nil || IsNil(o.Configuration) {
		return nil, false
	}
	return o.Configuration, true
}

// HasConfiguration returns a boolean if a field has been set.
func (o *IntegrationVersionSAML) HasConfiguration() bool {
	if o != nil && !IsNil(o.Configuration) {
		return true
	}

	return false
}

// SetConfiguration gets a reference to the given IntegrationVersionCommonConfiguration and assigns it to the Configuration field.
func (o *IntegrationVersionSAML) SetConfiguration(v IntegrationVersionCommonConfiguration) {
	o.Configuration = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *IntegrationVersionSAML) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationVersionSAML) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *IntegrationVersionSAML) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *IntegrationVersionSAML) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IntegrationVersionSAML) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationVersionSAML) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IntegrationVersionSAML) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IntegrationVersionSAML) SetId(v string) {
	o.Id = &v
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *IntegrationVersionSAML) GetIntegration() IntegrationVersionCommonIntegration {
	if o == nil || IsNil(o.Integration) {
		var ret IntegrationVersionCommonIntegration
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationVersionSAML) GetIntegrationOk() (*IntegrationVersionCommonIntegration, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *IntegrationVersionSAML) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given IntegrationVersionCommonIntegration and assigns it to the Integration field.
func (o *IntegrationVersionSAML) SetIntegration(v IntegrationVersionCommonIntegration) {
	o.Integration = &v
}

// GetName returns the Name field value
func (o *IntegrationVersionSAML) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IntegrationVersionSAML) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IntegrationVersionSAML) SetName(v string) {
	o.Name = v
}

// GetNumber returns the Number field value
func (o *IntegrationVersionSAML) GetNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Number
}

// GetNumberOk returns a tuple with the Number field value
// and a boolean to check if the value has been set.
func (o *IntegrationVersionSAML) GetNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Number, true
}

// SetNumber sets field value
func (o *IntegrationVersionSAML) SetNumber(v string) {
	o.Number = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *IntegrationVersionSAML) GetType() EnumIntegrationVersionType {
	if o == nil || IsNil(o.Type) {
		var ret EnumIntegrationVersionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationVersionSAML) GetTypeOk() (*EnumIntegrationVersionType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *IntegrationVersionSAML) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given EnumIntegrationVersionType and assigns it to the Type field.
func (o *IntegrationVersionSAML) SetType(v EnumIntegrationVersionType) {
	o.Type = &v
}

// GetAssertionConsumerService returns the AssertionConsumerService field value
func (o *IntegrationVersionSAML) GetAssertionConsumerService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AssertionConsumerService
}

// GetAssertionConsumerServiceOk returns a tuple with the AssertionConsumerService field value
// and a boolean to check if the value has been set.
func (o *IntegrationVersionSAML) GetAssertionConsumerServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AssertionConsumerService, true
}

// SetAssertionConsumerService sets field value
func (o *IntegrationVersionSAML) SetAssertionConsumerService(v string) {
	o.AssertionConsumerService = v
}

// GetAssertionEncrypted returns the AssertionEncrypted field value if set, zero value otherwise.
func (o *IntegrationVersionSAML) GetAssertionEncrypted() bool {
	if o == nil || IsNil(o.AssertionEncrypted) {
		var ret bool
		return ret
	}
	return *o.AssertionEncrypted
}

// GetAssertionEncryptedOk returns a tuple with the AssertionEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationVersionSAML) GetAssertionEncryptedOk() (*bool, bool) {
	if o == nil || IsNil(o.AssertionEncrypted) {
		return nil, false
	}
	return o.AssertionEncrypted, true
}

// HasAssertionEncrypted returns a boolean if a field has been set.
func (o *IntegrationVersionSAML) HasAssertionEncrypted() bool {
	if o != nil && !IsNil(o.AssertionEncrypted) {
		return true
	}

	return false
}

// SetAssertionEncrypted gets a reference to the given bool and assigns it to the AssertionEncrypted field.
func (o *IntegrationVersionSAML) SetAssertionEncrypted(v bool) {
	o.AssertionEncrypted = &v
}

// GetDefaultTarget returns the DefaultTarget field value if set, zero value otherwise.
func (o *IntegrationVersionSAML) GetDefaultTarget() string {
	if o == nil || IsNil(o.DefaultTarget) {
		var ret string
		return ret
	}
	return *o.DefaultTarget
}

// GetDefaultTargetOk returns a tuple with the DefaultTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationVersionSAML) GetDefaultTargetOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultTarget) {
		return nil, false
	}
	return o.DefaultTarget, true
}

// HasDefaultTarget returns a boolean if a field has been set.
func (o *IntegrationVersionSAML) HasDefaultTarget() bool {
	if o != nil && !IsNil(o.DefaultTarget) {
		return true
	}

	return false
}

// SetDefaultTarget gets a reference to the given string and assigns it to the DefaultTarget field.
func (o *IntegrationVersionSAML) SetDefaultTarget(v string) {
	o.DefaultTarget = &v
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *IntegrationVersionSAML) GetEntityId() string {
	if o == nil || IsNil(o.EntityId) {
		var ret string
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationVersionSAML) GetEntityIdOk() (*string, bool) {
	if o == nil || IsNil(o.EntityId) {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *IntegrationVersionSAML) HasEntityId() bool {
	if o != nil && !IsNil(o.EntityId) {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given string and assigns it to the EntityId field.
func (o *IntegrationVersionSAML) SetEntityId(v string) {
	o.EntityId = &v
}

// GetNameIdFormat returns the NameIdFormat field value if set, zero value otherwise.
func (o *IntegrationVersionSAML) GetNameIdFormat() string {
	if o == nil || IsNil(o.NameIdFormat) {
		var ret string
		return ret
	}
	return *o.NameIdFormat
}

// GetNameIdFormatOk returns a tuple with the NameIdFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationVersionSAML) GetNameIdFormatOk() (*string, bool) {
	if o == nil || IsNil(o.NameIdFormat) {
		return nil, false
	}
	return o.NameIdFormat, true
}

// HasNameIdFormat returns a boolean if a field has been set.
func (o *IntegrationVersionSAML) HasNameIdFormat() bool {
	if o != nil && !IsNil(o.NameIdFormat) {
		return true
	}

	return false
}

// SetNameIdFormat gets a reference to the given string and assigns it to the NameIdFormat field.
func (o *IntegrationVersionSAML) SetNameIdFormat(v string) {
	o.NameIdFormat = &v
}

// GetProtocolVersion returns the ProtocolVersion field value
func (o *IntegrationVersionSAML) GetProtocolVersion() EnumIntegrationVersionSAMLProtocolVersion {
	if o == nil {
		var ret EnumIntegrationVersionSAMLProtocolVersion
		return ret
	}

	return o.ProtocolVersion
}

// GetProtocolVersionOk returns a tuple with the ProtocolVersion field value
// and a boolean to check if the value has been set.
func (o *IntegrationVersionSAML) GetProtocolVersionOk() (*EnumIntegrationVersionSAMLProtocolVersion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProtocolVersion, true
}

// SetProtocolVersion sets field value
func (o *IntegrationVersionSAML) SetProtocolVersion(v EnumIntegrationVersionSAMLProtocolVersion) {
	o.ProtocolVersion = v
}

// GetSlo returns the Slo field value if set, zero value otherwise.
func (o *IntegrationVersionSAML) GetSlo() IntegrationVersionSAMLAllOfSlo {
	if o == nil || IsNil(o.Slo) {
		var ret IntegrationVersionSAMLAllOfSlo
		return ret
	}
	return *o.Slo
}

// GetSloOk returns a tuple with the Slo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationVersionSAML) GetSloOk() (*IntegrationVersionSAMLAllOfSlo, bool) {
	if o == nil || IsNil(o.Slo) {
		return nil, false
	}
	return o.Slo, true
}

// HasSlo returns a boolean if a field has been set.
func (o *IntegrationVersionSAML) HasSlo() bool {
	if o != nil && !IsNil(o.Slo) {
		return true
	}

	return false
}

// SetSlo gets a reference to the given IntegrationVersionSAMLAllOfSlo and assigns it to the Slo field.
func (o *IntegrationVersionSAML) SetSlo(v IntegrationVersionSAMLAllOfSlo) {
	o.Slo = &v
}

// GetThirdParty returns the ThirdParty field value if set, zero value otherwise.
func (o *IntegrationVersionSAML) GetThirdParty() IntegrationVersionSAMLAllOfThirdParty {
	if o == nil || IsNil(o.ThirdParty) {
		var ret IntegrationVersionSAMLAllOfThirdParty
		return ret
	}
	return *o.ThirdParty
}

// GetThirdPartyOk returns a tuple with the ThirdParty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationVersionSAML) GetThirdPartyOk() (*IntegrationVersionSAMLAllOfThirdParty, bool) {
	if o == nil || IsNil(o.ThirdParty) {
		return nil, false
	}
	return o.ThirdParty, true
}

// HasThirdParty returns a boolean if a field has been set.
func (o *IntegrationVersionSAML) HasThirdParty() bool {
	if o != nil && !IsNil(o.ThirdParty) {
		return true
	}

	return false
}

// SetThirdParty gets a reference to the given IntegrationVersionSAMLAllOfThirdParty and assigns it to the ThirdParty field.
func (o *IntegrationVersionSAML) SetThirdParty(v IntegrationVersionSAMLAllOfThirdParty) {
	o.ThirdParty = &v
}

func (o IntegrationVersionSAML) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationVersionSAML) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Configuration) {
		toSerialize["configuration"] = o.Configuration
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	toSerialize["name"] = o.Name
	toSerialize["number"] = o.Number
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["assertionConsumerService"] = o.AssertionConsumerService
	if !IsNil(o.AssertionEncrypted) {
		toSerialize["assertionEncrypted"] = o.AssertionEncrypted
	}
	if !IsNil(o.DefaultTarget) {
		toSerialize["defaultTarget"] = o.DefaultTarget
	}
	if !IsNil(o.EntityId) {
		toSerialize["entityId"] = o.EntityId
	}
	if !IsNil(o.NameIdFormat) {
		toSerialize["nameIdFormat"] = o.NameIdFormat
	}
	toSerialize["protocolVersion"] = o.ProtocolVersion
	if !IsNil(o.Slo) {
		toSerialize["slo"] = o.Slo
	}
	if !IsNil(o.ThirdParty) {
		toSerialize["thirdParty"] = o.ThirdParty
	}
	return toSerialize, nil
}

type NullableIntegrationVersionSAML struct {
	value *IntegrationVersionSAML
	isSet bool
}

func (v NullableIntegrationVersionSAML) Get() *IntegrationVersionSAML {
	return v.value
}

func (v *NullableIntegrationVersionSAML) Set(val *IntegrationVersionSAML) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationVersionSAML) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationVersionSAML) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationVersionSAML(val *IntegrationVersionSAML) *NullableIntegrationVersionSAML {
	return &NullableIntegrationVersionSAML{value: val, isSet: true}
}

func (v NullableIntegrationVersionSAML) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationVersionSAML) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
