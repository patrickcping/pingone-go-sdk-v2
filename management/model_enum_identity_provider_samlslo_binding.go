/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumIdentityProviderSAMLSLOBinding The binding protocol to be used for the logout response. Options are `HTTP_REDIRECT` or `HTTP_POST`. The default is `HTTP_POST`; existing configurations with no data default to `HTTP_POST`. This is an optional property.
type EnumIdentityProviderSAMLSLOBinding string

// List of EnumIdentityProviderSAMLSLOBinding
const (
	ENUMIDENTITYPROVIDERSAMLSLOBINDING_POST     EnumIdentityProviderSAMLSLOBinding = "HTTP_POST"
	ENUMIDENTITYPROVIDERSAMLSLOBINDING_REDIRECT EnumIdentityProviderSAMLSLOBinding = "HTTP_REDIRECT"
)

// All allowed values of EnumIdentityProviderSAMLSLOBinding enum
var AllowedEnumIdentityProviderSAMLSLOBindingEnumValues = []EnumIdentityProviderSAMLSLOBinding{
	"HTTP_POST",
	"HTTP_REDIRECT",
}

func (v *EnumIdentityProviderSAMLSLOBinding) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumIdentityProviderSAMLSLOBinding(value)
	for _, existing := range AllowedEnumIdentityProviderSAMLSLOBindingEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumIdentityProviderSAMLSLOBinding(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumIdentityProviderSAMLSLOBindingFromValue returns a pointer to a valid EnumIdentityProviderSAMLSLOBinding
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumIdentityProviderSAMLSLOBindingFromValue(v string) (*EnumIdentityProviderSAMLSLOBinding, error) {
	ev := EnumIdentityProviderSAMLSLOBinding(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumIdentityProviderSAMLSLOBinding: valid values are %v", v, AllowedEnumIdentityProviderSAMLSLOBindingEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumIdentityProviderSAMLSLOBinding) IsValid() bool {
	for _, existing := range AllowedEnumIdentityProviderSAMLSLOBindingEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumIdentityProviderSAMLSLOBinding value
func (v EnumIdentityProviderSAMLSLOBinding) Ptr() *EnumIdentityProviderSAMLSLOBinding {
	return &v
}

type NullableEnumIdentityProviderSAMLSLOBinding struct {
	value *EnumIdentityProviderSAMLSLOBinding
	isSet bool
}

func (v NullableEnumIdentityProviderSAMLSLOBinding) Get() *EnumIdentityProviderSAMLSLOBinding {
	return v.value
}

func (v *NullableEnumIdentityProviderSAMLSLOBinding) Set(val *EnumIdentityProviderSAMLSLOBinding) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumIdentityProviderSAMLSLOBinding) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumIdentityProviderSAMLSLOBinding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumIdentityProviderSAMLSLOBinding(val *EnumIdentityProviderSAMLSLOBinding) *NullableEnumIdentityProviderSAMLSLOBinding {
	return &NullableEnumIdentityProviderSAMLSLOBinding{value: val, isSet: true}
}

func (v NullableEnumIdentityProviderSAMLSLOBinding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumIdentityProviderSAMLSLOBinding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
