/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumFormElementLabelMode A string that specifies how the field is rendered.
type EnumFormElementLabelMode string

// List of EnumFormElementLabelMode
const (
	ENUMFORMELEMENTLABELMODE_DEFAULT EnumFormElementLabelMode = "DEFAULT"
	ENUMFORMELEMENTLABELMODE_FLOAT   EnumFormElementLabelMode = "FLOAT"
)

// All allowed values of EnumFormElementLabelMode enum
var AllowedEnumFormElementLabelModeEnumValues = []EnumFormElementLabelMode{
	"DEFAULT",
	"FLOAT",
}

func (v *EnumFormElementLabelMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumFormElementLabelMode(value)
	for _, existing := range AllowedEnumFormElementLabelModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumFormElementLabelMode(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumFormElementLabelModeFromValue returns a pointer to a valid EnumFormElementLabelMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumFormElementLabelModeFromValue(v string) (*EnumFormElementLabelMode, error) {
	ev := EnumFormElementLabelMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumFormElementLabelMode: valid values are %v", v, AllowedEnumFormElementLabelModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumFormElementLabelMode) IsValid() bool {
	for _, existing := range AllowedEnumFormElementLabelModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumFormElementLabelMode value
func (v EnumFormElementLabelMode) Ptr() *EnumFormElementLabelMode {
	return &v
}

type NullableEnumFormElementLabelMode struct {
	value *EnumFormElementLabelMode
	isSet bool
}

func (v NullableEnumFormElementLabelMode) Get() *EnumFormElementLabelMode {
	return v.value
}

func (v *NullableEnumFormElementLabelMode) Set(val *EnumFormElementLabelMode) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumFormElementLabelMode) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumFormElementLabelMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumFormElementLabelMode(val *EnumFormElementLabelMode) *NullableEnumFormElementLabelMode {
	return &NullableEnumFormElementLabelMode{value: val, isSet: true}
}

func (v NullableEnumFormElementLabelMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumFormElementLabelMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
