/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumSubscriptionFormat A string that specifies one of the supported subscription formats. Options are ACTIVITY, SPLUNK, and NEWRELIC. This is a required property.
type EnumSubscriptionFormat string

// List of EnumSubscriptionFormat
const (
	ENUMSUBSCRIPTIONFORMAT_ACTIVITY EnumSubscriptionFormat = "ACTIVITY"
	ENUMSUBSCRIPTIONFORMAT_SPLUNK   EnumSubscriptionFormat = "SPLUNK"
	ENUMSUBSCRIPTIONFORMAT_NEWRELIC EnumSubscriptionFormat = "NEWRELIC"
)

// All allowed values of EnumSubscriptionFormat enum
var AllowedEnumSubscriptionFormatEnumValues = []EnumSubscriptionFormat{
	"ACTIVITY",
	"SPLUNK",
	"NEWRELIC",
}

func (v *EnumSubscriptionFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumSubscriptionFormat(value)
	for _, existing := range AllowedEnumSubscriptionFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumSubscriptionFormat(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumSubscriptionFormatFromValue returns a pointer to a valid EnumSubscriptionFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumSubscriptionFormatFromValue(v string) (*EnumSubscriptionFormat, error) {
	ev := EnumSubscriptionFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumSubscriptionFormat: valid values are %v", v, AllowedEnumSubscriptionFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumSubscriptionFormat) IsValid() bool {
	for _, existing := range AllowedEnumSubscriptionFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumSubscriptionFormat value
func (v EnumSubscriptionFormat) Ptr() *EnumSubscriptionFormat {
	return &v
}

type NullableEnumSubscriptionFormat struct {
	value *EnumSubscriptionFormat
	isSet bool
}

func (v NullableEnumSubscriptionFormat) Get() *EnumSubscriptionFormat {
	return v.value
}

func (v *NullableEnumSubscriptionFormat) Set(val *EnumSubscriptionFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumSubscriptionFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumSubscriptionFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumSubscriptionFormat(val *EnumSubscriptionFormat) *NullableEnumSubscriptionFormat {
	return &NullableEnumSubscriptionFormat{value: val, isSet: true}
}

func (v NullableEnumSubscriptionFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumSubscriptionFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
