/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumGroupMembershipType A string that defines the relationship of group membership
type EnumGroupMembershipType string

// List of EnumGroupMembershipType
const (
	ENUMGROUPMEMBERSHIPTYPE_DIRECT   EnumGroupMembershipType = "DIRECT"
	ENUMGROUPMEMBERSHIPTYPE_INDIRECT EnumGroupMembershipType = "INDIRECT"
)

// All allowed values of EnumGroupMembershipType enum
var AllowedEnumGroupMembershipTypeEnumValues = []EnumGroupMembershipType{
	"DIRECT",
	"INDIRECT",
}

func (v *EnumGroupMembershipType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumGroupMembershipType(value)
	for _, existing := range AllowedEnumGroupMembershipTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumGroupMembershipType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumGroupMembershipTypeFromValue returns a pointer to a valid EnumGroupMembershipType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumGroupMembershipTypeFromValue(v string) (*EnumGroupMembershipType, error) {
	ev := EnumGroupMembershipType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumGroupMembershipType: valid values are %v", v, AllowedEnumGroupMembershipTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumGroupMembershipType) IsValid() bool {
	for _, existing := range AllowedEnumGroupMembershipTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumGroupMembershipType value
func (v EnumGroupMembershipType) Ptr() *EnumGroupMembershipType {
	return &v
}

type NullableEnumGroupMembershipType struct {
	value *EnumGroupMembershipType
	isSet bool
}

func (v NullableEnumGroupMembershipType) Get() *EnumGroupMembershipType {
	return v.value
}

func (v *NullableEnumGroupMembershipType) Set(val *EnumGroupMembershipType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumGroupMembershipType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumGroupMembershipType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumGroupMembershipType(val *EnumGroupMembershipType) *NullableEnumGroupMembershipType {
	return &NullableEnumGroupMembershipType{value: val, isSet: true}
}

func (v NullableEnumGroupMembershipType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumGroupMembershipType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
