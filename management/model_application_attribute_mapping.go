/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"time"
)

// checks if the ApplicationAttributeMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationAttributeMapping{}

// ApplicationAttributeMapping struct for ApplicationAttributeMapping
type ApplicationAttributeMapping struct {
	Links *map[string]LinksHATEOASValue `json:"_links,omitempty"`
	// A string that specifies the application ID.
	Id          *string                                 `json:"id,omitempty"`
	Application *ApplicationAttributeMappingApplication `json:"application,omitempty"`
	// The time the resource was created.
	CreatedAt   *time.Time                `json:"createdAt,omitempty"`
	MappingType *EnumAttributeMappingType `json:"mappingType,omitempty"`
	// A string that specifies the name of attribute and must be unique within an application. For SAML applications, the samlAssertion.subject name is a reserved case-insensitive name which indicates the mapping to be used for the subject in an assertion. For OpenID Connect applications, the following names are reserved and cannot be used acr, amr, at_hash, aud, auth_time, azp, client_id, exp, iat, iss, jti, nbf, nonce, org, scope, sid, sub  This is a required property.
	Name string `json:"name"`
	// A boolean to specify whether a mapping value is required for this attribute. If true, a value must be set and a non-empty value must be available in the SAML assertion or ID token.
	Required bool `json:"required"`
	// The time the resource was updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// A string that specifies the string constants or expression for mapping the attribute path against a specific source. The expression format is ${<source>.<attribute_path>}. The only supported source is user (for example, ${user.id}). This is a required property.
	Value string `json:"value"`
	// A URI reference representing the classification of the attribute. Helps the service provider interpret the attribute format.
	NameFormat *string `json:"nameFormat,omitempty"`
	// Whether the attribute mapping should be available in the ID Token. This property is applicable only when the application's `protocol` property is `OPENID_CONNECT`. If omitted, the default is `true`. Note that the `idToken` and `userInfo` properties cannot both be set to `false`. At least one of these properties must have a value of true.
	IdToken *bool `json:"idToken,omitempty"`
	// Whether the attribute mapping should be available through the `/as/userinfo` endpoint. This property is applicable only when the application's protocol property is `OPENID_CONNECT`. If omitted, the default is `true`. Note that the `idToken` and `userInfo` properties cannot both be set to `false`. At least one of these properties must have a value of `true`.
	UserInfo *bool `json:"userInfo,omitempty"`
	// OIDC resource scope IDs that this attribute mapping is available for exclusively. This setting overrides any global OIDC resource scopes that contain an attribute mapping with the same name. The list can contain only scope IDs that have been granted for the application through the `/grants` endpoint. A null value is accepted for backwards compatibility. However, an empty set is invalid, and one scope ID is expected. If null, the response includes this mapping in the `openid` scope.
	OidcScopes []string `json:"oidcScopes,omitempty"`
}

// NewApplicationAttributeMapping instantiates a new ApplicationAttributeMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationAttributeMapping(name string, required bool, value string) *ApplicationAttributeMapping {
	this := ApplicationAttributeMapping{}
	this.Name = name
	this.Required = required
	this.Value = value
	var idToken bool = true
	this.IdToken = &idToken
	var userInfo bool = true
	this.UserInfo = &userInfo
	return &this
}

// NewApplicationAttributeMappingWithDefaults instantiates a new ApplicationAttributeMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationAttributeMappingWithDefaults() *ApplicationAttributeMapping {
	this := ApplicationAttributeMapping{}
	var idToken bool = true
	this.IdToken = &idToken
	var userInfo bool = true
	this.UserInfo = &userInfo
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ApplicationAttributeMapping) GetLinks() map[string]LinksHATEOASValue {
	if o == nil || IsNil(o.Links) {
		var ret map[string]LinksHATEOASValue
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationAttributeMapping) GetLinksOk() (*map[string]LinksHATEOASValue, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ApplicationAttributeMapping) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]LinksHATEOASValue and assigns it to the Links field.
func (o *ApplicationAttributeMapping) SetLinks(v map[string]LinksHATEOASValue) {
	o.Links = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApplicationAttributeMapping) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationAttributeMapping) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApplicationAttributeMapping) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApplicationAttributeMapping) SetId(v string) {
	o.Id = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *ApplicationAttributeMapping) GetApplication() ApplicationAttributeMappingApplication {
	if o == nil || IsNil(o.Application) {
		var ret ApplicationAttributeMappingApplication
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationAttributeMapping) GetApplicationOk() (*ApplicationAttributeMappingApplication, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *ApplicationAttributeMapping) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given ApplicationAttributeMappingApplication and assigns it to the Application field.
func (o *ApplicationAttributeMapping) SetApplication(v ApplicationAttributeMappingApplication) {
	o.Application = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ApplicationAttributeMapping) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationAttributeMapping) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ApplicationAttributeMapping) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ApplicationAttributeMapping) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetMappingType returns the MappingType field value if set, zero value otherwise.
func (o *ApplicationAttributeMapping) GetMappingType() EnumAttributeMappingType {
	if o == nil || IsNil(o.MappingType) {
		var ret EnumAttributeMappingType
		return ret
	}
	return *o.MappingType
}

// GetMappingTypeOk returns a tuple with the MappingType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationAttributeMapping) GetMappingTypeOk() (*EnumAttributeMappingType, bool) {
	if o == nil || IsNil(o.MappingType) {
		return nil, false
	}
	return o.MappingType, true
}

// HasMappingType returns a boolean if a field has been set.
func (o *ApplicationAttributeMapping) HasMappingType() bool {
	if o != nil && !IsNil(o.MappingType) {
		return true
	}

	return false
}

// SetMappingType gets a reference to the given EnumAttributeMappingType and assigns it to the MappingType field.
func (o *ApplicationAttributeMapping) SetMappingType(v EnumAttributeMappingType) {
	o.MappingType = &v
}

// GetName returns the Name field value
func (o *ApplicationAttributeMapping) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApplicationAttributeMapping) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApplicationAttributeMapping) SetName(v string) {
	o.Name = v
}

// GetRequired returns the Required field value
func (o *ApplicationAttributeMapping) GetRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Required
}

// GetRequiredOk returns a tuple with the Required field value
// and a boolean to check if the value has been set.
func (o *ApplicationAttributeMapping) GetRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Required, true
}

// SetRequired sets field value
func (o *ApplicationAttributeMapping) SetRequired(v bool) {
	o.Required = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ApplicationAttributeMapping) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationAttributeMapping) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ApplicationAttributeMapping) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ApplicationAttributeMapping) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetValue returns the Value field value
func (o *ApplicationAttributeMapping) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ApplicationAttributeMapping) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ApplicationAttributeMapping) SetValue(v string) {
	o.Value = v
}

// GetNameFormat returns the NameFormat field value if set, zero value otherwise.
func (o *ApplicationAttributeMapping) GetNameFormat() string {
	if o == nil || IsNil(o.NameFormat) {
		var ret string
		return ret
	}
	return *o.NameFormat
}

// GetNameFormatOk returns a tuple with the NameFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationAttributeMapping) GetNameFormatOk() (*string, bool) {
	if o == nil || IsNil(o.NameFormat) {
		return nil, false
	}
	return o.NameFormat, true
}

// HasNameFormat returns a boolean if a field has been set.
func (o *ApplicationAttributeMapping) HasNameFormat() bool {
	if o != nil && !IsNil(o.NameFormat) {
		return true
	}

	return false
}

// SetNameFormat gets a reference to the given string and assigns it to the NameFormat field.
func (o *ApplicationAttributeMapping) SetNameFormat(v string) {
	o.NameFormat = &v
}

// GetIdToken returns the IdToken field value if set, zero value otherwise.
func (o *ApplicationAttributeMapping) GetIdToken() bool {
	if o == nil || IsNil(o.IdToken) {
		var ret bool
		return ret
	}
	return *o.IdToken
}

// GetIdTokenOk returns a tuple with the IdToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationAttributeMapping) GetIdTokenOk() (*bool, bool) {
	if o == nil || IsNil(o.IdToken) {
		return nil, false
	}
	return o.IdToken, true
}

// HasIdToken returns a boolean if a field has been set.
func (o *ApplicationAttributeMapping) HasIdToken() bool {
	if o != nil && !IsNil(o.IdToken) {
		return true
	}

	return false
}

// SetIdToken gets a reference to the given bool and assigns it to the IdToken field.
func (o *ApplicationAttributeMapping) SetIdToken(v bool) {
	o.IdToken = &v
}

// GetUserInfo returns the UserInfo field value if set, zero value otherwise.
func (o *ApplicationAttributeMapping) GetUserInfo() bool {
	if o == nil || IsNil(o.UserInfo) {
		var ret bool
		return ret
	}
	return *o.UserInfo
}

// GetUserInfoOk returns a tuple with the UserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationAttributeMapping) GetUserInfoOk() (*bool, bool) {
	if o == nil || IsNil(o.UserInfo) {
		return nil, false
	}
	return o.UserInfo, true
}

// HasUserInfo returns a boolean if a field has been set.
func (o *ApplicationAttributeMapping) HasUserInfo() bool {
	if o != nil && !IsNil(o.UserInfo) {
		return true
	}

	return false
}

// SetUserInfo gets a reference to the given bool and assigns it to the UserInfo field.
func (o *ApplicationAttributeMapping) SetUserInfo(v bool) {
	o.UserInfo = &v
}

// GetOidcScopes returns the OidcScopes field value if set, zero value otherwise.
func (o *ApplicationAttributeMapping) GetOidcScopes() []string {
	if o == nil || IsNil(o.OidcScopes) {
		var ret []string
		return ret
	}
	return o.OidcScopes
}

// GetOidcScopesOk returns a tuple with the OidcScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationAttributeMapping) GetOidcScopesOk() ([]string, bool) {
	if o == nil || IsNil(o.OidcScopes) {
		return nil, false
	}
	return o.OidcScopes, true
}

// HasOidcScopes returns a boolean if a field has been set.
func (o *ApplicationAttributeMapping) HasOidcScopes() bool {
	if o != nil && !IsNil(o.OidcScopes) {
		return true
	}

	return false
}

// SetOidcScopes gets a reference to the given []string and assigns it to the OidcScopes field.
func (o *ApplicationAttributeMapping) SetOidcScopes(v []string) {
	o.OidcScopes = v
}

func (o ApplicationAttributeMapping) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationAttributeMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.MappingType) {
		toSerialize["mappingType"] = o.MappingType
	}
	toSerialize["name"] = o.Name
	toSerialize["required"] = o.Required
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	toSerialize["value"] = o.Value
	if !IsNil(o.NameFormat) {
		toSerialize["nameFormat"] = o.NameFormat
	}
	if !IsNil(o.IdToken) {
		toSerialize["idToken"] = o.IdToken
	}
	if !IsNil(o.UserInfo) {
		toSerialize["userInfo"] = o.UserInfo
	}
	if !IsNil(o.OidcScopes) {
		toSerialize["oidcScopes"] = o.OidcScopes
	}
	return toSerialize, nil
}

type NullableApplicationAttributeMapping struct {
	value *ApplicationAttributeMapping
	isSet bool
}

func (v NullableApplicationAttributeMapping) Get() *ApplicationAttributeMapping {
	return v.value
}

func (v *NullableApplicationAttributeMapping) Set(val *ApplicationAttributeMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationAttributeMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationAttributeMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationAttributeMapping(val *ApplicationAttributeMapping) *NullableApplicationAttributeMapping {
	return &NullableApplicationAttributeMapping{value: val, isSet: true}
}

func (v NullableApplicationAttributeMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationAttributeMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
