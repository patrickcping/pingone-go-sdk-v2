/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the AdministratorSecurityAllowedMethods type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdministratorSecurityAllowedMethods{}

// AdministratorSecurityAllowedMethods Indicates the methods to enable or disable for admin sign-on. Required properties are `TOTP` (temporary one-time password), `FIDO2`, or `EMAIL`.
type AdministratorSecurityAllowedMethods struct {
	// Indicates whether to enable email for sign-on. Must be set to either `{\\\"enabled\\\":true}` or `{\\\"enabled\\\":false}`.
	EMAIL string `json:"EMAIL"`
	// Indicates whether to enable FIDO2 for sign-on. Must be set to either `{\\\"enabled\\\":true}` or `{\\\"enabled\\\":false}`.
	FIDO2 string `json:"FIDO2"`
	// Indicates whether to enable TOTP for sign-on. Must be set to either `{\\\"enabled\\\":true}` or `{\\\"enabled\\\":false}`.
	TOTP string `json:"TOTP"`
}

// NewAdministratorSecurityAllowedMethods instantiates a new AdministratorSecurityAllowedMethods object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdministratorSecurityAllowedMethods(eMAIL string, fIDO2 string, tOTP string) *AdministratorSecurityAllowedMethods {
	this := AdministratorSecurityAllowedMethods{}
	this.EMAIL = eMAIL
	this.FIDO2 = fIDO2
	this.TOTP = tOTP
	return &this
}

// NewAdministratorSecurityAllowedMethodsWithDefaults instantiates a new AdministratorSecurityAllowedMethods object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdministratorSecurityAllowedMethodsWithDefaults() *AdministratorSecurityAllowedMethods {
	this := AdministratorSecurityAllowedMethods{}
	return &this
}

// GetEMAIL returns the EMAIL field value
func (o *AdministratorSecurityAllowedMethods) GetEMAIL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EMAIL
}

// GetEMAILOk returns a tuple with the EMAIL field value
// and a boolean to check if the value has been set.
func (o *AdministratorSecurityAllowedMethods) GetEMAILOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EMAIL, true
}

// SetEMAIL sets field value
func (o *AdministratorSecurityAllowedMethods) SetEMAIL(v string) {
	o.EMAIL = v
}

// GetFIDO2 returns the FIDO2 field value
func (o *AdministratorSecurityAllowedMethods) GetFIDO2() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FIDO2
}

// GetFIDO2Ok returns a tuple with the FIDO2 field value
// and a boolean to check if the value has been set.
func (o *AdministratorSecurityAllowedMethods) GetFIDO2Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FIDO2, true
}

// SetFIDO2 sets field value
func (o *AdministratorSecurityAllowedMethods) SetFIDO2(v string) {
	o.FIDO2 = v
}

// GetTOTP returns the TOTP field value
func (o *AdministratorSecurityAllowedMethods) GetTOTP() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TOTP
}

// GetTOTPOk returns a tuple with the TOTP field value
// and a boolean to check if the value has been set.
func (o *AdministratorSecurityAllowedMethods) GetTOTPOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TOTP, true
}

// SetTOTP sets field value
func (o *AdministratorSecurityAllowedMethods) SetTOTP(v string) {
	o.TOTP = v
}

func (o AdministratorSecurityAllowedMethods) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdministratorSecurityAllowedMethods) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["EMAIL"] = o.EMAIL
	toSerialize["FIDO2"] = o.FIDO2
	toSerialize["TOTP"] = o.TOTP
	return toSerialize, nil
}

type NullableAdministratorSecurityAllowedMethods struct {
	value *AdministratorSecurityAllowedMethods
	isSet bool
}

func (v NullableAdministratorSecurityAllowedMethods) Get() *AdministratorSecurityAllowedMethods {
	return v.value
}

func (v *NullableAdministratorSecurityAllowedMethods) Set(val *AdministratorSecurityAllowedMethods) {
	v.value = val
	v.isSet = true
}

func (v NullableAdministratorSecurityAllowedMethods) IsSet() bool {
	return v.isSet
}

func (v *NullableAdministratorSecurityAllowedMethods) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdministratorSecurityAllowedMethods(val *AdministratorSecurityAllowedMethods) *NullableAdministratorSecurityAllowedMethods {
	return &NullableAdministratorSecurityAllowedMethods{value: val, isSet: true}
}

func (v NullableAdministratorSecurityAllowedMethods) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdministratorSecurityAllowedMethods) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


