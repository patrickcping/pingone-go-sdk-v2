/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumFormFieldType A string that specifies the type of the field.
type EnumFormFieldType string

// List of EnumFormFieldType
const (
	ENUMFORMFIELDTYPE_TEXT                EnumFormFieldType = "TEXT"
	ENUMFORMFIELDTYPE_PASSWORD            EnumFormFieldType = "PASSWORD"
	ENUMFORMFIELDTYPE_PASSWORD_VERIFY     EnumFormFieldType = "PASSWORD_VERIFY"
	ENUMFORMFIELDTYPE_RADIO               EnumFormFieldType = "RADIO"
	ENUMFORMFIELDTYPE_CHECKBOX            EnumFormFieldType = "CHECKBOX"
	ENUMFORMFIELDTYPE_DROPDOWN            EnumFormFieldType = "DROPDOWN"
	ENUMFORMFIELDTYPE_COMBOBOX            EnumFormFieldType = "COMBOBOX"
	ENUMFORMFIELDTYPE_DIVIDER             EnumFormFieldType = "DIVIDER"
	ENUMFORMFIELDTYPE_EMPTY_FIELD         EnumFormFieldType = "EMPTY_FIELD"
	ENUMFORMFIELDTYPE_TEXTBLOB            EnumFormFieldType = "TEXTBLOB"
	ENUMFORMFIELDTYPE_SLATE_TEXTBLOB      EnumFormFieldType = "SLATE_TEXTBLOB"
	ENUMFORMFIELDTYPE_SUBMIT_BUTTON       EnumFormFieldType = "SUBMIT_BUTTON"
	ENUMFORMFIELDTYPE_ERROR_DISPLAY       EnumFormFieldType = "ERROR_DISPLAY"
	ENUMFORMFIELDTYPE_FLOW_LINK           EnumFormFieldType = "FLOW_LINK"
	ENUMFORMFIELDTYPE_FLOW_BUTTON         EnumFormFieldType = "FLOW_BUTTON"
	ENUMFORMFIELDTYPE_RECAPTCHA_V2        EnumFormFieldType = "RECAPTCHA_V2"
	ENUMFORMFIELDTYPE_QR_CODE             EnumFormFieldType = "QR_CODE"
	ENUMFORMFIELDTYPE_SOCIAL_LOGIN_BUTTON EnumFormFieldType = "SOCIAL_LOGIN_BUTTON"
)

// All allowed values of EnumFormFieldType enum
var AllowedEnumFormFieldTypeEnumValues = []EnumFormFieldType{
	"TEXT",
	"PASSWORD",
	"PASSWORD_VERIFY",
	"RADIO",
	"CHECKBOX",
	"DROPDOWN",
	"COMBOBOX",
	"DIVIDER",
	"EMPTY_FIELD",
	"TEXTBLOB",
	"SLATE_TEXTBLOB",
	"SUBMIT_BUTTON",
	"ERROR_DISPLAY",
	"FLOW_LINK",
	"FLOW_BUTTON",
	"RECAPTCHA_V2",
	"QR_CODE",
	"SOCIAL_LOGIN_BUTTON",
}

func (v *EnumFormFieldType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumFormFieldType(value)
	for _, existing := range AllowedEnumFormFieldTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumFormFieldType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumFormFieldTypeFromValue returns a pointer to a valid EnumFormFieldType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumFormFieldTypeFromValue(v string) (*EnumFormFieldType, error) {
	ev := EnumFormFieldType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumFormFieldType: valid values are %v", v, AllowedEnumFormFieldTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumFormFieldType) IsValid() bool {
	for _, existing := range AllowedEnumFormFieldTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumFormFieldType value
func (v EnumFormFieldType) Ptr() *EnumFormFieldType {
	return &v
}

type NullableEnumFormFieldType struct {
	value *EnumFormFieldType
	isSet bool
}

func (v NullableEnumFormFieldType) Get() *EnumFormFieldType {
	return v.value
}

func (v *NullableEnumFormFieldType) Set(val *EnumFormFieldType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumFormFieldType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumFormFieldType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumFormFieldType(val *EnumFormFieldType) *NullableEnumFormFieldType {
	return &NullableEnumFormFieldType{value: val, isSet: true}
}

func (v NullableEnumFormFieldType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumFormFieldType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
