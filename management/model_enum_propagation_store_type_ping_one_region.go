/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumPropagationStoreTypePingOneRegion A supported region. Options are `NA`, `CA`, `EU`, or `AP`.
type EnumPropagationStoreTypePingOneRegion string

// List of EnumPropagationStoreTypePingOneRegion
const (
	ENUMPROPAGATIONSTORETYPEPINGONEREGION_NA EnumPropagationStoreTypePingOneRegion = "NA"
	ENUMPROPAGATIONSTORETYPEPINGONEREGION_CA EnumPropagationStoreTypePingOneRegion = "CA"
	ENUMPROPAGATIONSTORETYPEPINGONEREGION_EU EnumPropagationStoreTypePingOneRegion = "EU"
	ENUMPROPAGATIONSTORETYPEPINGONEREGION_AP EnumPropagationStoreTypePingOneRegion = "AP"
)

// All allowed values of EnumPropagationStoreTypePingOneRegion enum
var AllowedEnumPropagationStoreTypePingOneRegionEnumValues = []EnumPropagationStoreTypePingOneRegion{
	"NA",
	"CA",
	"EU",
	"AP",
}

func (v *EnumPropagationStoreTypePingOneRegion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumPropagationStoreTypePingOneRegion(value)
	for _, existing := range AllowedEnumPropagationStoreTypePingOneRegionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumPropagationStoreTypePingOneRegion(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumPropagationStoreTypePingOneRegionFromValue returns a pointer to a valid EnumPropagationStoreTypePingOneRegion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumPropagationStoreTypePingOneRegionFromValue(v string) (*EnumPropagationStoreTypePingOneRegion, error) {
	ev := EnumPropagationStoreTypePingOneRegion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumPropagationStoreTypePingOneRegion: valid values are %v", v, AllowedEnumPropagationStoreTypePingOneRegionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumPropagationStoreTypePingOneRegion) IsValid() bool {
	for _, existing := range AllowedEnumPropagationStoreTypePingOneRegionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumPropagationStoreTypePingOneRegion value
func (v EnumPropagationStoreTypePingOneRegion) Ptr() *EnumPropagationStoreTypePingOneRegion {
	return &v
}

type NullableEnumPropagationStoreTypePingOneRegion struct {
	value *EnumPropagationStoreTypePingOneRegion
	isSet bool
}

func (v NullableEnumPropagationStoreTypePingOneRegion) Get() *EnumPropagationStoreTypePingOneRegion {
	return v.value
}

func (v *NullableEnumPropagationStoreTypePingOneRegion) Set(val *EnumPropagationStoreTypePingOneRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumPropagationStoreTypePingOneRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumPropagationStoreTypePingOneRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumPropagationStoreTypePingOneRegion(val *EnumPropagationStoreTypePingOneRegion) *NullableEnumPropagationStoreTypePingOneRegion {
	return &NullableEnumPropagationStoreTypePingOneRegion{value: val, isSet: true}
}

func (v NullableEnumPropagationStoreTypePingOneRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumPropagationStoreTypePingOneRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
