/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the RoleAssignment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleAssignment{}

// RoleAssignment struct for RoleAssignment
type RoleAssignment struct {
	Links       *map[string]LinksHATEOASValue `json:"_links,omitempty"`
	Environment *ObjectEnvironment            `json:"environment,omitempty"`
	Gateway     *GatewayInstanceGateway       `json:"gateway,omitempty"`
	Group       *RoleAssignmentGroup          `json:"group,omitempty"`
	// A string that specifies the user role assignment ID.
	Id *string `json:"id,omitempty"`
	// A boolean that specifies whether this role assignment can be deleted by the current actor.
	ReadOnly *bool               `json:"readOnly,omitempty"`
	Role     RoleAssignmentRole  `json:"role"`
	Scope    RoleAssignmentScope `json:"scope"`
}

// NewRoleAssignment instantiates a new RoleAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleAssignment(role RoleAssignmentRole, scope RoleAssignmentScope) *RoleAssignment {
	this := RoleAssignment{}
	this.Role = role
	this.Scope = scope
	return &this
}

// NewRoleAssignmentWithDefaults instantiates a new RoleAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleAssignmentWithDefaults() *RoleAssignment {
	this := RoleAssignment{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *RoleAssignment) GetLinks() map[string]LinksHATEOASValue {
	if o == nil || IsNil(o.Links) {
		var ret map[string]LinksHATEOASValue
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignment) GetLinksOk() (*map[string]LinksHATEOASValue, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *RoleAssignment) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]LinksHATEOASValue and assigns it to the Links field.
func (o *RoleAssignment) SetLinks(v map[string]LinksHATEOASValue) {
	o.Links = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *RoleAssignment) GetEnvironment() ObjectEnvironment {
	if o == nil || IsNil(o.Environment) {
		var ret ObjectEnvironment
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignment) GetEnvironmentOk() (*ObjectEnvironment, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *RoleAssignment) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given ObjectEnvironment and assigns it to the Environment field.
func (o *RoleAssignment) SetEnvironment(v ObjectEnvironment) {
	o.Environment = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *RoleAssignment) GetGateway() GatewayInstanceGateway {
	if o == nil || IsNil(o.Gateway) {
		var ret GatewayInstanceGateway
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignment) GetGatewayOk() (*GatewayInstanceGateway, bool) {
	if o == nil || IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *RoleAssignment) HasGateway() bool {
	if o != nil && !IsNil(o.Gateway) {
		return true
	}

	return false
}

// SetGateway gets a reference to the given GatewayInstanceGateway and assigns it to the Gateway field.
func (o *RoleAssignment) SetGateway(v GatewayInstanceGateway) {
	o.Gateway = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *RoleAssignment) GetGroup() RoleAssignmentGroup {
	if o == nil || IsNil(o.Group) {
		var ret RoleAssignmentGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignment) GetGroupOk() (*RoleAssignmentGroup, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *RoleAssignment) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given RoleAssignmentGroup and assigns it to the Group field.
func (o *RoleAssignment) SetGroup(v RoleAssignmentGroup) {
	o.Group = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RoleAssignment) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignment) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RoleAssignment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RoleAssignment) SetId(v string) {
	o.Id = &v
}

// GetReadOnly returns the ReadOnly field value if set, zero value otherwise.
func (o *RoleAssignment) GetReadOnly() bool {
	if o == nil || IsNil(o.ReadOnly) {
		var ret bool
		return ret
	}
	return *o.ReadOnly
}

// GetReadOnlyOk returns a tuple with the ReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleAssignment) GetReadOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ReadOnly) {
		return nil, false
	}
	return o.ReadOnly, true
}

// HasReadOnly returns a boolean if a field has been set.
func (o *RoleAssignment) HasReadOnly() bool {
	if o != nil && !IsNil(o.ReadOnly) {
		return true
	}

	return false
}

// SetReadOnly gets a reference to the given bool and assigns it to the ReadOnly field.
func (o *RoleAssignment) SetReadOnly(v bool) {
	o.ReadOnly = &v
}

// GetRole returns the Role field value
func (o *RoleAssignment) GetRole() RoleAssignmentRole {
	if o == nil {
		var ret RoleAssignmentRole
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *RoleAssignment) GetRoleOk() (*RoleAssignmentRole, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *RoleAssignment) SetRole(v RoleAssignmentRole) {
	o.Role = v
}

// GetScope returns the Scope field value
func (o *RoleAssignment) GetScope() RoleAssignmentScope {
	if o == nil {
		var ret RoleAssignmentScope
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *RoleAssignment) GetScopeOk() (*RoleAssignmentScope, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *RoleAssignment) SetScope(v RoleAssignmentScope) {
	o.Scope = v
}

func (o RoleAssignment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleAssignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.Gateway) {
		toSerialize["gateway"] = o.Gateway
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ReadOnly) {
		toSerialize["readOnly"] = o.ReadOnly
	}
	toSerialize["role"] = o.Role
	toSerialize["scope"] = o.Scope
	return toSerialize, nil
}

type NullableRoleAssignment struct {
	value *RoleAssignment
	isSet bool
}

func (v NullableRoleAssignment) Get() *RoleAssignment {
	return v.value
}

func (v *NullableRoleAssignment) Set(val *RoleAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleAssignment(val *RoleAssignment) *NullableRoleAssignment {
	return &NullableRoleAssignment{value: val, isSet: true}
}

func (v NullableRoleAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
