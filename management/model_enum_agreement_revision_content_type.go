/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumAgreementRevisionContentType An immutable string that specifies the content type of text. Options are text/html and text/plain, as defined by [rfc-6838](https://datatracker.ietf.org/doc/html/rfc6838#section-4.2.1) and [Media Types/text](https://www.iana.org/assignments/media-types/media-types.xhtml#text). This attribute is supported in POST requests only.
type EnumAgreementRevisionContentType string

// List of EnumAgreementRevisionContentType
const (
	ENUMAGREEMENTREVISIONCONTENTTYPE_HTML  EnumAgreementRevisionContentType = "text/html"
	ENUMAGREEMENTREVISIONCONTENTTYPE_PLAIN EnumAgreementRevisionContentType = "text/plain"
)

// All allowed values of EnumAgreementRevisionContentType enum
var AllowedEnumAgreementRevisionContentTypeEnumValues = []EnumAgreementRevisionContentType{
	"text/html",
	"text/plain",
}

func (v *EnumAgreementRevisionContentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAgreementRevisionContentType(value)
	for _, existing := range AllowedEnumAgreementRevisionContentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAgreementRevisionContentType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAgreementRevisionContentTypeFromValue returns a pointer to a valid EnumAgreementRevisionContentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAgreementRevisionContentTypeFromValue(v string) (*EnumAgreementRevisionContentType, error) {
	ev := EnumAgreementRevisionContentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAgreementRevisionContentType: valid values are %v", v, AllowedEnumAgreementRevisionContentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAgreementRevisionContentType) IsValid() bool {
	for _, existing := range AllowedEnumAgreementRevisionContentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAgreementRevisionContentType value
func (v EnumAgreementRevisionContentType) Ptr() *EnumAgreementRevisionContentType {
	return &v
}

type NullableEnumAgreementRevisionContentType struct {
	value *EnumAgreementRevisionContentType
	isSet bool
}

func (v NullableEnumAgreementRevisionContentType) Get() *EnumAgreementRevisionContentType {
	return v.value
}

func (v *NullableEnumAgreementRevisionContentType) Set(val *EnumAgreementRevisionContentType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAgreementRevisionContentType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAgreementRevisionContentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAgreementRevisionContentType(val *EnumAgreementRevisionContentType) *NullableEnumAgreementRevisionContentType {
	return &NullableEnumAgreementRevisionContentType{value: val, isSet: true}
}

func (v NullableEnumAgreementRevisionContentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAgreementRevisionContentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
