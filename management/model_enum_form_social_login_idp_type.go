/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumFormSocialLoginIdpType A string that specifies the external identity provider type.
type EnumFormSocialLoginIdpType string

// List of EnumFormSocialLoginIdpType
const (
	ENUMFORMSOCIALLOGINIDPTYPE_FACEBOOK EnumFormSocialLoginIdpType = "FACEBOOK"
	ENUMFORMSOCIALLOGINIDPTYPE_APPLE EnumFormSocialLoginIdpType = "APPLE"
	ENUMFORMSOCIALLOGINIDPTYPE_GOOGLE EnumFormSocialLoginIdpType = "GOOGLE"
	ENUMFORMSOCIALLOGINIDPTYPE_AMAZON EnumFormSocialLoginIdpType = "AMAZON"
	ENUMFORMSOCIALLOGINIDPTYPE_LINKEDIN EnumFormSocialLoginIdpType = "LINKEDIN"
	ENUMFORMSOCIALLOGINIDPTYPE_LINKEDIN_OIDC EnumFormSocialLoginIdpType = "LINKEDIN_OIDC"
	ENUMFORMSOCIALLOGINIDPTYPE_MICROSOFT EnumFormSocialLoginIdpType = "MICROSOFT"
	ENUMFORMSOCIALLOGINIDPTYPE_TWITTER EnumFormSocialLoginIdpType = "TWITTER"
	ENUMFORMSOCIALLOGINIDPTYPE_YAHOO EnumFormSocialLoginIdpType = "YAHOO"
	ENUMFORMSOCIALLOGINIDPTYPE_PAYPAL EnumFormSocialLoginIdpType = "PAYPAL"
	ENUMFORMSOCIALLOGINIDPTYPE_GITHUB EnumFormSocialLoginIdpType = "GITHUB"
	ENUMFORMSOCIALLOGINIDPTYPE_OPENID_CONNECT EnumFormSocialLoginIdpType = "OPENID_CONNECT"
	ENUMFORMSOCIALLOGINIDPTYPE_SAML EnumFormSocialLoginIdpType = "SAML"
	ENUMFORMSOCIALLOGINIDPTYPE_LDAP EnumFormSocialLoginIdpType = "LDAP"
)

// All allowed values of EnumFormSocialLoginIdpType enum
var AllowedEnumFormSocialLoginIdpTypeEnumValues = []EnumFormSocialLoginIdpType{
	"FACEBOOK",
	"APPLE",
	"GOOGLE",
	"AMAZON",
	"LINKEDIN",
	"LINKEDIN_OIDC",
	"MICROSOFT",
	"TWITTER",
	"YAHOO",
	"PAYPAL",
	"GITHUB",
	"OPENID_CONNECT",
	"SAML",
	"LDAP",
}

func (v *EnumFormSocialLoginIdpType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumFormSocialLoginIdpType(value)
	for _, existing := range AllowedEnumFormSocialLoginIdpTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumFormSocialLoginIdpType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumFormSocialLoginIdpTypeFromValue returns a pointer to a valid EnumFormSocialLoginIdpType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumFormSocialLoginIdpTypeFromValue(v string) (*EnumFormSocialLoginIdpType, error) {
	ev := EnumFormSocialLoginIdpType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumFormSocialLoginIdpType: valid values are %v", v, AllowedEnumFormSocialLoginIdpTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumFormSocialLoginIdpType) IsValid() bool {
	for _, existing := range AllowedEnumFormSocialLoginIdpTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumFormSocialLoginIdpType value
func (v EnumFormSocialLoginIdpType) Ptr() *EnumFormSocialLoginIdpType {
	return &v
}

type NullableEnumFormSocialLoginIdpType struct {
	value *EnumFormSocialLoginIdpType
	isSet bool
}

func (v NullableEnumFormSocialLoginIdpType) Get() *EnumFormSocialLoginIdpType {
	return v.value
}

func (v *NullableEnumFormSocialLoginIdpType) Set(val *EnumFormSocialLoginIdpType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumFormSocialLoginIdpType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumFormSocialLoginIdpType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumFormSocialLoginIdpType(val *EnumFormSocialLoginIdpType) *NullableEnumFormSocialLoginIdpType {
	return &NullableEnumFormSocialLoginIdpType{value: val, isSet: true}
}

func (v NullableEnumFormSocialLoginIdpType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumFormSocialLoginIdpType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

