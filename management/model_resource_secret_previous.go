/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"time"
)

// checks if the ResourceSecretPrevious type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceSecretPrevious{}

// ResourceSecretPrevious An object that specifies the resource's previous secret, when it expires, and when it was last used.
type ResourceSecretPrevious struct {
	// A string that specifies the resource's previous secret. This property is returned in the response if the previous secret is not expired.
	Secret *string `json:"secret,omitempty"`
	// A timestamp that specifies how long this secret is saved (and can be used) before it expires. Supported time range is 1 minute to 30 days.
	ExpiresAt time.Time `json:"expiresAt"`
	// A timestamp that specifies when the previous secret was last used.
	LastUsed *time.Time `json:"lastUsed,omitempty"`
}

// NewResourceSecretPrevious instantiates a new ResourceSecretPrevious object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceSecretPrevious(expiresAt time.Time) *ResourceSecretPrevious {
	this := ResourceSecretPrevious{}
	this.ExpiresAt = expiresAt
	return &this
}

// NewResourceSecretPreviousWithDefaults instantiates a new ResourceSecretPrevious object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceSecretPreviousWithDefaults() *ResourceSecretPrevious {
	this := ResourceSecretPrevious{}
	return &this
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *ResourceSecretPrevious) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceSecretPrevious) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *ResourceSecretPrevious) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *ResourceSecretPrevious) SetSecret(v string) {
	o.Secret = &v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *ResourceSecretPrevious) GetExpiresAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *ResourceSecretPrevious) GetExpiresAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *ResourceSecretPrevious) SetExpiresAt(v time.Time) {
	o.ExpiresAt = v
}

// GetLastUsed returns the LastUsed field value if set, zero value otherwise.
func (o *ResourceSecretPrevious) GetLastUsed() time.Time {
	if o == nil || IsNil(o.LastUsed) {
		var ret time.Time
		return ret
	}
	return *o.LastUsed
}

// GetLastUsedOk returns a tuple with the LastUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceSecretPrevious) GetLastUsedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastUsed) {
		return nil, false
	}
	return o.LastUsed, true
}

// HasLastUsed returns a boolean if a field has been set.
func (o *ResourceSecretPrevious) HasLastUsed() bool {
	if o != nil && !IsNil(o.LastUsed) {
		return true
	}

	return false
}

// SetLastUsed gets a reference to the given time.Time and assigns it to the LastUsed field.
func (o *ResourceSecretPrevious) SetLastUsed(v time.Time) {
	o.LastUsed = &v
}

func (o ResourceSecretPrevious) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceSecretPrevious) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	toSerialize["expiresAt"] = o.ExpiresAt
	if !IsNil(o.LastUsed) {
		toSerialize["lastUsed"] = o.LastUsed
	}
	return toSerialize, nil
}

type NullableResourceSecretPrevious struct {
	value *ResourceSecretPrevious
	isSet bool
}

func (v NullableResourceSecretPrevious) Get() *ResourceSecretPrevious {
	return v.value
}

func (v *NullableResourceSecretPrevious) Set(val *ResourceSecretPrevious) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceSecretPrevious) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceSecretPrevious) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceSecretPrevious(val *ResourceSecretPrevious) *NullableResourceSecretPrevious {
	return &NullableResourceSecretPrevious{value: val, isSet: true}
}

func (v NullableResourceSecretPrevious) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceSecretPrevious) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
