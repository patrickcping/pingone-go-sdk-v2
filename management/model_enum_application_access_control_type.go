/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumApplicationAccessControlType A string that specifies the user role required to access the application. Options are ADMIN_USERS_ONLY. A user is an admin user if the user has one or more of the following roles Organization Admin, Environment Admin, Identity Data Admin, or Client Application Developer.
type EnumApplicationAccessControlType string

// List of EnumApplicationAccessControlType
const (
	ENUMAPPLICATIONACCESSCONTROLTYPE_ADMIN_USERS_ONLY EnumApplicationAccessControlType = "ADMIN_USERS_ONLY"
)

// All allowed values of EnumApplicationAccessControlType enum
var AllowedEnumApplicationAccessControlTypeEnumValues = []EnumApplicationAccessControlType{
	"ADMIN_USERS_ONLY",
}

func (v *EnumApplicationAccessControlType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumApplicationAccessControlType(value)
	for _, existing := range AllowedEnumApplicationAccessControlTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumApplicationAccessControlType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumApplicationAccessControlTypeFromValue returns a pointer to a valid EnumApplicationAccessControlType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumApplicationAccessControlTypeFromValue(v string) (*EnumApplicationAccessControlType, error) {
	ev := EnumApplicationAccessControlType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumApplicationAccessControlType: valid values are %v", v, AllowedEnumApplicationAccessControlTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumApplicationAccessControlType) IsValid() bool {
	for _, existing := range AllowedEnumApplicationAccessControlTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumApplicationAccessControlType value
func (v EnumApplicationAccessControlType) Ptr() *EnumApplicationAccessControlType {
	return &v
}

type NullableEnumApplicationAccessControlType struct {
	value *EnumApplicationAccessControlType
	isSet bool
}

func (v NullableEnumApplicationAccessControlType) Get() *EnumApplicationAccessControlType {
	return v.value
}

func (v *NullableEnumApplicationAccessControlType) Set(val *EnumApplicationAccessControlType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumApplicationAccessControlType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumApplicationAccessControlType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumApplicationAccessControlType(val *EnumApplicationAccessControlType) *NullableEnumApplicationAccessControlType {
	return &NullableEnumApplicationAccessControlType{value: val, isSet: true}
}

func (v NullableEnumApplicationAccessControlType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumApplicationAccessControlType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
