/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumGatewayType A string that specifies the type of gateway resource. Options are LDAP, PING_FEDERATE, API_GATEWAY_INTEGRATION, RADIUS and PING_INTELLIGENCE. This is a required property.
type EnumGatewayType string

// List of EnumGatewayType
const (
	ENUMGATEWAYTYPE_LDAP                    EnumGatewayType = "LDAP"
	ENUMGATEWAYTYPE_PING_FEDERATE           EnumGatewayType = "PING_FEDERATE"
	ENUMGATEWAYTYPE_PING_INTELLIGENCE       EnumGatewayType = "PING_INTELLIGENCE"
	ENUMGATEWAYTYPE_API_GATEWAY_INTEGRATION EnumGatewayType = "API_GATEWAY_INTEGRATION"
	ENUMGATEWAYTYPE_RADIUS                  EnumGatewayType = "RADIUS"
)

// All allowed values of EnumGatewayType enum
var AllowedEnumGatewayTypeEnumValues = []EnumGatewayType{
	"LDAP",
	"PING_FEDERATE",
	"PING_INTELLIGENCE",
	"API_GATEWAY_INTEGRATION",
	"RADIUS",
}

func (v *EnumGatewayType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumGatewayType(value)
	for _, existing := range AllowedEnumGatewayTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumGatewayType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumGatewayTypeFromValue returns a pointer to a valid EnumGatewayType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumGatewayTypeFromValue(v string) (*EnumGatewayType, error) {
	ev := EnumGatewayType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumGatewayType: valid values are %v", v, AllowedEnumGatewayTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumGatewayType) IsValid() bool {
	for _, existing := range AllowedEnumGatewayTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumGatewayType value
func (v EnumGatewayType) Ptr() *EnumGatewayType {
	return &v
}

type NullableEnumGatewayType struct {
	value *EnumGatewayType
	isSet bool
}

func (v NullableEnumGatewayType) Get() *EnumGatewayType {
	return v.value
}

func (v *NullableEnumGatewayType) Set(val *EnumGatewayType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumGatewayType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumGatewayType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumGatewayType(val *EnumGatewayType) *NullableEnumGatewayType {
	return &NullableEnumGatewayType{value: val, isSet: true}
}

func (v NullableEnumGatewayType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumGatewayType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
