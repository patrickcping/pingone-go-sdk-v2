/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// NotificationsSettingsEmailDeliverySettings - struct for NotificationsSettingsEmailDeliverySettings
type NotificationsSettingsEmailDeliverySettings struct {
	NotificationsSettingsEmailDeliverySettingsCustom *NotificationsSettingsEmailDeliverySettingsCustom
	NotificationsSettingsEmailDeliverySettingsSMTP   *NotificationsSettingsEmailDeliverySettingsSMTP
}

// NotificationsSettingsEmailDeliverySettingsCustomAsNotificationsSettingsEmailDeliverySettings is a convenience function that returns NotificationsSettingsEmailDeliverySettingsCustom wrapped in NotificationsSettingsEmailDeliverySettings
func NotificationsSettingsEmailDeliverySettingsCustomAsNotificationsSettingsEmailDeliverySettings(v *NotificationsSettingsEmailDeliverySettingsCustom) NotificationsSettingsEmailDeliverySettings {
	return NotificationsSettingsEmailDeliverySettings{
		NotificationsSettingsEmailDeliverySettingsCustom: v,
	}
}

// NotificationsSettingsEmailDeliverySettingsSMTPAsNotificationsSettingsEmailDeliverySettings is a convenience function that returns NotificationsSettingsEmailDeliverySettingsSMTP wrapped in NotificationsSettingsEmailDeliverySettings
func NotificationsSettingsEmailDeliverySettingsSMTPAsNotificationsSettingsEmailDeliverySettings(v *NotificationsSettingsEmailDeliverySettingsSMTP) NotificationsSettingsEmailDeliverySettings {
	return NotificationsSettingsEmailDeliverySettings{
		NotificationsSettingsEmailDeliverySettingsSMTP: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *NotificationsSettingsEmailDeliverySettings) UnmarshalJSON(data []byte) error {

	var common NotificationsSettingsEmailDeliverySettingsCommon

	if err := json.Unmarshal(data, &common); err != nil {
		return err
	}

	dst.NotificationsSettingsEmailDeliverySettingsCustom = nil
	dst.NotificationsSettingsEmailDeliverySettingsSMTP = nil

	objType := common.GetProtocol()

	if !objType.IsValid() {
		return nil
	}

	switch objType {
	case ENUMNOTIFICATIONSSETTINGSEMAILDELIVERYSETTINGSPROTOCOL_HTTP:
		if err := json.Unmarshal(data, &dst.NotificationsSettingsEmailDeliverySettingsCustom); err != nil {
			return err
		}
	case ENUMNOTIFICATIONSSETTINGSEMAILDELIVERYSETTINGSPROTOCOL_SMTP, ENUMNOTIFICATIONSSETTINGSEMAILDELIVERYSETTINGSPROTOCOL_SMTPS:
		if err := json.Unmarshal(data, &dst.NotificationsSettingsEmailDeliverySettingsSMTP); err != nil {
			return err
		}
	default:
		return fmt.Errorf("Data failed to match schemas in oneOf(NotificationsSettingsEmailDeliverySettings)")
	}
	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src NotificationsSettingsEmailDeliverySettings) MarshalJSON() ([]byte, error) {
	if src.NotificationsSettingsEmailDeliverySettingsCustom != nil {
		return json.Marshal(&src.NotificationsSettingsEmailDeliverySettingsCustom)
	}

	if src.NotificationsSettingsEmailDeliverySettingsSMTP != nil {
		return json.Marshal(&src.NotificationsSettingsEmailDeliverySettingsSMTP)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *NotificationsSettingsEmailDeliverySettings) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.NotificationsSettingsEmailDeliverySettingsCustom != nil {
		return obj.NotificationsSettingsEmailDeliverySettingsCustom
	}

	if obj.NotificationsSettingsEmailDeliverySettingsSMTP != nil {
		return obj.NotificationsSettingsEmailDeliverySettingsSMTP
	}

	// all schemas are nil
	return nil
}

type NullableNotificationsSettingsEmailDeliverySettings struct {
	value *NotificationsSettingsEmailDeliverySettings
	isSet bool
}

func (v NullableNotificationsSettingsEmailDeliverySettings) Get() *NotificationsSettingsEmailDeliverySettings {
	return v.value
}

func (v *NullableNotificationsSettingsEmailDeliverySettings) Set(val *NotificationsSettingsEmailDeliverySettings) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationsSettingsEmailDeliverySettings) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationsSettingsEmailDeliverySettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationsSettingsEmailDeliverySettings(val *NotificationsSettingsEmailDeliverySettings) *NullableNotificationsSettingsEmailDeliverySettings {
	return &NullableNotificationsSettingsEmailDeliverySettings{value: val, isSet: true}
}

func (v NullableNotificationsSettingsEmailDeliverySettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationsSettingsEmailDeliverySettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
