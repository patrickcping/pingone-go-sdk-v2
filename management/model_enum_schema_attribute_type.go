/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumSchemaAttributeType A string that specifies the the type of the attribute. It may be one of STRING, JSON, BOOLEAN, or COMPLEX. If the type is not provided during creation, then it defaults to STRING. Complex and boolean attributes may not be created, but standard attributes of those types may be updated. JSON attributes are limited by size (total size must not exceed 16KB).
type EnumSchemaAttributeType string

// List of EnumSchemaAttributeType
const (
	ENUMSCHEMAATTRIBUTETYPE_STRING  EnumSchemaAttributeType = "STRING"
	ENUMSCHEMAATTRIBUTETYPE_JSON    EnumSchemaAttributeType = "JSON"
	ENUMSCHEMAATTRIBUTETYPE_BOOLEAN EnumSchemaAttributeType = "BOOLEAN"
	ENUMSCHEMAATTRIBUTETYPE_COMPLEX EnumSchemaAttributeType = "COMPLEX"
)

// All allowed values of EnumSchemaAttributeType enum
var AllowedEnumSchemaAttributeTypeEnumValues = []EnumSchemaAttributeType{
	"STRING",
	"JSON",
	"BOOLEAN",
	"COMPLEX",
}

func (v *EnumSchemaAttributeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumSchemaAttributeType(value)
	for _, existing := range AllowedEnumSchemaAttributeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumSchemaAttributeType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumSchemaAttributeTypeFromValue returns a pointer to a valid EnumSchemaAttributeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumSchemaAttributeTypeFromValue(v string) (*EnumSchemaAttributeType, error) {
	ev := EnumSchemaAttributeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumSchemaAttributeType: valid values are %v", v, AllowedEnumSchemaAttributeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumSchemaAttributeType) IsValid() bool {
	for _, existing := range AllowedEnumSchemaAttributeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumSchemaAttributeType value
func (v EnumSchemaAttributeType) Ptr() *EnumSchemaAttributeType {
	return &v
}

type NullableEnumSchemaAttributeType struct {
	value *EnumSchemaAttributeType
	isSet bool
}

func (v NullableEnumSchemaAttributeType) Get() *EnumSchemaAttributeType {
	return v.value
}

func (v *NullableEnumSchemaAttributeType) Set(val *EnumSchemaAttributeType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumSchemaAttributeType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumSchemaAttributeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumSchemaAttributeType(val *EnumSchemaAttributeType) *NullableEnumSchemaAttributeType {
	return &NullableEnumSchemaAttributeType{value: val, isSet: true}
}

func (v NullableEnumSchemaAttributeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumSchemaAttributeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
