/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumUserAccountContentTypeHeader the model 'EnumUserAccountContentTypeHeader'
type EnumUserAccountContentTypeHeader string

// List of EnumUserAccountContentTypeHeader
const (
	ENUMUSERACCOUNTCONTENTTYPEHEADER_UNLOCKJSON EnumUserAccountContentTypeHeader = "application/vnd.pingidentity.account.unlock+json"
	ENUMUSERACCOUNTCONTENTTYPEHEADER_LOCKJSON   EnumUserAccountContentTypeHeader = "application/vnd.pingidentity.account.lock+json"
)

// All allowed values of EnumUserAccountContentTypeHeader enum
var AllowedEnumUserAccountContentTypeHeaderEnumValues = []EnumUserAccountContentTypeHeader{
	"application/vnd.pingidentity.account.unlock+json",
	"application/vnd.pingidentity.account.lock+json",
}

func (v *EnumUserAccountContentTypeHeader) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumUserAccountContentTypeHeader(value)
	for _, existing := range AllowedEnumUserAccountContentTypeHeaderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumUserAccountContentTypeHeader(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumUserAccountContentTypeHeaderFromValue returns a pointer to a valid EnumUserAccountContentTypeHeader
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumUserAccountContentTypeHeaderFromValue(v string) (*EnumUserAccountContentTypeHeader, error) {
	ev := EnumUserAccountContentTypeHeader(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumUserAccountContentTypeHeader: valid values are %v", v, AllowedEnumUserAccountContentTypeHeaderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumUserAccountContentTypeHeader) IsValid() bool {
	for _, existing := range AllowedEnumUserAccountContentTypeHeaderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumUserAccountContentTypeHeader value
func (v EnumUserAccountContentTypeHeader) Ptr() *EnumUserAccountContentTypeHeader {
	return &v
}

type NullableEnumUserAccountContentTypeHeader struct {
	value *EnumUserAccountContentTypeHeader
	isSet bool
}

func (v NullableEnumUserAccountContentTypeHeader) Get() *EnumUserAccountContentTypeHeader {
	return v.value
}

func (v *NullableEnumUserAccountContentTypeHeader) Set(val *EnumUserAccountContentTypeHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumUserAccountContentTypeHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumUserAccountContentTypeHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumUserAccountContentTypeHeader(val *EnumUserAccountContentTypeHeader) *NullableEnumUserAccountContentTypeHeader {
	return &NullableEnumUserAccountContentTypeHeader{value: val, isSet: true}
}

func (v NullableEnumUserAccountContentTypeHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumUserAccountContentTypeHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
