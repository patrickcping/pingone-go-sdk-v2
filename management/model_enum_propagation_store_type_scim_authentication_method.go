/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumPropagationStoreTypeSCIMAuthenticationMethod The account authentication method. Can be `OAuth 2 Client Credentials`, `OAuth 2 Bearer Token`, or `Basic Authentication`.
type EnumPropagationStoreTypeSCIMAuthenticationMethod string

// List of EnumPropagationStoreTypeSCIMAuthenticationMethod
const (
	ENUMPROPAGATIONSTORETYPESCIMAUTHENTICATIONMETHOD_O_AUTH_2_CLIENT_CREDENTIALS EnumPropagationStoreTypeSCIMAuthenticationMethod = "OAuth 2 Client Credentials"
	ENUMPROPAGATIONSTORETYPESCIMAUTHENTICATIONMETHOD_O_AUTH_2_BEARER_TOKEN       EnumPropagationStoreTypeSCIMAuthenticationMethod = "OAuth 2 Bearer Token"
	ENUMPROPAGATIONSTORETYPESCIMAUTHENTICATIONMETHOD_BASIC_AUTHENTICATION        EnumPropagationStoreTypeSCIMAuthenticationMethod = "Basic Authentication"
)

// All allowed values of EnumPropagationStoreTypeSCIMAuthenticationMethod enum
var AllowedEnumPropagationStoreTypeSCIMAuthenticationMethodEnumValues = []EnumPropagationStoreTypeSCIMAuthenticationMethod{
	"OAuth 2 Client Credentials",
	"OAuth 2 Bearer Token",
	"Basic Authentication",
}

func (v *EnumPropagationStoreTypeSCIMAuthenticationMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumPropagationStoreTypeSCIMAuthenticationMethod(value)
	for _, existing := range AllowedEnumPropagationStoreTypeSCIMAuthenticationMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumPropagationStoreTypeSCIMAuthenticationMethod(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumPropagationStoreTypeSCIMAuthenticationMethodFromValue returns a pointer to a valid EnumPropagationStoreTypeSCIMAuthenticationMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumPropagationStoreTypeSCIMAuthenticationMethodFromValue(v string) (*EnumPropagationStoreTypeSCIMAuthenticationMethod, error) {
	ev := EnumPropagationStoreTypeSCIMAuthenticationMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumPropagationStoreTypeSCIMAuthenticationMethod: valid values are %v", v, AllowedEnumPropagationStoreTypeSCIMAuthenticationMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumPropagationStoreTypeSCIMAuthenticationMethod) IsValid() bool {
	for _, existing := range AllowedEnumPropagationStoreTypeSCIMAuthenticationMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumPropagationStoreTypeSCIMAuthenticationMethod value
func (v EnumPropagationStoreTypeSCIMAuthenticationMethod) Ptr() *EnumPropagationStoreTypeSCIMAuthenticationMethod {
	return &v
}

type NullableEnumPropagationStoreTypeSCIMAuthenticationMethod struct {
	value *EnumPropagationStoreTypeSCIMAuthenticationMethod
	isSet bool
}

func (v NullableEnumPropagationStoreTypeSCIMAuthenticationMethod) Get() *EnumPropagationStoreTypeSCIMAuthenticationMethod {
	return v.value
}

func (v *NullableEnumPropagationStoreTypeSCIMAuthenticationMethod) Set(val *EnumPropagationStoreTypeSCIMAuthenticationMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumPropagationStoreTypeSCIMAuthenticationMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumPropagationStoreTypeSCIMAuthenticationMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumPropagationStoreTypeSCIMAuthenticationMethod(val *EnumPropagationStoreTypeSCIMAuthenticationMethod) *NullableEnumPropagationStoreTypeSCIMAuthenticationMethod {
	return &NullableEnumPropagationStoreTypeSCIMAuthenticationMethod{value: val, isSet: true}
}

func (v NullableEnumPropagationStoreTypeSCIMAuthenticationMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumPropagationStoreTypeSCIMAuthenticationMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
