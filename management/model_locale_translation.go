/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the LocaleTranslation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocaleTranslation{}

// LocaleTranslation struct for LocaleTranslation
type LocaleTranslation struct {
	// The translation ID for a specific string.
	Id *string `json:"id,omitempty"`
	// The page and name of the interface element to be localized (for example, `flow-ui.button.cancel`).
	Key string `json:"key"`
	// The interace element only (for example, `button.cancel`).
	ShortKey *string `json:"shortKey,omitempty"`
	// The English string text associated with the interface element.
	ReferenceText *string `json:"referenceText,omitempty"`
	// The translated string text associated with the interface element.
	TranslatedText string `json:"translatedText"`
}

// NewLocaleTranslation instantiates a new LocaleTranslation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocaleTranslation(key string, translatedText string) *LocaleTranslation {
	this := LocaleTranslation{}
	this.Key = key
	this.TranslatedText = translatedText
	return &this
}

// NewLocaleTranslationWithDefaults instantiates a new LocaleTranslation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocaleTranslationWithDefaults() *LocaleTranslation {
	this := LocaleTranslation{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *LocaleTranslation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocaleTranslation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *LocaleTranslation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *LocaleTranslation) SetId(v string) {
	o.Id = &v
}

// GetKey returns the Key field value
func (o *LocaleTranslation) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *LocaleTranslation) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *LocaleTranslation) SetKey(v string) {
	o.Key = v
}

// GetShortKey returns the ShortKey field value if set, zero value otherwise.
func (o *LocaleTranslation) GetShortKey() string {
	if o == nil || IsNil(o.ShortKey) {
		var ret string
		return ret
	}
	return *o.ShortKey
}

// GetShortKeyOk returns a tuple with the ShortKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocaleTranslation) GetShortKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ShortKey) {
		return nil, false
	}
	return o.ShortKey, true
}

// HasShortKey returns a boolean if a field has been set.
func (o *LocaleTranslation) HasShortKey() bool {
	if o != nil && !IsNil(o.ShortKey) {
		return true
	}

	return false
}

// SetShortKey gets a reference to the given string and assigns it to the ShortKey field.
func (o *LocaleTranslation) SetShortKey(v string) {
	o.ShortKey = &v
}

// GetReferenceText returns the ReferenceText field value if set, zero value otherwise.
func (o *LocaleTranslation) GetReferenceText() string {
	if o == nil || IsNil(o.ReferenceText) {
		var ret string
		return ret
	}
	return *o.ReferenceText
}

// GetReferenceTextOk returns a tuple with the ReferenceText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocaleTranslation) GetReferenceTextOk() (*string, bool) {
	if o == nil || IsNil(o.ReferenceText) {
		return nil, false
	}
	return o.ReferenceText, true
}

// HasReferenceText returns a boolean if a field has been set.
func (o *LocaleTranslation) HasReferenceText() bool {
	if o != nil && !IsNil(o.ReferenceText) {
		return true
	}

	return false
}

// SetReferenceText gets a reference to the given string and assigns it to the ReferenceText field.
func (o *LocaleTranslation) SetReferenceText(v string) {
	o.ReferenceText = &v
}

// GetTranslatedText returns the TranslatedText field value
func (o *LocaleTranslation) GetTranslatedText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TranslatedText
}

// GetTranslatedTextOk returns a tuple with the TranslatedText field value
// and a boolean to check if the value has been set.
func (o *LocaleTranslation) GetTranslatedTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TranslatedText, true
}

// SetTranslatedText sets field value
func (o *LocaleTranslation) SetTranslatedText(v string) {
	o.TranslatedText = v
}

func (o LocaleTranslation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocaleTranslation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["key"] = o.Key
	if !IsNil(o.ShortKey) {
		toSerialize["shortKey"] = o.ShortKey
	}
	if !IsNil(o.ReferenceText) {
		toSerialize["referenceText"] = o.ReferenceText
	}
	toSerialize["translatedText"] = o.TranslatedText
	return toSerialize, nil
}

type NullableLocaleTranslation struct {
	value *LocaleTranslation
	isSet bool
}

func (v NullableLocaleTranslation) Get() *LocaleTranslation {
	return v.value
}

func (v *NullableLocaleTranslation) Set(val *LocaleTranslation) {
	v.value = val
	v.isSet = true
}

func (v NullableLocaleTranslation) IsSet() bool {
	return v.isSet
}

func (v *NullableLocaleTranslation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocaleTranslation(val *LocaleTranslation) *NullableLocaleTranslation {
	return &NullableLocaleTranslation{value: val, isSet: true}
}

func (v NullableLocaleTranslation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocaleTranslation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


