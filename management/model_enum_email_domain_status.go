/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumEmailDomainStatus The status of the email domain ownership.
type EnumEmailDomainStatus string

// List of EnumEmailDomainStatus
const (
	ENUMEMAILDOMAINSTATUS_ACTIVE                EnumEmailDomainStatus = "ACTIVE"
	ENUMEMAILDOMAINSTATUS_VERIFICATION_REQUIRED EnumEmailDomainStatus = "VERIFICATION_REQUIRED"
)

// All allowed values of EnumEmailDomainStatus enum
var AllowedEnumEmailDomainStatusEnumValues = []EnumEmailDomainStatus{
	"ACTIVE",
	"VERIFICATION_REQUIRED",
}

func (v *EnumEmailDomainStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumEmailDomainStatus(value)
	for _, existing := range AllowedEnumEmailDomainStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumEmailDomainStatus(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumEmailDomainStatusFromValue returns a pointer to a valid EnumEmailDomainStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumEmailDomainStatusFromValue(v string) (*EnumEmailDomainStatus, error) {
	ev := EnumEmailDomainStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumEmailDomainStatus: valid values are %v", v, AllowedEnumEmailDomainStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumEmailDomainStatus) IsValid() bool {
	for _, existing := range AllowedEnumEmailDomainStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumEmailDomainStatus value
func (v EnumEmailDomainStatus) Ptr() *EnumEmailDomainStatus {
	return &v
}

type NullableEnumEmailDomainStatus struct {
	value *EnumEmailDomainStatus
	isSet bool
}

func (v NullableEnumEmailDomainStatus) Get() *EnumEmailDomainStatus {
	return v.value
}

func (v *NullableEnumEmailDomainStatus) Set(val *EnumEmailDomainStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumEmailDomainStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumEmailDomainStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumEmailDomainStatus(val *EnumEmailDomainStatus) *NullableEnumEmailDomainStatus {
	return &NullableEnumEmailDomainStatus{value: val, isSet: true}
}

func (v NullableEnumEmailDomainStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumEmailDomainStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
