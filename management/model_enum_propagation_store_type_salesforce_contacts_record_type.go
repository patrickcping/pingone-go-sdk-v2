/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumPropagationStoreTypeSalesforceContactsRecordType The type of Salesforce record. Options are either Lead or Contact.
type EnumPropagationStoreTypeSalesforceContactsRecordType string

// List of EnumPropagationStoreTypeSalesforceContactsRecordType
const (
	ENUMPROPAGATIONSTORETYPESALESFORCECONTACTSRECORDTYPE_LEAD    EnumPropagationStoreTypeSalesforceContactsRecordType = "Lead"
	ENUMPROPAGATIONSTORETYPESALESFORCECONTACTSRECORDTYPE_CONTACT EnumPropagationStoreTypeSalesforceContactsRecordType = "Contact"
)

// All allowed values of EnumPropagationStoreTypeSalesforceContactsRecordType enum
var AllowedEnumPropagationStoreTypeSalesforceContactsRecordTypeEnumValues = []EnumPropagationStoreTypeSalesforceContactsRecordType{
	"Lead",
	"Contact",
}

func (v *EnumPropagationStoreTypeSalesforceContactsRecordType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumPropagationStoreTypeSalesforceContactsRecordType(value)
	for _, existing := range AllowedEnumPropagationStoreTypeSalesforceContactsRecordTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumPropagationStoreTypeSalesforceContactsRecordType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumPropagationStoreTypeSalesforceContactsRecordTypeFromValue returns a pointer to a valid EnumPropagationStoreTypeSalesforceContactsRecordType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumPropagationStoreTypeSalesforceContactsRecordTypeFromValue(v string) (*EnumPropagationStoreTypeSalesforceContactsRecordType, error) {
	ev := EnumPropagationStoreTypeSalesforceContactsRecordType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumPropagationStoreTypeSalesforceContactsRecordType: valid values are %v", v, AllowedEnumPropagationStoreTypeSalesforceContactsRecordTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumPropagationStoreTypeSalesforceContactsRecordType) IsValid() bool {
	for _, existing := range AllowedEnumPropagationStoreTypeSalesforceContactsRecordTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumPropagationStoreTypeSalesforceContactsRecordType value
func (v EnumPropagationStoreTypeSalesforceContactsRecordType) Ptr() *EnumPropagationStoreTypeSalesforceContactsRecordType {
	return &v
}

type NullableEnumPropagationStoreTypeSalesforceContactsRecordType struct {
	value *EnumPropagationStoreTypeSalesforceContactsRecordType
	isSet bool
}

func (v NullableEnumPropagationStoreTypeSalesforceContactsRecordType) Get() *EnumPropagationStoreTypeSalesforceContactsRecordType {
	return v.value
}

func (v *NullableEnumPropagationStoreTypeSalesforceContactsRecordType) Set(val *EnumPropagationStoreTypeSalesforceContactsRecordType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumPropagationStoreTypeSalesforceContactsRecordType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumPropagationStoreTypeSalesforceContactsRecordType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumPropagationStoreTypeSalesforceContactsRecordType(val *EnumPropagationStoreTypeSalesforceContactsRecordType) *NullableEnumPropagationStoreTypeSalesforceContactsRecordType {
	return &NullableEnumPropagationStoreTypeSalesforceContactsRecordType{value: val, isSet: true}
}

func (v NullableEnumPropagationStoreTypeSalesforceContactsRecordType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumPropagationStoreTypeSalesforceContactsRecordType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
