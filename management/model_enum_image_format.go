/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumImageFormat A string that specifies the type of format used for the image. Options are jpg, png, and gif.
type EnumImageFormat string

// List of EnumImageFormat
const (
	ENUMIMAGEFORMAT_PNG EnumImageFormat = "png"
	ENUMIMAGEFORMAT_JPG EnumImageFormat = "jpg"
	ENUMIMAGEFORMAT_GIF EnumImageFormat = "gif"
)

// All allowed values of EnumImageFormat enum
var AllowedEnumImageFormatEnumValues = []EnumImageFormat{
	"png",
	"jpg",
	"gif",
}

func (v *EnumImageFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumImageFormat(value)
	for _, existing := range AllowedEnumImageFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumImageFormat(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumImageFormatFromValue returns a pointer to a valid EnumImageFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumImageFormatFromValue(v string) (*EnumImageFormat, error) {
	ev := EnumImageFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumImageFormat: valid values are %v", v, AllowedEnumImageFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumImageFormat) IsValid() bool {
	for _, existing := range AllowedEnumImageFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumImageFormat value
func (v EnumImageFormat) Ptr() *EnumImageFormat {
	return &v
}

type NullableEnumImageFormat struct {
	value *EnumImageFormat
	isSet bool
}

func (v NullableEnumImageFormat) Get() *EnumImageFormat {
	return v.value
}

func (v *NullableEnumImageFormat) Set(val *EnumImageFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumImageFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumImageFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumImageFormat(val *EnumImageFormat) *NullableEnumImageFormat {
	return &NullableEnumImageFormat{value: val, isSet: true}
}

func (v NullableEnumImageFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumImageFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
