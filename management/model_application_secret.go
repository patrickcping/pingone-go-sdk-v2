/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the ApplicationSecret type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationSecret{}

// ApplicationSecret struct for ApplicationSecret
type ApplicationSecret struct {
	Links       *map[string]LinksHATEOASValue `json:"_links,omitempty"`
	Environment *ObjectEnvironment            `json:"environment,omitempty"`
	// A string that specifies the application secret ID used to authenticate to the authorization server.
	Secret   *string                    `json:"secret,omitempty"`
	Previous *ApplicationSecretPrevious `json:"previous,omitempty"`
}

// NewApplicationSecret instantiates a new ApplicationSecret object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationSecret() *ApplicationSecret {
	this := ApplicationSecret{}
	return &this
}

// NewApplicationSecretWithDefaults instantiates a new ApplicationSecret object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationSecretWithDefaults() *ApplicationSecret {
	this := ApplicationSecret{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ApplicationSecret) GetLinks() map[string]LinksHATEOASValue {
	if o == nil || IsNil(o.Links) {
		var ret map[string]LinksHATEOASValue
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSecret) GetLinksOk() (*map[string]LinksHATEOASValue, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ApplicationSecret) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]LinksHATEOASValue and assigns it to the Links field.
func (o *ApplicationSecret) SetLinks(v map[string]LinksHATEOASValue) {
	o.Links = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *ApplicationSecret) GetEnvironment() ObjectEnvironment {
	if o == nil || IsNil(o.Environment) {
		var ret ObjectEnvironment
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSecret) GetEnvironmentOk() (*ObjectEnvironment, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *ApplicationSecret) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given ObjectEnvironment and assigns it to the Environment field.
func (o *ApplicationSecret) SetEnvironment(v ObjectEnvironment) {
	o.Environment = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *ApplicationSecret) GetSecret() string {
	if o == nil || IsNil(o.Secret) {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSecret) GetSecretOk() (*string, bool) {
	if o == nil || IsNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *ApplicationSecret) HasSecret() bool {
	if o != nil && !IsNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *ApplicationSecret) SetSecret(v string) {
	o.Secret = &v
}

// GetPrevious returns the Previous field value if set, zero value otherwise.
func (o *ApplicationSecret) GetPrevious() ApplicationSecretPrevious {
	if o == nil || IsNil(o.Previous) {
		var ret ApplicationSecretPrevious
		return ret
	}
	return *o.Previous
}

// GetPreviousOk returns a tuple with the Previous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationSecret) GetPreviousOk() (*ApplicationSecretPrevious, bool) {
	if o == nil || IsNil(o.Previous) {
		return nil, false
	}
	return o.Previous, true
}

// HasPrevious returns a boolean if a field has been set.
func (o *ApplicationSecret) HasPrevious() bool {
	if o != nil && !IsNil(o.Previous) {
		return true
	}

	return false
}

// SetPrevious gets a reference to the given ApplicationSecretPrevious and assigns it to the Previous field.
func (o *ApplicationSecret) SetPrevious(v ApplicationSecretPrevious) {
	o.Previous = &v
}

func (o ApplicationSecret) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationSecret) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	if !IsNil(o.Previous) {
		toSerialize["previous"] = o.Previous
	}
	return toSerialize, nil
}

type NullableApplicationSecret struct {
	value *ApplicationSecret
	isSet bool
}

func (v NullableApplicationSecret) Get() *ApplicationSecret {
	return v.value
}

func (v *NullableApplicationSecret) Set(val *ApplicationSecret) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationSecret) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationSecret) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationSecret(val *ApplicationSecret) *NullableApplicationSecret {
	return &NullableApplicationSecret{value: val, isSet: true}
}

func (v NullableApplicationSecret) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationSecret) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
