/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumTemplateName The name of the template
type EnumTemplateName string

// List of EnumTemplateName
const (
	ENUMTEMPLATENAME_CREDENTIAL_ISSUED          EnumTemplateName = "credential_issued"
	ENUMTEMPLATENAME_CREDENTIAL_REVOKED         EnumTemplateName = "credential_revoked"
	ENUMTEMPLATENAME_CREDENTIAL_UPDATED         EnumTemplateName = "credential_updated"
	ENUMTEMPLATENAME_CREDENTIAL_VERIFICATION    EnumTemplateName = "credential_verification"
	ENUMTEMPLATENAME_DEVICE_PAIRING             EnumTemplateName = "device_pairing"
	ENUMTEMPLATENAME_DIGITAL_WALLET_PAIRING     EnumTemplateName = "digital_wallet_pairing"
	ENUMTEMPLATENAME_EMAIL_VERIFICATION_ADMIN   EnumTemplateName = "email_verification_admin"
	ENUMTEMPLATENAME_EMAIL_VERIFICATION_USER    EnumTemplateName = "email_verification_user"
	ENUMTEMPLATENAME_EMAIL_PHONE_VERIFICATION   EnumTemplateName = "email_phone_verification"
	ENUMTEMPLATENAME_GENERAL                    EnumTemplateName = "general"
	ENUMTEMPLATENAME_ID_VERIFICATION            EnumTemplateName = "id_verification"
	ENUMTEMPLATENAME_NEW_DEVICE_PAIRED          EnumTemplateName = "new_device_paired"
	ENUMTEMPLATENAME_RECOVERY_CODE_TEMPLATE     EnumTemplateName = "recovery_code_template"
	ENUMTEMPLATENAME_STRONG_AUTHENTICATION      EnumTemplateName = "strong_authentication"
	ENUMTEMPLATENAME_TRANSACTION                EnumTemplateName = "transaction"
	ENUMTEMPLATENAME_VERIFICATION_CODE_TEMPLATE EnumTemplateName = "verification_code_template"
)

// All allowed values of EnumTemplateName enum
var AllowedEnumTemplateNameEnumValues = []EnumTemplateName{
	"credential_issued",
	"credential_revoked",
	"credential_updated",
	"credential_verification",
	"device_pairing",
	"digital_wallet_pairing",
	"email_verification_admin",
	"email_verification_user",
	"email_phone_verification",
	"general",
	"id_verification",
	"new_device_paired",
	"recovery_code_template",
	"strong_authentication",
	"transaction",
	"verification_code_template",
}

func (v *EnumTemplateName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumTemplateName(value)
	for _, existing := range AllowedEnumTemplateNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumTemplateName(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumTemplateNameFromValue returns a pointer to a valid EnumTemplateName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumTemplateNameFromValue(v string) (*EnumTemplateName, error) {
	ev := EnumTemplateName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumTemplateName: valid values are %v", v, AllowedEnumTemplateNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumTemplateName) IsValid() bool {
	for _, existing := range AllowedEnumTemplateNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumTemplateName value
func (v EnumTemplateName) Ptr() *EnumTemplateName {
	return &v
}

type NullableEnumTemplateName struct {
	value *EnumTemplateName
	isSet bool
}

func (v NullableEnumTemplateName) Get() *EnumTemplateName {
	return v.value
}

func (v *NullableEnumTemplateName) Set(val *EnumTemplateName) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumTemplateName) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumTemplateName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumTemplateName(val *EnumTemplateName) *NullableEnumTemplateName {
	return &NullableEnumTemplateName{value: val, isSet: true}
}

func (v NullableEnumTemplateName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumTemplateName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
