/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumProductType A string that specifies the Ping Identity product type. Options for PingOne platform products are PING_ONE_DAVINCI, PING_ONE_MFA, PING_ONE_RISK, PING_ONE_VERIFY, PING_ONE_CREDENTIALS, PING_ONE_AUTHORIZE and PING_ONE_BASE. The PING_ONE_BASE product represents the default set of services that an environment can use on the PingOne platform. Options for other Ping Identity products are PING_FEDERATE, PING_ACCESS, PING_DIRECTORY, PING_AUTHORIZE, PING_ID, PING_INTELLIGENCE, and PING_CENTRAL
type EnumProductType string

// List of EnumProductType
const (
	ENUMPRODUCTTYPE_ONE_MFA            EnumProductType = "PING_ONE_MFA"
	ENUMPRODUCTTYPE_ONE_DAVINCI        EnumProductType = "PING_ONE_DAVINCI"
	ENUMPRODUCTTYPE_ONE_ORCHESTRATE    EnumProductType = "PING_ONE_ORCHESTRATE"
	ENUMPRODUCTTYPE_ONE_RISK           EnumProductType = "PING_ONE_RISK"
	ENUMPRODUCTTYPE_ONE_FRAUD          EnumProductType = "PING_ONE_FRAUD"
	ENUMPRODUCTTYPE_ONE_PROVISIONING   EnumProductType = "PING_ONE_PROVISIONING"
	ENUMPRODUCTTYPE_DATA_SYNC          EnumProductType = "PING_DATA_SYNC"
	ENUMPRODUCTTYPE_DATA_GOVERNANCE    EnumProductType = "PING_DATA_GOVERNANCE"
	ENUMPRODUCTTYPE_ONE_FOR_ENTERPRISE EnumProductType = "PING_ONE_FOR_ENTERPRISE"
	ENUMPRODUCTTYPE_ID_SDK             EnumProductType = "PING_ID_SDK"
	ENUMPRODUCTTYPE_ONE_FOR_SAAS       EnumProductType = "PING_ONE_FOR_SAAS"
	ENUMPRODUCTTYPE_ONE_VERIFY         EnumProductType = "PING_ONE_VERIFY"
	ENUMPRODUCTTYPE_ONE_CREDENTIALS    EnumProductType = "PING_ONE_CREDENTIALS"
	ENUMPRODUCTTYPE_ONE_AUTHORIZE      EnumProductType = "PING_ONE_AUTHORIZE"
	ENUMPRODUCTTYPE_ONE_BASE           EnumProductType = "PING_ONE_BASE"
	ENUMPRODUCTTYPE_FEDERATE           EnumProductType = "PING_FEDERATE"
	ENUMPRODUCTTYPE_ACCESS             EnumProductType = "PING_ACCESS"
	ENUMPRODUCTTYPE_DIRECTORY          EnumProductType = "PING_DIRECTORY"
	ENUMPRODUCTTYPE_AUTHORIZE          EnumProductType = "PING_AUTHORIZE"
	ENUMPRODUCTTYPE_ID                 EnumProductType = "PING_ID"
	ENUMPRODUCTTYPE_INTELLIGENCE       EnumProductType = "PING_INTELLIGENCE"
	ENUMPRODUCTTYPE_CENTRAL            EnumProductType = "PING_CENTRAL"
)

// All allowed values of EnumProductType enum
var AllowedEnumProductTypeEnumValues = []EnumProductType{
	"PING_ONE_MFA",
	"PING_ONE_DAVINCI",
	"PING_ONE_ORCHESTRATE",
	"PING_ONE_RISK",
	"PING_ONE_FRAUD",
	"PING_ONE_PROVISIONING",
	"PING_DATA_SYNC",
	"PING_DATA_GOVERNANCE",
	"PING_ONE_FOR_ENTERPRISE",
	"PING_ID_SDK",
	"PING_ONE_FOR_SAAS",
	"PING_ONE_VERIFY",
	"PING_ONE_CREDENTIALS",
	"PING_ONE_AUTHORIZE",
	"PING_ONE_BASE",
	"PING_FEDERATE",
	"PING_ACCESS",
	"PING_DIRECTORY",
	"PING_AUTHORIZE",
	"PING_ID",
	"PING_INTELLIGENCE",
	"PING_CENTRAL",
}

func (v *EnumProductType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumProductType(value)
	for _, existing := range AllowedEnumProductTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumProductType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumProductTypeFromValue returns a pointer to a valid EnumProductType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumProductTypeFromValue(v string) (*EnumProductType, error) {
	ev := EnumProductType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumProductType: valid values are %v", v, AllowedEnumProductTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumProductType) IsValid() bool {
	for _, existing := range AllowedEnumProductTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumProductType value
func (v EnumProductType) Ptr() *EnumProductType {
	return &v
}

type NullableEnumProductType struct {
	value *EnumProductType
	isSet bool
}

func (v NullableEnumProductType) Get() *EnumProductType {
	return v.value
}

func (v *NullableEnumProductType) Set(val *EnumProductType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumProductType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumProductType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumProductType(val *EnumProductType) *NullableEnumProductType {
	return &NullableEnumProductType{value: val, isSet: true}
}

func (v NullableEnumProductType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumProductType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
