/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"time"
)

// checks if the NotificationsPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificationsPolicy{}

// NotificationsPolicy struct for NotificationsPolicy
type NotificationsPolicy struct {
	Links *map[string]LinksHATEOASValue `json:"_links,omitempty"`
	// The time the resource was created.
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	// The time the resource was last updated.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// A string that specifies the resourceâ€™s unique identifier.
	Id *string `json:"id,omitempty"`
	// The name to use for the notification policy. Must be unique among the notification policies in the environment.
	Name string `json:"name"`
	// Indication of whether this policy is the default notification policy for the environment. If the parameter is not provided, the value used is `false`
	Default      *bool                            `json:"default,omitempty"`
	CountryLimit *NotificationsPolicyCountryLimit `json:"countryLimit,omitempty"`
	// Collection of objects that define the SMS/Voice limits. Each object contain the following elements- `type`, `deliveryMethods`, `total`. Currently, a policy can contain ony one such object. Note that instead of `total`, you can use the pair of fields- `claimed` and `unclaimed`.
	Quotas []NotificationsPolicyQuotasInner `json:"quotas"`
}

// NewNotificationsPolicy instantiates a new NotificationsPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationsPolicy(name string, quotas []NotificationsPolicyQuotasInner) *NotificationsPolicy {
	this := NotificationsPolicy{}
	this.Name = name
	var default_ bool = false
	this.Default = &default_
	this.Quotas = quotas
	return &this
}

// NewNotificationsPolicyWithDefaults instantiates a new NotificationsPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationsPolicyWithDefaults() *NotificationsPolicy {
	this := NotificationsPolicy{}
	var default_ bool = false
	this.Default = &default_
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *NotificationsPolicy) GetLinks() map[string]LinksHATEOASValue {
	if o == nil || IsNil(o.Links) {
		var ret map[string]LinksHATEOASValue
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsPolicy) GetLinksOk() (*map[string]LinksHATEOASValue, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *NotificationsPolicy) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]LinksHATEOASValue and assigns it to the Links field.
func (o *NotificationsPolicy) SetLinks(v map[string]LinksHATEOASValue) {
	o.Links = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *NotificationsPolicy) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsPolicy) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *NotificationsPolicy) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *NotificationsPolicy) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *NotificationsPolicy) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsPolicy) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *NotificationsPolicy) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *NotificationsPolicy) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NotificationsPolicy) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsPolicy) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NotificationsPolicy) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NotificationsPolicy) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *NotificationsPolicy) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NotificationsPolicy) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NotificationsPolicy) SetName(v string) {
	o.Name = v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *NotificationsPolicy) GetDefault() bool {
	if o == nil || IsNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsPolicy) GetDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *NotificationsPolicy) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *NotificationsPolicy) SetDefault(v bool) {
	o.Default = &v
}

// GetCountryLimit returns the CountryLimit field value if set, zero value otherwise.
func (o *NotificationsPolicy) GetCountryLimit() NotificationsPolicyCountryLimit {
	if o == nil || IsNil(o.CountryLimit) {
		var ret NotificationsPolicyCountryLimit
		return ret
	}
	return *o.CountryLimit
}

// GetCountryLimitOk returns a tuple with the CountryLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationsPolicy) GetCountryLimitOk() (*NotificationsPolicyCountryLimit, bool) {
	if o == nil || IsNil(o.CountryLimit) {
		return nil, false
	}
	return o.CountryLimit, true
}

// HasCountryLimit returns a boolean if a field has been set.
func (o *NotificationsPolicy) HasCountryLimit() bool {
	if o != nil && !IsNil(o.CountryLimit) {
		return true
	}

	return false
}

// SetCountryLimit gets a reference to the given NotificationsPolicyCountryLimit and assigns it to the CountryLimit field.
func (o *NotificationsPolicy) SetCountryLimit(v NotificationsPolicyCountryLimit) {
	o.CountryLimit = &v
}

// GetQuotas returns the Quotas field value
func (o *NotificationsPolicy) GetQuotas() []NotificationsPolicyQuotasInner {
	if o == nil {
		var ret []NotificationsPolicyQuotasInner
		return ret
	}

	return o.Quotas
}

// GetQuotasOk returns a tuple with the Quotas field value
// and a boolean to check if the value has been set.
func (o *NotificationsPolicy) GetQuotasOk() ([]NotificationsPolicyQuotasInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Quotas, true
}

// SetQuotas sets field value
func (o *NotificationsPolicy) SetQuotas(v []NotificationsPolicyQuotasInner) {
	o.Quotas = v
}

func (o NotificationsPolicy) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificationsPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.CountryLimit) {
		toSerialize["countryLimit"] = o.CountryLimit
	}
	toSerialize["quotas"] = o.Quotas
	return toSerialize, nil
}

type NullableNotificationsPolicy struct {
	value *NotificationsPolicy
	isSet bool
}

func (v NullableNotificationsPolicy) Get() *NotificationsPolicy {
	return v.value
}

func (v *NullableNotificationsPolicy) Set(val *NotificationsPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationsPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationsPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationsPolicy(val *NotificationsPolicy) *NullableNotificationsPolicy {
	return &NullableNotificationsPolicy{value: val, isSet: true}
}

func (v NullableNotificationsPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationsPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
