/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumRoleName The name of the role
type EnumRoleName string

// List of EnumRoleName
const (
	ENUMROLENAME_ADVANCED_IDENTITY_CLOUD_SUPER_ADMIN    EnumRoleName = "Advanced Identity Cloud Super Admin"
	ENUMROLENAME_ADVANCED_IDENTITY_CLOUD_TENANT_ADMIN   EnumRoleName = "Advanced Identity Cloud Tenant Admin"
	ENUMROLENAME_APPLICATION_OWNER                      EnumRoleName = "Application Owner"
	ENUMROLENAME_CLIENT_APPLICATION_DEVELOPER           EnumRoleName = "Client Application Developer"
	ENUMROLENAME_CONFIGURATION_READ_ONLY                EnumRoleName = "Configuration Read Only"
	ENUMROLENAME_CUSTOM_ROLES_ADMIN                     EnumRoleName = "Custom Roles Admin"
	ENUMROLENAME_DA_VINCI_ADMIN_READ_ONLY               EnumRoleName = "DaVinci Admin Read Only"
	ENUMROLENAME_DA_VINCI_ADMIN                         EnumRoleName = "DaVinci Admin"
	ENUMROLENAME_ENVIRONMENT_ADMIN                      EnumRoleName = "Environment Admin"
	ENUMROLENAME_IDENTITY_DATA_ADMIN                    EnumRoleName = "Identity Data Admin"
	ENUMROLENAME_IDENTITY_DATA_READ_ONLY                EnumRoleName = "Identity Data Read Only"
	ENUMROLENAME_ORGANIZATION_ADMIN                     EnumRoleName = "Organization Admin"
	ENUMROLENAME_PING_FEDERATE_ADMINISTRATOR            EnumRoleName = "PingFederate Administrator"
	ENUMROLENAME_PING_FEDERATE_AUDITOR                  EnumRoleName = "PingFederate Auditor"
	ENUMROLENAME_PING_FEDERATE_CRYPTO_ADMINISTRATOR     EnumRoleName = "PingFederate Crypto Administrator"
	ENUMROLENAME_PING_FEDERATE_EXPRESSION_ADMINISTRATOR EnumRoleName = "PingFederate Expression Administrator"
	ENUMROLENAME_PING_FEDERATE_USER_ADMINISTRATOR       EnumRoleName = "PingFederate User Administrator"
)

// All allowed values of EnumRoleName enum
var AllowedEnumRoleNameEnumValues = []EnumRoleName{
	"Advanced Identity Cloud Super Admin",
	"Advanced Identity Cloud Tenant Admin",
	"Application Owner",
	"Client Application Developer",
	"Configuration Read Only",
	"Custom Roles Admin",
	"DaVinci Admin Read Only",
	"DaVinci Admin",
	"Environment Admin",
	"Identity Data Admin",
	"Identity Data Read Only",
	"Organization Admin",
	"PingFederate Administrator",
	"PingFederate Auditor",
	"PingFederate Crypto Administrator",
	"PingFederate Expression Administrator",
	"PingFederate User Administrator",
}

func (v *EnumRoleName) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumRoleName(value)
	for _, existing := range AllowedEnumRoleNameEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumRoleName(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumRoleNameFromValue returns a pointer to a valid EnumRoleName
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumRoleNameFromValue(v string) (*EnumRoleName, error) {
	ev := EnumRoleName(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumRoleName: valid values are %v", v, AllowedEnumRoleNameEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumRoleName) IsValid() bool {
	for _, existing := range AllowedEnumRoleNameEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumRoleName value
func (v EnumRoleName) Ptr() *EnumRoleName {
	return &v
}

type NullableEnumRoleName struct {
	value *EnumRoleName
	isSet bool
}

func (v NullableEnumRoleName) Get() *EnumRoleName {
	return v.value
}

func (v *NullableEnumRoleName) Set(val *EnumRoleName) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumRoleName) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumRoleName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumRoleName(val *EnumRoleName) *NullableEnumRoleName {
	return &NullableEnumRoleName{value: val, isSet: true}
}

func (v NullableEnumRoleName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumRoleName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
