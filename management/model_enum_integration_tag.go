/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumIntegrationTag Tag to apply to the integration metadata. Can include `SSO`, `AUTHENTICATION`, `MFA`, `INTELLIGENCE`, `GOVERNANCE`, `IDAAS`, `ACCESS`, `DIRECTORY`, or `PROVISIONING`.
type EnumIntegrationTag string

// List of EnumIntegrationTag
const (
	ENUMINTEGRATIONTAG_SSO            EnumIntegrationTag = "SSO"
	ENUMINTEGRATIONTAG_AUTHENTICATION EnumIntegrationTag = "AUTHENTICATION"
	ENUMINTEGRATIONTAG_MFA            EnumIntegrationTag = "MFA"
	ENUMINTEGRATIONTAG_INTELLIGENCE   EnumIntegrationTag = "INTELLIGENCE"
	ENUMINTEGRATIONTAG_GOVERNANCE     EnumIntegrationTag = "GOVERNANCE"
	ENUMINTEGRATIONTAG_IDAAS          EnumIntegrationTag = "IDAAS"
	ENUMINTEGRATIONTAG_ACCESS         EnumIntegrationTag = "ACCESS"
	ENUMINTEGRATIONTAG_DIRECTORY      EnumIntegrationTag = "DIRECTORY"
	ENUMINTEGRATIONTAG_PROVISIONING   EnumIntegrationTag = "PROVISIONING"
)

// All allowed values of EnumIntegrationTag enum
var AllowedEnumIntegrationTagEnumValues = []EnumIntegrationTag{
	"SSO",
	"AUTHENTICATION",
	"MFA",
	"INTELLIGENCE",
	"GOVERNANCE",
	"IDAAS",
	"ACCESS",
	"DIRECTORY",
	"PROVISIONING",
}

func (v *EnumIntegrationTag) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumIntegrationTag(value)
	for _, existing := range AllowedEnumIntegrationTagEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumIntegrationTag(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumIntegrationTagFromValue returns a pointer to a valid EnumIntegrationTag
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumIntegrationTagFromValue(v string) (*EnumIntegrationTag, error) {
	ev := EnumIntegrationTag(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumIntegrationTag: valid values are %v", v, AllowedEnumIntegrationTagEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumIntegrationTag) IsValid() bool {
	for _, existing := range AllowedEnumIntegrationTagEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumIntegrationTag value
func (v EnumIntegrationTag) Ptr() *EnumIntegrationTag {
	return &v
}

type NullableEnumIntegrationTag struct {
	value *EnumIntegrationTag
	isSet bool
}

func (v NullableEnumIntegrationTag) Get() *EnumIntegrationTag {
	return v.value
}

func (v *NullableEnumIntegrationTag) Set(val *EnumIntegrationTag) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumIntegrationTag) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumIntegrationTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumIntegrationTag(val *EnumIntegrationTag) *NullableEnumIntegrationTag {
	return &NullableEnumIntegrationTag{value: val, isSet: true}
}

func (v NullableEnumIntegrationTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumIntegrationTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
