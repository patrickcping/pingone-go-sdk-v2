/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"time"
)

// checks if the Agreement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Agreement{}

// Agreement struct for Agreement
type Agreement struct {
	Links *map[string]LinksHATEOASValue `json:"_links,omitempty"`
	// The time the consent count metric was last updated. This value is typically updated once every 24 hours.
	ConsentsAggregatedAt *time.Time `json:"consentsAggregatedAt,omitempty"`
	// A string that specifies the description of the agreement.
	Description *string `json:"description,omitempty"`
	// A boolean that specifies the current enabled state of the agreement. This is a required property. The agreement must support the default language to be enabled. It cannot be disabled if it is referenced by a sign-on action. When an agreement is disabled, it is not used anywhere it is configured across PingOne.
	Enabled     bool               `json:"enabled"`
	Environment *ObjectEnvironment `json:"environment,omitempty"`
	// An integer that identifies the number of users who have consented to the agreement, but their consent has expired. This value is last calculated at the consentCountsUpdatedAt time.
	TotalExpiredConsents *int32 `json:"totalExpiredConsents,omitempty"`
	// A string that specifies the agreement ID.
	Id *string `json:"id,omitempty"`
	// A string that specifies the name of the agreement resource. This is a required property.
	Name string `json:"name"`
	// A number that represents the number of days until a consent to this agreement expires.
	ReconsentPeriodDays *float32 `json:"reconsentPeriodDays,omitempty"`
	// An integer that identifies the total number of users who have consented to the agreement. This value is last calculated at the consentCountsUpdatedAt time.
	TotalConsents *int32 `json:"totalConsents,omitempty"`
}

// NewAgreement instantiates a new Agreement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAgreement(enabled bool, name string) *Agreement {
	this := Agreement{}
	this.Enabled = enabled
	this.Name = name
	return &this
}

// NewAgreementWithDefaults instantiates a new Agreement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAgreementWithDefaults() *Agreement {
	this := Agreement{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *Agreement) GetLinks() map[string]LinksHATEOASValue {
	if o == nil || IsNil(o.Links) {
		var ret map[string]LinksHATEOASValue
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetLinksOk() (*map[string]LinksHATEOASValue, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *Agreement) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]LinksHATEOASValue and assigns it to the Links field.
func (o *Agreement) SetLinks(v map[string]LinksHATEOASValue) {
	o.Links = &v
}

// GetConsentsAggregatedAt returns the ConsentsAggregatedAt field value if set, zero value otherwise.
func (o *Agreement) GetConsentsAggregatedAt() time.Time {
	if o == nil || IsNil(o.ConsentsAggregatedAt) {
		var ret time.Time
		return ret
	}
	return *o.ConsentsAggregatedAt
}

// GetConsentsAggregatedAtOk returns a tuple with the ConsentsAggregatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetConsentsAggregatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ConsentsAggregatedAt) {
		return nil, false
	}
	return o.ConsentsAggregatedAt, true
}

// HasConsentsAggregatedAt returns a boolean if a field has been set.
func (o *Agreement) HasConsentsAggregatedAt() bool {
	if o != nil && !IsNil(o.ConsentsAggregatedAt) {
		return true
	}

	return false
}

// SetConsentsAggregatedAt gets a reference to the given time.Time and assigns it to the ConsentsAggregatedAt field.
func (o *Agreement) SetConsentsAggregatedAt(v time.Time) {
	o.ConsentsAggregatedAt = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Agreement) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Agreement) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Agreement) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value
func (o *Agreement) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *Agreement) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *Agreement) SetEnabled(v bool) {
	o.Enabled = v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *Agreement) GetEnvironment() ObjectEnvironment {
	if o == nil || IsNil(o.Environment) {
		var ret ObjectEnvironment
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetEnvironmentOk() (*ObjectEnvironment, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *Agreement) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given ObjectEnvironment and assigns it to the Environment field.
func (o *Agreement) SetEnvironment(v ObjectEnvironment) {
	o.Environment = &v
}

// GetTotalExpiredConsents returns the TotalExpiredConsents field value if set, zero value otherwise.
func (o *Agreement) GetTotalExpiredConsents() int32 {
	if o == nil || IsNil(o.TotalExpiredConsents) {
		var ret int32
		return ret
	}
	return *o.TotalExpiredConsents
}

// GetTotalExpiredConsentsOk returns a tuple with the TotalExpiredConsents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetTotalExpiredConsentsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalExpiredConsents) {
		return nil, false
	}
	return o.TotalExpiredConsents, true
}

// HasTotalExpiredConsents returns a boolean if a field has been set.
func (o *Agreement) HasTotalExpiredConsents() bool {
	if o != nil && !IsNil(o.TotalExpiredConsents) {
		return true
	}

	return false
}

// SetTotalExpiredConsents gets a reference to the given int32 and assigns it to the TotalExpiredConsents field.
func (o *Agreement) SetTotalExpiredConsents(v int32) {
	o.TotalExpiredConsents = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Agreement) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Agreement) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Agreement) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Agreement) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Agreement) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Agreement) SetName(v string) {
	o.Name = v
}

// GetReconsentPeriodDays returns the ReconsentPeriodDays field value if set, zero value otherwise.
func (o *Agreement) GetReconsentPeriodDays() float32 {
	if o == nil || IsNil(o.ReconsentPeriodDays) {
		var ret float32
		return ret
	}
	return *o.ReconsentPeriodDays
}

// GetReconsentPeriodDaysOk returns a tuple with the ReconsentPeriodDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetReconsentPeriodDaysOk() (*float32, bool) {
	if o == nil || IsNil(o.ReconsentPeriodDays) {
		return nil, false
	}
	return o.ReconsentPeriodDays, true
}

// HasReconsentPeriodDays returns a boolean if a field has been set.
func (o *Agreement) HasReconsentPeriodDays() bool {
	if o != nil && !IsNil(o.ReconsentPeriodDays) {
		return true
	}

	return false
}

// SetReconsentPeriodDays gets a reference to the given float32 and assigns it to the ReconsentPeriodDays field.
func (o *Agreement) SetReconsentPeriodDays(v float32) {
	o.ReconsentPeriodDays = &v
}

// GetTotalConsents returns the TotalConsents field value if set, zero value otherwise.
func (o *Agreement) GetTotalConsents() int32 {
	if o == nil || IsNil(o.TotalConsents) {
		var ret int32
		return ret
	}
	return *o.TotalConsents
}

// GetTotalConsentsOk returns a tuple with the TotalConsents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Agreement) GetTotalConsentsOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalConsents) {
		return nil, false
	}
	return o.TotalConsents, true
}

// HasTotalConsents returns a boolean if a field has been set.
func (o *Agreement) HasTotalConsents() bool {
	if o != nil && !IsNil(o.TotalConsents) {
		return true
	}

	return false
}

// SetTotalConsents gets a reference to the given int32 and assigns it to the TotalConsents field.
func (o *Agreement) SetTotalConsents(v int32) {
	o.TotalConsents = &v
}

func (o Agreement) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Agreement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.ConsentsAggregatedAt) {
		toSerialize["consentsAggregatedAt"] = o.ConsentsAggregatedAt
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.TotalExpiredConsents) {
		toSerialize["totalExpiredConsents"] = o.TotalExpiredConsents
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.ReconsentPeriodDays) {
		toSerialize["reconsentPeriodDays"] = o.ReconsentPeriodDays
	}
	if !IsNil(o.TotalConsents) {
		toSerialize["totalConsents"] = o.TotalConsents
	}
	return toSerialize, nil
}

type NullableAgreement struct {
	value *Agreement
	isSet bool
}

func (v NullableAgreement) Get() *Agreement {
	return v.value
}

func (v *NullableAgreement) Set(val *Agreement) {
	v.value = val
	v.isSet = true
}

func (v NullableAgreement) IsSet() bool {
	return v.isSet
}

func (v *NullableAgreement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAgreement(val *Agreement) *NullableAgreement {
	return &NullableAgreement{value: val, isSet: true}
}

func (v NullableAgreement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAgreement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
