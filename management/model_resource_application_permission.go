/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the ResourceApplicationPermission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceApplicationPermission{}

// ResourceApplicationPermission struct for ResourceApplicationPermission
type ResourceApplicationPermission struct {
	// The action associated with this permission.
	Action string `json:"action"`
	// The resource's description.
	Description *string `json:"description,omitempty"`
	// The resource's unique identifier.
	Id *string `json:"id,omitempty"`
	// The resource.name:action pair of the permission.
	Key            *string                                      `json:"key,omitempty"`
	Resource       *ResourceApplicationPermissionResource       `json:"resource,omitempty"`
	ResourceServer *ResourceApplicationPermissionResourceServer `json:"resourceServer,omitempty"`
}

// NewResourceApplicationPermission instantiates a new ResourceApplicationPermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceApplicationPermission(action string) *ResourceApplicationPermission {
	this := ResourceApplicationPermission{}
	this.Action = action
	return &this
}

// NewResourceApplicationPermissionWithDefaults instantiates a new ResourceApplicationPermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceApplicationPermissionWithDefaults() *ResourceApplicationPermission {
	this := ResourceApplicationPermission{}
	return &this
}

// GetAction returns the Action field value
func (o *ResourceApplicationPermission) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *ResourceApplicationPermission) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *ResourceApplicationPermission) SetAction(v string) {
	o.Action = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ResourceApplicationPermission) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceApplicationPermission) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ResourceApplicationPermission) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ResourceApplicationPermission) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResourceApplicationPermission) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceApplicationPermission) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResourceApplicationPermission) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ResourceApplicationPermission) SetId(v string) {
	o.Id = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ResourceApplicationPermission) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceApplicationPermission) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ResourceApplicationPermission) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *ResourceApplicationPermission) SetKey(v string) {
	o.Key = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *ResourceApplicationPermission) GetResource() ResourceApplicationPermissionResource {
	if o == nil || IsNil(o.Resource) {
		var ret ResourceApplicationPermissionResource
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceApplicationPermission) GetResourceOk() (*ResourceApplicationPermissionResource, bool) {
	if o == nil || IsNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *ResourceApplicationPermission) HasResource() bool {
	if o != nil && !IsNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given ResourceApplicationPermissionResource and assigns it to the Resource field.
func (o *ResourceApplicationPermission) SetResource(v ResourceApplicationPermissionResource) {
	o.Resource = &v
}

// GetResourceServer returns the ResourceServer field value if set, zero value otherwise.
func (o *ResourceApplicationPermission) GetResourceServer() ResourceApplicationPermissionResourceServer {
	if o == nil || IsNil(o.ResourceServer) {
		var ret ResourceApplicationPermissionResourceServer
		return ret
	}
	return *o.ResourceServer
}

// GetResourceServerOk returns a tuple with the ResourceServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceApplicationPermission) GetResourceServerOk() (*ResourceApplicationPermissionResourceServer, bool) {
	if o == nil || IsNil(o.ResourceServer) {
		return nil, false
	}
	return o.ResourceServer, true
}

// HasResourceServer returns a boolean if a field has been set.
func (o *ResourceApplicationPermission) HasResourceServer() bool {
	if o != nil && !IsNil(o.ResourceServer) {
		return true
	}

	return false
}

// SetResourceServer gets a reference to the given ResourceApplicationPermissionResourceServer and assigns it to the ResourceServer field.
func (o *ResourceApplicationPermission) SetResourceServer(v ResourceApplicationPermissionResourceServer) {
	o.ResourceServer = &v
}

func (o ResourceApplicationPermission) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceApplicationPermission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !IsNil(o.ResourceServer) {
		toSerialize["resourceServer"] = o.ResourceServer
	}
	return toSerialize, nil
}

type NullableResourceApplicationPermission struct {
	value *ResourceApplicationPermission
	isSet bool
}

func (v NullableResourceApplicationPermission) Get() *ResourceApplicationPermission {
	return v.value
}

func (v *NullableResourceApplicationPermission) Set(val *ResourceApplicationPermission) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceApplicationPermission) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceApplicationPermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceApplicationPermission(val *ResourceApplicationPermission) *NullableResourceApplicationPermission {
	return &NullableResourceApplicationPermission{value: val, isSet: true}
}

func (v NullableResourceApplicationPermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceApplicationPermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
