/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumLicenseStatus A string that specifies the status of the license. Options are `ACTIVE`, `EXPIRED`, `FUTURE` and `TERMINATED`.
type EnumLicenseStatus string

// List of EnumLicenseStatus
const (
	ENUMLICENSESTATUS_ACTIVE     EnumLicenseStatus = "ACTIVE"
	ENUMLICENSESTATUS_EXPIRED    EnumLicenseStatus = "EXPIRED"
	ENUMLICENSESTATUS_FUTURE     EnumLicenseStatus = "FUTURE"
	ENUMLICENSESTATUS_TERMINATED EnumLicenseStatus = "TERMINATED"
)

// All allowed values of EnumLicenseStatus enum
var AllowedEnumLicenseStatusEnumValues = []EnumLicenseStatus{
	"ACTIVE",
	"EXPIRED",
	"FUTURE",
	"TERMINATED",
}

func (v *EnumLicenseStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumLicenseStatus(value)
	for _, existing := range AllowedEnumLicenseStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumLicenseStatus(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumLicenseStatusFromValue returns a pointer to a valid EnumLicenseStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumLicenseStatusFromValue(v string) (*EnumLicenseStatus, error) {
	ev := EnumLicenseStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumLicenseStatus: valid values are %v", v, AllowedEnumLicenseStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumLicenseStatus) IsValid() bool {
	for _, existing := range AllowedEnumLicenseStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumLicenseStatus value
func (v EnumLicenseStatus) Ptr() *EnumLicenseStatus {
	return &v
}

type NullableEnumLicenseStatus struct {
	value *EnumLicenseStatus
	isSet bool
}

func (v NullableEnumLicenseStatus) Get() *EnumLicenseStatus {
	return v.value
}

func (v *NullableEnumLicenseStatus) Set(val *EnumLicenseStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumLicenseStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumLicenseStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumLicenseStatus(val *EnumLicenseStatus) *NullableEnumLicenseStatus {
	return &NullableEnumLicenseStatus{value: val, isSet: true}
}

func (v NullableEnumLicenseStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumLicenseStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
