/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumIdentityProviderExt A string that identifies the type of identity provider used to authenticate the user.
type EnumIdentityProviderExt string

// List of EnumIdentityProviderExt
const (
	ENUMIDENTITYPROVIDEREXT_FACEBOOK EnumIdentityProviderExt = "FACEBOOK"
	ENUMIDENTITYPROVIDEREXT_GOOGLE EnumIdentityProviderExt = "GOOGLE"
	ENUMIDENTITYPROVIDEREXT_LINKEDIN EnumIdentityProviderExt = "LINKEDIN"
	ENUMIDENTITYPROVIDEREXT_LINKEDIN_OIDC EnumIdentityProviderExt = "LINKEDIN_OIDC"
	ENUMIDENTITYPROVIDEREXT_APPLE EnumIdentityProviderExt = "APPLE"
	ENUMIDENTITYPROVIDEREXT_TWITTER EnumIdentityProviderExt = "TWITTER"
	ENUMIDENTITYPROVIDEREXT_AMAZON EnumIdentityProviderExt = "AMAZON"
	ENUMIDENTITYPROVIDEREXT_YAHOO EnumIdentityProviderExt = "YAHOO"
	ENUMIDENTITYPROVIDEREXT_MICROSOFT EnumIdentityProviderExt = "MICROSOFT"
	ENUMIDENTITYPROVIDEREXT_PAYPAL EnumIdentityProviderExt = "PAYPAL"
	ENUMIDENTITYPROVIDEREXT_GITHUB EnumIdentityProviderExt = "GITHUB"
	ENUMIDENTITYPROVIDEREXT_OPENID_CONNECT EnumIdentityProviderExt = "OPENID_CONNECT"
	ENUMIDENTITYPROVIDEREXT_SAML EnumIdentityProviderExt = "SAML"
)

// All allowed values of EnumIdentityProviderExt enum
var AllowedEnumIdentityProviderExtEnumValues = []EnumIdentityProviderExt{
	"FACEBOOK",
	"GOOGLE",
	"LINKEDIN",
	"LINKEDIN_OIDC",
	"APPLE",
	"TWITTER",
	"AMAZON",
	"YAHOO",
	"MICROSOFT",
	"PAYPAL",
	"GITHUB",
	"OPENID_CONNECT",
	"SAML",
}

func (v *EnumIdentityProviderExt) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumIdentityProviderExt(value)
	for _, existing := range AllowedEnumIdentityProviderExtEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumIdentityProviderExt(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumIdentityProviderExtFromValue returns a pointer to a valid EnumIdentityProviderExt
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumIdentityProviderExtFromValue(v string) (*EnumIdentityProviderExt, error) {
	ev := EnumIdentityProviderExt(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumIdentityProviderExt: valid values are %v", v, AllowedEnumIdentityProviderExtEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumIdentityProviderExt) IsValid() bool {
	for _, existing := range AllowedEnumIdentityProviderExtEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumIdentityProviderExt value
func (v EnumIdentityProviderExt) Ptr() *EnumIdentityProviderExt {
	return &v
}

type NullableEnumIdentityProviderExt struct {
	value *EnumIdentityProviderExt
	isSet bool
}

func (v NullableEnumIdentityProviderExt) Get() *EnumIdentityProviderExt {
	return v.value
}

func (v *NullableEnumIdentityProviderExt) Set(val *EnumIdentityProviderExt) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumIdentityProviderExt) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumIdentityProviderExt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumIdentityProviderExt(val *EnumIdentityProviderExt) *NullableEnumIdentityProviderExt {
	return &NullableEnumIdentityProviderExt{value: val, isSet: true}
}

func (v NullableEnumIdentityProviderExt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumIdentityProviderExt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

