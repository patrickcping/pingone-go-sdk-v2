/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumPropagationStoreTypeSCIMGroupNameSource The source to use for the group name. Options are either `Common Name` or `Distinguished Name`.
type EnumPropagationStoreTypeSCIMGroupNameSource string

// List of EnumPropagationStoreTypeSCIMGroupNameSource
const (
	ENUMPROPAGATIONSTORETYPESCIMGROUPNAMESOURCE_COMMON_NAME        EnumPropagationStoreTypeSCIMGroupNameSource = "Common Name"
	ENUMPROPAGATIONSTORETYPESCIMGROUPNAMESOURCE_DISTINGUISHED_NAME EnumPropagationStoreTypeSCIMGroupNameSource = "Distinguished Name"
)

// All allowed values of EnumPropagationStoreTypeSCIMGroupNameSource enum
var AllowedEnumPropagationStoreTypeSCIMGroupNameSourceEnumValues = []EnumPropagationStoreTypeSCIMGroupNameSource{
	"Common Name",
	"Distinguished Name",
}

func (v *EnumPropagationStoreTypeSCIMGroupNameSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumPropagationStoreTypeSCIMGroupNameSource(value)
	for _, existing := range AllowedEnumPropagationStoreTypeSCIMGroupNameSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumPropagationStoreTypeSCIMGroupNameSource(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumPropagationStoreTypeSCIMGroupNameSourceFromValue returns a pointer to a valid EnumPropagationStoreTypeSCIMGroupNameSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumPropagationStoreTypeSCIMGroupNameSourceFromValue(v string) (*EnumPropagationStoreTypeSCIMGroupNameSource, error) {
	ev := EnumPropagationStoreTypeSCIMGroupNameSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumPropagationStoreTypeSCIMGroupNameSource: valid values are %v", v, AllowedEnumPropagationStoreTypeSCIMGroupNameSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumPropagationStoreTypeSCIMGroupNameSource) IsValid() bool {
	for _, existing := range AllowedEnumPropagationStoreTypeSCIMGroupNameSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumPropagationStoreTypeSCIMGroupNameSource value
func (v EnumPropagationStoreTypeSCIMGroupNameSource) Ptr() *EnumPropagationStoreTypeSCIMGroupNameSource {
	return &v
}

type NullableEnumPropagationStoreTypeSCIMGroupNameSource struct {
	value *EnumPropagationStoreTypeSCIMGroupNameSource
	isSet bool
}

func (v NullableEnumPropagationStoreTypeSCIMGroupNameSource) Get() *EnumPropagationStoreTypeSCIMGroupNameSource {
	return v.value
}

func (v *NullableEnumPropagationStoreTypeSCIMGroupNameSource) Set(val *EnumPropagationStoreTypeSCIMGroupNameSource) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumPropagationStoreTypeSCIMGroupNameSource) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumPropagationStoreTypeSCIMGroupNameSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumPropagationStoreTypeSCIMGroupNameSource(val *EnumPropagationStoreTypeSCIMGroupNameSource) *NullableEnumPropagationStoreTypeSCIMGroupNameSource {
	return &NullableEnumPropagationStoreTypeSCIMGroupNameSource{value: val, isSet: true}
}

func (v NullableEnumPropagationStoreTypeSCIMGroupNameSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumPropagationStoreTypeSCIMGroupNameSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
