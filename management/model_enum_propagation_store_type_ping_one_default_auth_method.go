/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumPropagationStoreTypePingOneDefaultAuthMethod The default authentication method. Options are `Email 1`, `SMS 1`, or `Voice 1`.
type EnumPropagationStoreTypePingOneDefaultAuthMethod string

// List of EnumPropagationStoreTypePingOneDefaultAuthMethod
const (
	ENUMPROPAGATIONSTORETYPEPINGONEDEFAULTAUTHMETHOD_EMAIL_1 EnumPropagationStoreTypePingOneDefaultAuthMethod = "Email 1"
	ENUMPROPAGATIONSTORETYPEPINGONEDEFAULTAUTHMETHOD_SMS_1   EnumPropagationStoreTypePingOneDefaultAuthMethod = "SMS 1"
	ENUMPROPAGATIONSTORETYPEPINGONEDEFAULTAUTHMETHOD_VOICE_1 EnumPropagationStoreTypePingOneDefaultAuthMethod = "Voice 1"
)

// All allowed values of EnumPropagationStoreTypePingOneDefaultAuthMethod enum
var AllowedEnumPropagationStoreTypePingOneDefaultAuthMethodEnumValues = []EnumPropagationStoreTypePingOneDefaultAuthMethod{
	"Email 1",
	"SMS 1",
	"Voice 1",
}

func (v *EnumPropagationStoreTypePingOneDefaultAuthMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumPropagationStoreTypePingOneDefaultAuthMethod(value)
	for _, existing := range AllowedEnumPropagationStoreTypePingOneDefaultAuthMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumPropagationStoreTypePingOneDefaultAuthMethod(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumPropagationStoreTypePingOneDefaultAuthMethodFromValue returns a pointer to a valid EnumPropagationStoreTypePingOneDefaultAuthMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumPropagationStoreTypePingOneDefaultAuthMethodFromValue(v string) (*EnumPropagationStoreTypePingOneDefaultAuthMethod, error) {
	ev := EnumPropagationStoreTypePingOneDefaultAuthMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumPropagationStoreTypePingOneDefaultAuthMethod: valid values are %v", v, AllowedEnumPropagationStoreTypePingOneDefaultAuthMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumPropagationStoreTypePingOneDefaultAuthMethod) IsValid() bool {
	for _, existing := range AllowedEnumPropagationStoreTypePingOneDefaultAuthMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumPropagationStoreTypePingOneDefaultAuthMethod value
func (v EnumPropagationStoreTypePingOneDefaultAuthMethod) Ptr() *EnumPropagationStoreTypePingOneDefaultAuthMethod {
	return &v
}

type NullableEnumPropagationStoreTypePingOneDefaultAuthMethod struct {
	value *EnumPropagationStoreTypePingOneDefaultAuthMethod
	isSet bool
}

func (v NullableEnumPropagationStoreTypePingOneDefaultAuthMethod) Get() *EnumPropagationStoreTypePingOneDefaultAuthMethod {
	return v.value
}

func (v *NullableEnumPropagationStoreTypePingOneDefaultAuthMethod) Set(val *EnumPropagationStoreTypePingOneDefaultAuthMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumPropagationStoreTypePingOneDefaultAuthMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumPropagationStoreTypePingOneDefaultAuthMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumPropagationStoreTypePingOneDefaultAuthMethod(val *EnumPropagationStoreTypePingOneDefaultAuthMethod) *NullableEnumPropagationStoreTypePingOneDefaultAuthMethod {
	return &NullableEnumPropagationStoreTypePingOneDefaultAuthMethod{value: val, isSet: true}
}

func (v NullableEnumPropagationStoreTypePingOneDefaultAuthMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumPropagationStoreTypePingOneDefaultAuthMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
