/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the UserApplicationRoleAssignment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserApplicationRoleAssignment{}

// UserApplicationRoleAssignment struct for UserApplicationRoleAssignment
type UserApplicationRoleAssignment struct {
	Environment *ObjectEnvironment `json:"environment,omitempty"`
	// Specifies the application role ID to assign to the specified user.
	Id string `json:"id"`
	// Specifies the name of the application role assigned to the user.
	Name *string `json:"name,omitempty"`
	// Specifies the description of the application role assigned to the user.
	Description *string `json:"description,omitempty"`
}

// NewUserApplicationRoleAssignment instantiates a new UserApplicationRoleAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserApplicationRoleAssignment(id string) *UserApplicationRoleAssignment {
	this := UserApplicationRoleAssignment{}
	this.Id = id
	return &this
}

// NewUserApplicationRoleAssignmentWithDefaults instantiates a new UserApplicationRoleAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserApplicationRoleAssignmentWithDefaults() *UserApplicationRoleAssignment {
	this := UserApplicationRoleAssignment{}
	return &this
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *UserApplicationRoleAssignment) GetEnvironment() ObjectEnvironment {
	if o == nil || IsNil(o.Environment) {
		var ret ObjectEnvironment
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserApplicationRoleAssignment) GetEnvironmentOk() (*ObjectEnvironment, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *UserApplicationRoleAssignment) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given ObjectEnvironment and assigns it to the Environment field.
func (o *UserApplicationRoleAssignment) SetEnvironment(v ObjectEnvironment) {
	o.Environment = &v
}

// GetId returns the Id field value
func (o *UserApplicationRoleAssignment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserApplicationRoleAssignment) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserApplicationRoleAssignment) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserApplicationRoleAssignment) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserApplicationRoleAssignment) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserApplicationRoleAssignment) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserApplicationRoleAssignment) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UserApplicationRoleAssignment) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserApplicationRoleAssignment) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UserApplicationRoleAssignment) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UserApplicationRoleAssignment) SetDescription(v string) {
	o.Description = &v
}

func (o UserApplicationRoleAssignment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserApplicationRoleAssignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableUserApplicationRoleAssignment struct {
	value *UserApplicationRoleAssignment
	isSet bool
}

func (v NullableUserApplicationRoleAssignment) Get() *UserApplicationRoleAssignment {
	return v.value
}

func (v *NullableUserApplicationRoleAssignment) Set(val *UserApplicationRoleAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableUserApplicationRoleAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableUserApplicationRoleAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserApplicationRoleAssignment(val *UserApplicationRoleAssignment) *NullableUserApplicationRoleAssignment {
	return &NullableUserApplicationRoleAssignment{value: val, isSet: true}
}

func (v NullableUserApplicationRoleAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserApplicationRoleAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
