/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumNotificationsPolicyCountryLimitType Determines the kind of limitation being defined. The possible values are: `NONE` `ALLOWED` - allows SMS/Voice notifications only for the countries specified with `countryLimit.countries` `DENIED` - denies SMS/Voice notifications for the countries specified with `countryLimit.countries`
type EnumNotificationsPolicyCountryLimitType string

// List of EnumNotificationsPolicyCountryLimitType
const (
	ENUMNOTIFICATIONSPOLICYCOUNTRYLIMITTYPE_NONE    EnumNotificationsPolicyCountryLimitType = "NONE"
	ENUMNOTIFICATIONSPOLICYCOUNTRYLIMITTYPE_ALLOWED EnumNotificationsPolicyCountryLimitType = "ALLOWED"
	ENUMNOTIFICATIONSPOLICYCOUNTRYLIMITTYPE_DENIED  EnumNotificationsPolicyCountryLimitType = "DENIED"
)

// All allowed values of EnumNotificationsPolicyCountryLimitType enum
var AllowedEnumNotificationsPolicyCountryLimitTypeEnumValues = []EnumNotificationsPolicyCountryLimitType{
	"NONE",
	"ALLOWED",
	"DENIED",
}

func (v *EnumNotificationsPolicyCountryLimitType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumNotificationsPolicyCountryLimitType(value)
	for _, existing := range AllowedEnumNotificationsPolicyCountryLimitTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumNotificationsPolicyCountryLimitType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumNotificationsPolicyCountryLimitTypeFromValue returns a pointer to a valid EnumNotificationsPolicyCountryLimitType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumNotificationsPolicyCountryLimitTypeFromValue(v string) (*EnumNotificationsPolicyCountryLimitType, error) {
	ev := EnumNotificationsPolicyCountryLimitType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumNotificationsPolicyCountryLimitType: valid values are %v", v, AllowedEnumNotificationsPolicyCountryLimitTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumNotificationsPolicyCountryLimitType) IsValid() bool {
	for _, existing := range AllowedEnumNotificationsPolicyCountryLimitTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumNotificationsPolicyCountryLimitType value
func (v EnumNotificationsPolicyCountryLimitType) Ptr() *EnumNotificationsPolicyCountryLimitType {
	return &v
}

type NullableEnumNotificationsPolicyCountryLimitType struct {
	value *EnumNotificationsPolicyCountryLimitType
	isSet bool
}

func (v NullableEnumNotificationsPolicyCountryLimitType) Get() *EnumNotificationsPolicyCountryLimitType {
	return v.value
}

func (v *NullableEnumNotificationsPolicyCountryLimitType) Set(val *EnumNotificationsPolicyCountryLimitType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumNotificationsPolicyCountryLimitType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumNotificationsPolicyCountryLimitType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumNotificationsPolicyCountryLimitType(val *EnumNotificationsPolicyCountryLimitType) *NullableEnumNotificationsPolicyCountryLimitType {
	return &NullableEnumNotificationsPolicyCountryLimitType{value: val, isSet: true}
}

func (v NullableEnumNotificationsPolicyCountryLimitType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumNotificationsPolicyCountryLimitType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
