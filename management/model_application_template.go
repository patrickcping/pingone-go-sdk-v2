/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the ApplicationTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationTemplate{}

// ApplicationTemplate struct for ApplicationTemplate
type ApplicationTemplate struct {
	// Contains a key/value map of the parameters required by the integration in Integration Catalog.
	Configuration map[string]string              `json:"configuration"`
	Integration   ApplicationTemplateIntegration `json:"integration"`
	Version       ApplicationTemplateVersion     `json:"version"`
}

// NewApplicationTemplate instantiates a new ApplicationTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationTemplate(configuration map[string]string, integration ApplicationTemplateIntegration, version ApplicationTemplateVersion) *ApplicationTemplate {
	this := ApplicationTemplate{}
	this.Configuration = configuration
	this.Integration = integration
	this.Version = version
	return &this
}

// NewApplicationTemplateWithDefaults instantiates a new ApplicationTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationTemplateWithDefaults() *ApplicationTemplate {
	this := ApplicationTemplate{}
	return &this
}

// GetConfiguration returns the Configuration field value
func (o *ApplicationTemplate) GetConfiguration() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value
// and a boolean to check if the value has been set.
func (o *ApplicationTemplate) GetConfigurationOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Configuration, true
}

// SetConfiguration sets field value
func (o *ApplicationTemplate) SetConfiguration(v map[string]string) {
	o.Configuration = v
}

// GetIntegration returns the Integration field value
func (o *ApplicationTemplate) GetIntegration() ApplicationTemplateIntegration {
	if o == nil {
		var ret ApplicationTemplateIntegration
		return ret
	}

	return o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value
// and a boolean to check if the value has been set.
func (o *ApplicationTemplate) GetIntegrationOk() (*ApplicationTemplateIntegration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Integration, true
}

// SetIntegration sets field value
func (o *ApplicationTemplate) SetIntegration(v ApplicationTemplateIntegration) {
	o.Integration = v
}

// GetVersion returns the Version field value
func (o *ApplicationTemplate) GetVersion() ApplicationTemplateVersion {
	if o == nil {
		var ret ApplicationTemplateVersion
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *ApplicationTemplate) GetVersionOk() (*ApplicationTemplateVersion, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *ApplicationTemplate) SetVersion(v ApplicationTemplateVersion) {
	o.Version = v
}

func (o ApplicationTemplate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["configuration"] = o.Configuration
	toSerialize["integration"] = o.Integration
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

type NullableApplicationTemplate struct {
	value *ApplicationTemplate
	isSet bool
}

func (v NullableApplicationTemplate) Get() *ApplicationTemplate {
	return v.value
}

func (v *NullableApplicationTemplate) Set(val *ApplicationTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationTemplate(val *ApplicationTemplate) *NullableApplicationTemplate {
	return &NullableApplicationTemplate{value: val, isSet: true}
}

func (v NullableApplicationTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
