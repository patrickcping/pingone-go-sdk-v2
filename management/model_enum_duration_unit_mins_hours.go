/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumDurationUnitMinsHours the model 'EnumDurationUnitMinsHours'
type EnumDurationUnitMinsHours string

// List of EnumDurationUnitMinsHours
const (
	ENUMDURATIONUNITMINSHOURS_MINUTES EnumDurationUnitMinsHours = "MINUTES"
	ENUMDURATIONUNITMINSHOURS_HOURS   EnumDurationUnitMinsHours = "HOURS"
)

// All allowed values of EnumDurationUnitMinsHours enum
var AllowedEnumDurationUnitMinsHoursEnumValues = []EnumDurationUnitMinsHours{
	"MINUTES",
	"HOURS",
}

func (v *EnumDurationUnitMinsHours) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumDurationUnitMinsHours(value)
	for _, existing := range AllowedEnumDurationUnitMinsHoursEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumDurationUnitMinsHours(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumDurationUnitMinsHoursFromValue returns a pointer to a valid EnumDurationUnitMinsHours
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumDurationUnitMinsHoursFromValue(v string) (*EnumDurationUnitMinsHours, error) {
	ev := EnumDurationUnitMinsHours(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumDurationUnitMinsHours: valid values are %v", v, AllowedEnumDurationUnitMinsHoursEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumDurationUnitMinsHours) IsValid() bool {
	for _, existing := range AllowedEnumDurationUnitMinsHoursEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumDurationUnitMinsHours value
func (v EnumDurationUnitMinsHours) Ptr() *EnumDurationUnitMinsHours {
	return &v
}

type NullableEnumDurationUnitMinsHours struct {
	value *EnumDurationUnitMinsHours
	isSet bool
}

func (v NullableEnumDurationUnitMinsHours) Get() *EnumDurationUnitMinsHours {
	return v.value
}

func (v *NullableEnumDurationUnitMinsHours) Set(val *EnumDurationUnitMinsHours) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumDurationUnitMinsHours) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumDurationUnitMinsHours) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumDurationUnitMinsHours(val *EnumDurationUnitMinsHours) *NullableEnumDurationUnitMinsHours {
	return &NullableEnumDurationUnitMinsHours{value: val, isSet: true}
}

func (v NullableEnumDurationUnitMinsHours) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumDurationUnitMinsHours) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
