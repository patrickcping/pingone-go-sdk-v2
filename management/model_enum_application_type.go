/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumApplicationType A string that specifies the type associated with the application. This is a required property.
type EnumApplicationType string

// List of EnumApplicationType
const (
	ENUMAPPLICATIONTYPE_WEB_APP                EnumApplicationType = "WEB_APP"
	ENUMAPPLICATIONTYPE_NATIVE_APP             EnumApplicationType = "NATIVE_APP"
	ENUMAPPLICATIONTYPE_SINGLE_PAGE_APP        EnumApplicationType = "SINGLE_PAGE_APP"
	ENUMAPPLICATIONTYPE_WORKER                 EnumApplicationType = "WORKER"
	ENUMAPPLICATIONTYPE_SERVICE                EnumApplicationType = "SERVICE"
	ENUMAPPLICATIONTYPE_CUSTOM_APP             EnumApplicationType = "CUSTOM_APP"
	ENUMAPPLICATIONTYPE_PING_ONE_SELF_SERVICE  EnumApplicationType = "PING_ONE_SELF_SERVICE"
	ENUMAPPLICATIONTYPE_PING_ONE_ADMIN_CONSOLE EnumApplicationType = "PING_ONE_ADMIN_CONSOLE"
	ENUMAPPLICATIONTYPE_PING_ONE_PORTAL        EnumApplicationType = "PING_ONE_PORTAL"
	ENUMAPPLICATIONTYPE_TEMPLATE_APP           EnumApplicationType = "TEMPLATE_APP"
	ENUMAPPLICATIONTYPE_PORTAL_LINK_APP        EnumApplicationType = "PORTAL_LINK_APP"
)

// All allowed values of EnumApplicationType enum
var AllowedEnumApplicationTypeEnumValues = []EnumApplicationType{
	"WEB_APP",
	"NATIVE_APP",
	"SINGLE_PAGE_APP",
	"WORKER",
	"SERVICE",
	"CUSTOM_APP",
	"PING_ONE_SELF_SERVICE",
	"PING_ONE_ADMIN_CONSOLE",
	"PING_ONE_PORTAL",
	"TEMPLATE_APP",
	"PORTAL_LINK_APP",
}

func (v *EnumApplicationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumApplicationType(value)
	for _, existing := range AllowedEnumApplicationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumApplicationType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumApplicationTypeFromValue returns a pointer to a valid EnumApplicationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumApplicationTypeFromValue(v string) (*EnumApplicationType, error) {
	ev := EnumApplicationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumApplicationType: valid values are %v", v, AllowedEnumApplicationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumApplicationType) IsValid() bool {
	for _, existing := range AllowedEnumApplicationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumApplicationType value
func (v EnumApplicationType) Ptr() *EnumApplicationType {
	return &v
}

type NullableEnumApplicationType struct {
	value *EnumApplicationType
	isSet bool
}

func (v NullableEnumApplicationType) Get() *EnumApplicationType {
	return v.value
}

func (v *NullableEnumApplicationType) Set(val *EnumApplicationType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumApplicationType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumApplicationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumApplicationType(val *EnumApplicationType) *NullableEnumApplicationType {
	return &NullableEnumApplicationType{value: val, isSet: true}
}

func (v NullableEnumApplicationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumApplicationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
