/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumPropagationStoreType The type of the identity store and determines the required and acceptable configuration properties. It also determines the acceptable target attribute mappings. Options are Aquera, AzureActiveDirectorySAML2, directory, LdapGateway, PingOne, Salesforce, SalesforceContacts, scim, Slack, Workday, or Zoom.
type EnumPropagationStoreType string

// List of EnumPropagationStoreType
const (
	ENUMPROPAGATIONSTORETYPE_AQUERA                       EnumPropagationStoreType = "Aquera"
	ENUMPROPAGATIONSTORETYPE_AZURE_ACTIVE_DIRECTORY_SAML2 EnumPropagationStoreType = "AzureActiveDirectorySAML2"
	ENUMPROPAGATIONSTORETYPE_DIRECTORY                    EnumPropagationStoreType = "directory"
	ENUMPROPAGATIONSTORETYPE_LDAP_GATEWAY                 EnumPropagationStoreType = "LdapGateway"
	ENUMPROPAGATIONSTORETYPE_PING_ONE                     EnumPropagationStoreType = "PingOne"
	ENUMPROPAGATIONSTORETYPE_SALESFORCE                   EnumPropagationStoreType = "Salesforce"
	ENUMPROPAGATIONSTORETYPE_SALESFORCE_CONTACTS          EnumPropagationStoreType = "SalesforceContacts"
	ENUMPROPAGATIONSTORETYPE_SCIM                         EnumPropagationStoreType = "scim"
	ENUMPROPAGATIONSTORETYPE_SLACK                        EnumPropagationStoreType = "Slack"
	ENUMPROPAGATIONSTORETYPE_WORKDAY                      EnumPropagationStoreType = "Workday"
	ENUMPROPAGATIONSTORETYPE_ZOOM                         EnumPropagationStoreType = "Zoom"
)

// All allowed values of EnumPropagationStoreType enum
var AllowedEnumPropagationStoreTypeEnumValues = []EnumPropagationStoreType{
	"Aquera",
	"AzureActiveDirectorySAML2",
	"directory",
	"LdapGateway",
	"PingOne",
	"Salesforce",
	"SalesforceContacts",
	"scim",
	"Slack",
	"Workday",
	"Zoom",
}

func (v *EnumPropagationStoreType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumPropagationStoreType(value)
	for _, existing := range AllowedEnumPropagationStoreTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumPropagationStoreType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumPropagationStoreTypeFromValue returns a pointer to a valid EnumPropagationStoreType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumPropagationStoreTypeFromValue(v string) (*EnumPropagationStoreType, error) {
	ev := EnumPropagationStoreType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumPropagationStoreType: valid values are %v", v, AllowedEnumPropagationStoreTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumPropagationStoreType) IsValid() bool {
	for _, existing := range AllowedEnumPropagationStoreTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumPropagationStoreType value
func (v EnumPropagationStoreType) Ptr() *EnumPropagationStoreType {
	return &v
}

type NullableEnumPropagationStoreType struct {
	value *EnumPropagationStoreType
	isSet bool
}

func (v NullableEnumPropagationStoreType) Get() *EnumPropagationStoreType {
	return v.value
}

func (v *NullableEnumPropagationStoreType) Set(val *EnumPropagationStoreType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumPropagationStoreType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumPropagationStoreType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumPropagationStoreType(val *EnumPropagationStoreType) *NullableEnumPropagationStoreType {
	return &NullableEnumPropagationStoreType{value: val, isSet: true}
}

func (v NullableEnumPropagationStoreType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumPropagationStoreType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
