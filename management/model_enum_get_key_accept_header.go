/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumGetKeyAcceptHeader the model 'EnumGetKeyAcceptHeader'
type EnumGetKeyAcceptHeader string

// List of EnumGetKeyAcceptHeader
const (
	ENUMGETKEYACCEPTHEADER_JSON                 EnumGetKeyAcceptHeader = "application/json"
	ENUMGETKEYACCEPTHEADER_X_PKCS7_CERTIFICATES EnumGetKeyAcceptHeader = "application/x-pkcs7-certificates"
	ENUMGETKEYACCEPTHEADER_X_X509_CA_CERT       EnumGetKeyAcceptHeader = "application/x-x509-ca-cert"
)

// All allowed values of EnumGetKeyAcceptHeader enum
var AllowedEnumGetKeyAcceptHeaderEnumValues = []EnumGetKeyAcceptHeader{
	"application/json",
	"application/x-pkcs7-certificates",
	"application/x-x509-ca-cert",
}

func (v *EnumGetKeyAcceptHeader) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumGetKeyAcceptHeader(value)
	for _, existing := range AllowedEnumGetKeyAcceptHeaderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumGetKeyAcceptHeader(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumGetKeyAcceptHeaderFromValue returns a pointer to a valid EnumGetKeyAcceptHeader
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumGetKeyAcceptHeaderFromValue(v string) (*EnumGetKeyAcceptHeader, error) {
	ev := EnumGetKeyAcceptHeader(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumGetKeyAcceptHeader: valid values are %v", v, AllowedEnumGetKeyAcceptHeaderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumGetKeyAcceptHeader) IsValid() bool {
	for _, existing := range AllowedEnumGetKeyAcceptHeaderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumGetKeyAcceptHeader value
func (v EnumGetKeyAcceptHeader) Ptr() *EnumGetKeyAcceptHeader {
	return &v
}

type NullableEnumGetKeyAcceptHeader struct {
	value *EnumGetKeyAcceptHeader
	isSet bool
}

func (v NullableEnumGetKeyAcceptHeader) Get() *EnumGetKeyAcceptHeader {
	return v.value
}

func (v *NullableEnumGetKeyAcceptHeader) Set(val *EnumGetKeyAcceptHeader) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumGetKeyAcceptHeader) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumGetKeyAcceptHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumGetKeyAcceptHeader(val *EnumGetKeyAcceptHeader) *NullableEnumGetKeyAcceptHeader {
	return &NullableEnumGetKeyAcceptHeader{value: val, isSet: true}
}

func (v NullableEnumGetKeyAcceptHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumGetKeyAcceptHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
