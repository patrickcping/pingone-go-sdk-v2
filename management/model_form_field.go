/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// FormField - struct for FormField
type FormField struct {
	FormFieldCheckbox          *FormFieldCheckbox
	FormFieldCombobox          *FormFieldCombobox
	FormFieldDivider           *FormFieldDivider
	FormFieldDropdown          *FormFieldDropdown
	FormFieldEmptyField        *FormFieldEmptyField
	FormFieldErrorDisplay      *FormFieldErrorDisplay
	FormFieldFlowButton        *FormFieldFlowButton
	FormFieldFlowLink          *FormFieldFlowLink
	FormFieldPassword          *FormFieldPassword
	FormFieldPasswordVerify    *FormFieldPasswordVerify
	FormFieldQrCode            *FormFieldQrCode
	FormFieldRadio             *FormFieldRadio
	FormFieldRecaptchaV2       *FormFieldRecaptchaV2
	FormFieldSlateTextblob     *FormFieldSlateTextblob
	FormFieldSocialLoginButton *FormFieldSocialLoginButton
	FormFieldSubmitButton      *FormFieldSubmitButton
	FormFieldText              *FormFieldText
	FormFieldTextblob          *FormFieldTextblob
}

// FormFieldCheckboxAsFormField is a convenience function that returns FormFieldCheckbox wrapped in FormField
func FormFieldCheckboxAsFormField(v *FormFieldCheckbox) FormField {
	return FormField{
		FormFieldCheckbox: v,
	}
}

// FormFieldComboboxAsFormField is a convenience function that returns FormFieldCombobox wrapped in FormField
func FormFieldComboboxAsFormField(v *FormFieldCombobox) FormField {
	return FormField{
		FormFieldCombobox: v,
	}
}

// FormFieldDividerAsFormField is a convenience function that returns FormFieldDivider wrapped in FormField
func FormFieldDividerAsFormField(v *FormFieldDivider) FormField {
	return FormField{
		FormFieldDivider: v,
	}
}

// FormFieldDropdownAsFormField is a convenience function that returns FormFieldDropdown wrapped in FormField
func FormFieldDropdownAsFormField(v *FormFieldDropdown) FormField {
	return FormField{
		FormFieldDropdown: v,
	}
}

// FormFieldEmptyFieldAsFormField is a convenience function that returns FormFieldEmptyField wrapped in FormField
func FormFieldEmptyFieldAsFormField(v *FormFieldEmptyField) FormField {
	return FormField{
		FormFieldEmptyField: v,
	}
}

// FormFieldErrorDisplayAsFormField is a convenience function that returns FormFieldErrorDisplay wrapped in FormField
func FormFieldErrorDisplayAsFormField(v *FormFieldErrorDisplay) FormField {
	return FormField{
		FormFieldErrorDisplay: v,
	}
}

// FormFieldFlowButtonAsFormField is a convenience function that returns FormFieldFlowButton wrapped in FormField
func FormFieldFlowButtonAsFormField(v *FormFieldFlowButton) FormField {
	return FormField{
		FormFieldFlowButton: v,
	}
}

// FormFieldFlowLinkAsFormField is a convenience function that returns FormFieldFlowLink wrapped in FormField
func FormFieldFlowLinkAsFormField(v *FormFieldFlowLink) FormField {
	return FormField{
		FormFieldFlowLink: v,
	}
}

// FormFieldPasswordAsFormField is a convenience function that returns FormFieldPassword wrapped in FormField
func FormFieldPasswordAsFormField(v *FormFieldPassword) FormField {
	return FormField{
		FormFieldPassword: v,
	}
}

// FormFieldPasswordVerifyAsFormField is a convenience function that returns FormFieldPasswordVerify wrapped in FormField
func FormFieldPasswordVerifyAsFormField(v *FormFieldPasswordVerify) FormField {
	return FormField{
		FormFieldPasswordVerify: v,
	}
}

// FormFieldQrCodeAsFormField is a convenience function that returns FormFieldQrCode wrapped in FormField
func FormFieldQrCodeAsFormField(v *FormFieldQrCode) FormField {
	return FormField{
		FormFieldQrCode: v,
	}
}

// FormFieldRadioAsFormField is a convenience function that returns FormFieldRadio wrapped in FormField
func FormFieldRadioAsFormField(v *FormFieldRadio) FormField {
	return FormField{
		FormFieldRadio: v,
	}
}

// FormFieldRecaptchaV2AsFormField is a convenience function that returns FormFieldRecaptchaV2 wrapped in FormField
func FormFieldRecaptchaV2AsFormField(v *FormFieldRecaptchaV2) FormField {
	return FormField{
		FormFieldRecaptchaV2: v,
	}
}

// FormFieldSlateTextblobAsFormField is a convenience function that returns FormFieldSlateTextblob wrapped in FormField
func FormFieldSlateTextblobAsFormField(v *FormFieldSlateTextblob) FormField {
	return FormField{
		FormFieldSlateTextblob: v,
	}
}

// FormFieldSocialLoginButtonAsFormField is a convenience function that returns FormFieldSocialLoginButton wrapped in FormField
func FormFieldSocialLoginButtonAsFormField(v *FormFieldSocialLoginButton) FormField {
	return FormField{
		FormFieldSocialLoginButton: v,
	}
}

// FormFieldSubmitButtonAsFormField is a convenience function that returns FormFieldSubmitButton wrapped in FormField
func FormFieldSubmitButtonAsFormField(v *FormFieldSubmitButton) FormField {
	return FormField{
		FormFieldSubmitButton: v,
	}
}

// FormFieldTextAsFormField is a convenience function that returns FormFieldText wrapped in FormField
func FormFieldTextAsFormField(v *FormFieldText) FormField {
	return FormField{
		FormFieldText: v,
	}
}

// FormFieldTextblobAsFormField is a convenience function that returns FormFieldTextblob wrapped in FormField
func FormFieldTextblobAsFormField(v *FormFieldTextblob) FormField {
	return FormField{
		FormFieldTextblob: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *FormField) UnmarshalJSON(data []byte) error {

	var common FormFieldCommon

	if err := json.Unmarshal(data, &common); err != nil {
		return err
	}

	dst.FormFieldCheckbox = nil
	dst.FormFieldCombobox = nil
	dst.FormFieldDivider = nil
	dst.FormFieldDropdown = nil
	dst.FormFieldEmptyField = nil
	dst.FormFieldErrorDisplay = nil
	dst.FormFieldFlowButton = nil
	dst.FormFieldFlowLink = nil
	dst.FormFieldPassword = nil
	dst.FormFieldPasswordVerify = nil
	dst.FormFieldQrCode = nil
	dst.FormFieldRadio = nil
	dst.FormFieldRecaptchaV2 = nil
	dst.FormFieldSlateTextblob = nil
	dst.FormFieldSocialLoginButton = nil
	dst.FormFieldSubmitButton = nil
	dst.FormFieldText = nil

	objType := common.GetType()

	if !objType.IsValid() {
		return nil
	}

	switch objType {
	case ENUMFORMFIELDTYPE_TEXT:
		if err := json.Unmarshal(data, &dst.FormFieldText); err != nil {
			return err
		}
	case ENUMFORMFIELDTYPE_PASSWORD:
		if err := json.Unmarshal(data, &dst.FormFieldPassword); err != nil {
			return err
		}
	case ENUMFORMFIELDTYPE_PASSWORD_VERIFY:
		if err := json.Unmarshal(data, &dst.FormFieldPasswordVerify); err != nil {
			return err
		}
	case ENUMFORMFIELDTYPE_RADIO:
		if err := json.Unmarshal(data, &dst.FormFieldRadio); err != nil {
			return err
		}
	case ENUMFORMFIELDTYPE_CHECKBOX:
		if err := json.Unmarshal(data, &dst.FormFieldCheckbox); err != nil {
			return err
		}
	case ENUMFORMFIELDTYPE_DROPDOWN:
		if err := json.Unmarshal(data, &dst.FormFieldDropdown); err != nil {
			return err
		}
	case ENUMFORMFIELDTYPE_COMBOBOX:
		if err := json.Unmarshal(data, &dst.FormFieldCombobox); err != nil {
			return err
		}
	case ENUMFORMFIELDTYPE_DIVIDER:
		if err := json.Unmarshal(data, &dst.FormFieldDivider); err != nil {
			return err
		}
	case ENUMFORMFIELDTYPE_EMPTY_FIELD:
		if err := json.Unmarshal(data, &dst.FormFieldEmptyField); err != nil {
			return err
		}
	case ENUMFORMFIELDTYPE_TEXTBLOB:
		if err := json.Unmarshal(data, &dst.FormFieldSlateTextblob); err != nil {
			return err
		}
	case ENUMFORMFIELDTYPE_SLATE_TEXTBLOB:
		if err := json.Unmarshal(data, &dst.FormFieldSlateTextblob); err != nil {
			return err
		}
	case ENUMFORMFIELDTYPE_SUBMIT_BUTTON:
		if err := json.Unmarshal(data, &dst.FormFieldSubmitButton); err != nil {
			return err
		}
	case ENUMFORMFIELDTYPE_ERROR_DISPLAY:
		if err := json.Unmarshal(data, &dst.FormFieldErrorDisplay); err != nil {
			return err
		}
	case ENUMFORMFIELDTYPE_FLOW_LINK:
		if err := json.Unmarshal(data, &dst.FormFieldFlowLink); err != nil {
			return err
		}
	case ENUMFORMFIELDTYPE_FLOW_BUTTON:
		if err := json.Unmarshal(data, &dst.FormFieldFlowButton); err != nil {
			return err
		}
	case ENUMFORMFIELDTYPE_RECAPTCHA_V2:
		if err := json.Unmarshal(data, &dst.FormFieldRecaptchaV2); err != nil {
			return err
		}
	case ENUMFORMFIELDTYPE_QR_CODE:
		if err := json.Unmarshal(data, &dst.FormFieldQrCode); err != nil {
			return err
		}
	case ENUMFORMFIELDTYPE_SOCIAL_LOGIN_BUTTON:
		if err := json.Unmarshal(data, &dst.FormFieldSocialLoginButton); err != nil {
			return err
		}
	default:
		return fmt.Errorf("Data failed to match schemas in oneOf(FormField)")
	}
	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FormField) MarshalJSON() ([]byte, error) {
	if src.FormFieldCheckbox != nil {
		return json.Marshal(&src.FormFieldCheckbox)
	}

	if src.FormFieldCombobox != nil {
		return json.Marshal(&src.FormFieldCombobox)
	}

	if src.FormFieldDivider != nil {
		return json.Marshal(&src.FormFieldDivider)
	}

	if src.FormFieldDropdown != nil {
		return json.Marshal(&src.FormFieldDropdown)
	}

	if src.FormFieldEmptyField != nil {
		return json.Marshal(&src.FormFieldEmptyField)
	}

	if src.FormFieldErrorDisplay != nil {
		return json.Marshal(&src.FormFieldErrorDisplay)
	}

	if src.FormFieldFlowButton != nil {
		return json.Marshal(&src.FormFieldFlowButton)
	}

	if src.FormFieldFlowLink != nil {
		return json.Marshal(&src.FormFieldFlowLink)
	}

	if src.FormFieldPassword != nil {
		return json.Marshal(&src.FormFieldPassword)
	}

	if src.FormFieldPasswordVerify != nil {
		return json.Marshal(&src.FormFieldPasswordVerify)
	}

	if src.FormFieldQrCode != nil {
		return json.Marshal(&src.FormFieldQrCode)
	}

	if src.FormFieldRadio != nil {
		return json.Marshal(&src.FormFieldRadio)
	}

	if src.FormFieldRecaptchaV2 != nil {
		return json.Marshal(&src.FormFieldRecaptchaV2)
	}

	if src.FormFieldSlateTextblob != nil {
		return json.Marshal(&src.FormFieldSlateTextblob)
	}

	if src.FormFieldSocialLoginButton != nil {
		return json.Marshal(&src.FormFieldSocialLoginButton)
	}

	if src.FormFieldSubmitButton != nil {
		return json.Marshal(&src.FormFieldSubmitButton)
	}

	if src.FormFieldText != nil {
		return json.Marshal(&src.FormFieldText)
	}

	if src.FormFieldTextblob != nil {
		return json.Marshal(&src.FormFieldTextblob)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FormField) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.FormFieldCheckbox != nil {
		return obj.FormFieldCheckbox
	}

	if obj.FormFieldCombobox != nil {
		return obj.FormFieldCombobox
	}

	if obj.FormFieldDivider != nil {
		return obj.FormFieldDivider
	}

	if obj.FormFieldDropdown != nil {
		return obj.FormFieldDropdown
	}

	if obj.FormFieldEmptyField != nil {
		return obj.FormFieldEmptyField
	}

	if obj.FormFieldErrorDisplay != nil {
		return obj.FormFieldErrorDisplay
	}

	if obj.FormFieldFlowButton != nil {
		return obj.FormFieldFlowButton
	}

	if obj.FormFieldFlowLink != nil {
		return obj.FormFieldFlowLink
	}

	if obj.FormFieldPassword != nil {
		return obj.FormFieldPassword
	}

	if obj.FormFieldPasswordVerify != nil {
		return obj.FormFieldPasswordVerify
	}

	if obj.FormFieldQrCode != nil {
		return obj.FormFieldQrCode
	}

	if obj.FormFieldRadio != nil {
		return obj.FormFieldRadio
	}

	if obj.FormFieldRecaptchaV2 != nil {
		return obj.FormFieldRecaptchaV2
	}

	if obj.FormFieldSlateTextblob != nil {
		return obj.FormFieldSlateTextblob
	}

	if obj.FormFieldSocialLoginButton != nil {
		return obj.FormFieldSocialLoginButton
	}

	if obj.FormFieldSubmitButton != nil {
		return obj.FormFieldSubmitButton
	}

	if obj.FormFieldText != nil {
		return obj.FormFieldText
	}

	if obj.FormFieldTextblob != nil {
		return obj.FormFieldTextblob
	}

	// all schemas are nil
	return nil
}

type NullableFormField struct {
	value *FormField
	isSet bool
}

func (v NullableFormField) Get() *FormField {
	return v.value
}

func (v *NullableFormField) Set(val *FormField) {
	v.value = val
	v.isSet = true
}

func (v NullableFormField) IsSet() bool {
	return v.isSet
}

func (v *NullableFormField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormField(val *FormField) *NullableFormField {
	return &NullableFormField{value: val, isSet: true}
}

func (v NullableFormField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
