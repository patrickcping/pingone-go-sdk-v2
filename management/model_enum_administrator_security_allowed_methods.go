/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumAdministratorSecurityAllowedMethods Indicates the methods to enable or disable for admin sign-on. Possible values are `TOTP` (temporary one-time password), `FIDO2`, or `EMAIL`.
type EnumAdministratorSecurityAllowedMethods string

// List of EnumAdministratorSecurityAllowedMethods
const (
	ENUMADMINISTRATORSECURITYALLOWEDMETHODS_TOTP EnumAdministratorSecurityAllowedMethods = "TOTP"
	ENUMADMINISTRATORSECURITYALLOWEDMETHODS_FIDO2 EnumAdministratorSecurityAllowedMethods = "FIDO2"
	ENUMADMINISTRATORSECURITYALLOWEDMETHODS_EMAIL EnumAdministratorSecurityAllowedMethods = "EMAIL"
)

// All allowed values of EnumAdministratorSecurityAllowedMethods enum
var AllowedEnumAdministratorSecurityAllowedMethodsEnumValues = []EnumAdministratorSecurityAllowedMethods{
	"TOTP",
	"FIDO2",
	"EMAIL",
}

func (v *EnumAdministratorSecurityAllowedMethods) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAdministratorSecurityAllowedMethods(value)
	for _, existing := range AllowedEnumAdministratorSecurityAllowedMethodsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAdministratorSecurityAllowedMethods(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAdministratorSecurityAllowedMethodsFromValue returns a pointer to a valid EnumAdministratorSecurityAllowedMethods
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAdministratorSecurityAllowedMethodsFromValue(v string) (*EnumAdministratorSecurityAllowedMethods, error) {
	ev := EnumAdministratorSecurityAllowedMethods(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAdministratorSecurityAllowedMethods: valid values are %v", v, AllowedEnumAdministratorSecurityAllowedMethodsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAdministratorSecurityAllowedMethods) IsValid() bool {
	for _, existing := range AllowedEnumAdministratorSecurityAllowedMethodsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAdministratorSecurityAllowedMethods value
func (v EnumAdministratorSecurityAllowedMethods) Ptr() *EnumAdministratorSecurityAllowedMethods {
	return &v
}

type NullableEnumAdministratorSecurityAllowedMethods struct {
	value *EnumAdministratorSecurityAllowedMethods
	isSet bool
}

func (v NullableEnumAdministratorSecurityAllowedMethods) Get() *EnumAdministratorSecurityAllowedMethods {
	return v.value
}

func (v *NullableEnumAdministratorSecurityAllowedMethods) Set(val *EnumAdministratorSecurityAllowedMethods) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAdministratorSecurityAllowedMethods) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAdministratorSecurityAllowedMethods) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAdministratorSecurityAllowedMethods(val *EnumAdministratorSecurityAllowedMethods) *NullableEnumAdministratorSecurityAllowedMethods {
	return &NullableEnumAdministratorSecurityAllowedMethods{value: val, isSet: true}
}

func (v NullableEnumAdministratorSecurityAllowedMethods) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAdministratorSecurityAllowedMethods) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

