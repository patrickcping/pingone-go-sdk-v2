/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumKeyRotationPolicyUsageType How the KRP will be used, pertaining to what operations the KRP supports. The only valid value for initial release is `SIGNING`.
type EnumKeyRotationPolicyUsageType string

// List of EnumKeyRotationPolicyUsageType
const (
	ENUMKEYROTATIONPOLICYUSAGETYPE_SIGNING EnumKeyRotationPolicyUsageType = "SIGNING"
)

// All allowed values of EnumKeyRotationPolicyUsageType enum
var AllowedEnumKeyRotationPolicyUsageTypeEnumValues = []EnumKeyRotationPolicyUsageType{
	"SIGNING",
}

func (v *EnumKeyRotationPolicyUsageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumKeyRotationPolicyUsageType(value)
	for _, existing := range AllowedEnumKeyRotationPolicyUsageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumKeyRotationPolicyUsageType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumKeyRotationPolicyUsageTypeFromValue returns a pointer to a valid EnumKeyRotationPolicyUsageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumKeyRotationPolicyUsageTypeFromValue(v string) (*EnumKeyRotationPolicyUsageType, error) {
	ev := EnumKeyRotationPolicyUsageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumKeyRotationPolicyUsageType: valid values are %v", v, AllowedEnumKeyRotationPolicyUsageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumKeyRotationPolicyUsageType) IsValid() bool {
	for _, existing := range AllowedEnumKeyRotationPolicyUsageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumKeyRotationPolicyUsageType value
func (v EnumKeyRotationPolicyUsageType) Ptr() *EnumKeyRotationPolicyUsageType {
	return &v
}

type NullableEnumKeyRotationPolicyUsageType struct {
	value *EnumKeyRotationPolicyUsageType
	isSet bool
}

func (v NullableEnumKeyRotationPolicyUsageType) Get() *EnumKeyRotationPolicyUsageType {
	return v.value
}

func (v *NullableEnumKeyRotationPolicyUsageType) Set(val *EnumKeyRotationPolicyUsageType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumKeyRotationPolicyUsageType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumKeyRotationPolicyUsageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumKeyRotationPolicyUsageType(val *EnumKeyRotationPolicyUsageType) *NullableEnumKeyRotationPolicyUsageType {
	return &NullableEnumKeyRotationPolicyUsageType{value: val, isSet: true}
}

func (v NullableEnumKeyRotationPolicyUsageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumKeyRotationPolicyUsageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
