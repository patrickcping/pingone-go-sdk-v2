/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumCustomDomainStatus A string that specifies the status of the custom domain. Options are ACTIVE, VERIFICATION_REQUIRED, and SSL_CERTIFICATE_REQUIRED.
type EnumCustomDomainStatus string

// List of EnumCustomDomainStatus
const (
	ENUMCUSTOMDOMAINSTATUS_ACTIVE                   EnumCustomDomainStatus = "ACTIVE"
	ENUMCUSTOMDOMAINSTATUS_VERIFICATION_REQUIRED    EnumCustomDomainStatus = "VERIFICATION_REQUIRED"
	ENUMCUSTOMDOMAINSTATUS_SSL_CERTIFICATE_REQUIRED EnumCustomDomainStatus = "SSL_CERTIFICATE_REQUIRED"
)

// All allowed values of EnumCustomDomainStatus enum
var AllowedEnumCustomDomainStatusEnumValues = []EnumCustomDomainStatus{
	"ACTIVE",
	"VERIFICATION_REQUIRED",
	"SSL_CERTIFICATE_REQUIRED",
}

func (v *EnumCustomDomainStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumCustomDomainStatus(value)
	for _, existing := range AllowedEnumCustomDomainStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumCustomDomainStatus(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumCustomDomainStatusFromValue returns a pointer to a valid EnumCustomDomainStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumCustomDomainStatusFromValue(v string) (*EnumCustomDomainStatus, error) {
	ev := EnumCustomDomainStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumCustomDomainStatus: valid values are %v", v, AllowedEnumCustomDomainStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumCustomDomainStatus) IsValid() bool {
	for _, existing := range AllowedEnumCustomDomainStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumCustomDomainStatus value
func (v EnumCustomDomainStatus) Ptr() *EnumCustomDomainStatus {
	return &v
}

type NullableEnumCustomDomainStatus struct {
	value *EnumCustomDomainStatus
	isSet bool
}

func (v NullableEnumCustomDomainStatus) Get() *EnumCustomDomainStatus {
	return v.value
}

func (v *NullableEnumCustomDomainStatus) Set(val *EnumCustomDomainStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumCustomDomainStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumCustomDomainStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumCustomDomainStatus(val *EnumCustomDomainStatus) *NullableEnumCustomDomainStatus {
	return &NullableEnumCustomDomainStatus{value: val, isSet: true}
}

func (v NullableEnumCustomDomainStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumCustomDomainStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
