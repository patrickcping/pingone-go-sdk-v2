/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumSchemaAttributeSchemaType A string that specifies the schema type of the attribute. It may be one of CORE, STANDARD or CUSTOM. Core and standard attributes are present out-of-the-box. Core attributes may not be updated or deleted. Standard attributes may not be deleted, but their mutable properties may be updated. Custom attributes may be deleted, and their mutable properties may be updated. New attributes are created with a schema type of CUSTOM.
type EnumSchemaAttributeSchemaType string

// List of EnumSchemaAttributeSchemaType
const (
	ENUMSCHEMAATTRIBUTESCHEMATYPE_CORE     EnumSchemaAttributeSchemaType = "CORE"
	ENUMSCHEMAATTRIBUTESCHEMATYPE_STANDARD EnumSchemaAttributeSchemaType = "STANDARD"
	ENUMSCHEMAATTRIBUTESCHEMATYPE_CUSTOM   EnumSchemaAttributeSchemaType = "CUSTOM"
)

// All allowed values of EnumSchemaAttributeSchemaType enum
var AllowedEnumSchemaAttributeSchemaTypeEnumValues = []EnumSchemaAttributeSchemaType{
	"CORE",
	"STANDARD",
	"CUSTOM",
}

func (v *EnumSchemaAttributeSchemaType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumSchemaAttributeSchemaType(value)
	for _, existing := range AllowedEnumSchemaAttributeSchemaTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumSchemaAttributeSchemaType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumSchemaAttributeSchemaTypeFromValue returns a pointer to a valid EnumSchemaAttributeSchemaType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumSchemaAttributeSchemaTypeFromValue(v string) (*EnumSchemaAttributeSchemaType, error) {
	ev := EnumSchemaAttributeSchemaType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumSchemaAttributeSchemaType: valid values are %v", v, AllowedEnumSchemaAttributeSchemaTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumSchemaAttributeSchemaType) IsValid() bool {
	for _, existing := range AllowedEnumSchemaAttributeSchemaTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumSchemaAttributeSchemaType value
func (v EnumSchemaAttributeSchemaType) Ptr() *EnumSchemaAttributeSchemaType {
	return &v
}

type NullableEnumSchemaAttributeSchemaType struct {
	value *EnumSchemaAttributeSchemaType
	isSet bool
}

func (v NullableEnumSchemaAttributeSchemaType) Get() *EnumSchemaAttributeSchemaType {
	return v.value
}

func (v *NullableEnumSchemaAttributeSchemaType) Set(val *EnumSchemaAttributeSchemaType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumSchemaAttributeSchemaType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumSchemaAttributeSchemaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumSchemaAttributeSchemaType(val *EnumSchemaAttributeSchemaType) *NullableEnumSchemaAttributeSchemaType {
	return &NullableEnumSchemaAttributeSchemaType{value: val, isSet: true}
}

func (v NullableEnumSchemaAttributeSchemaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumSchemaAttributeSchemaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
