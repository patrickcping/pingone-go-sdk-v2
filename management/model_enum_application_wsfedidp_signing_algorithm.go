/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumApplicationWSFEDIDPSigningAlgorithm The signature algorithm to be used for signing. Algorithms supported `SHA256withRSA`, `SHA384withRSA`, `SHA512withRSA`, `SHA256withECDSA`, `SHA384withECDSA`, and `SHA512withECDSA`.
type EnumApplicationWSFEDIDPSigningAlgorithm string

// List of EnumApplicationWSFEDIDPSigningAlgorithm
const (
	ENUMAPPLICATIONWSFEDIDPSIGNINGALGORITHM_SHA256WITH_RSA   EnumApplicationWSFEDIDPSigningAlgorithm = "SHA256withRSA"
	ENUMAPPLICATIONWSFEDIDPSIGNINGALGORITHM_SHA384WITH_RSA   EnumApplicationWSFEDIDPSigningAlgorithm = "SHA384withRSA"
	ENUMAPPLICATIONWSFEDIDPSIGNINGALGORITHM_SHA512WITH_RSA   EnumApplicationWSFEDIDPSigningAlgorithm = "SHA512withRSA"
	ENUMAPPLICATIONWSFEDIDPSIGNINGALGORITHM_SHA256WITH_ECDSA EnumApplicationWSFEDIDPSigningAlgorithm = "SHA256withECDSA"
	ENUMAPPLICATIONWSFEDIDPSIGNINGALGORITHM_SHA384WITH_ECDSA EnumApplicationWSFEDIDPSigningAlgorithm = "SHA384withECDSA"
	ENUMAPPLICATIONWSFEDIDPSIGNINGALGORITHM_SHA512WITH_ECDSA EnumApplicationWSFEDIDPSigningAlgorithm = "SHA512withECDSA"
)

// All allowed values of EnumApplicationWSFEDIDPSigningAlgorithm enum
var AllowedEnumApplicationWSFEDIDPSigningAlgorithmEnumValues = []EnumApplicationWSFEDIDPSigningAlgorithm{
	"SHA256withRSA",
	"SHA384withRSA",
	"SHA512withRSA",
	"SHA256withECDSA",
	"SHA384withECDSA",
	"SHA512withECDSA",
}

func (v *EnumApplicationWSFEDIDPSigningAlgorithm) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumApplicationWSFEDIDPSigningAlgorithm(value)
	for _, existing := range AllowedEnumApplicationWSFEDIDPSigningAlgorithmEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumApplicationWSFEDIDPSigningAlgorithm(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumApplicationWSFEDIDPSigningAlgorithmFromValue returns a pointer to a valid EnumApplicationWSFEDIDPSigningAlgorithm
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumApplicationWSFEDIDPSigningAlgorithmFromValue(v string) (*EnumApplicationWSFEDIDPSigningAlgorithm, error) {
	ev := EnumApplicationWSFEDIDPSigningAlgorithm(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumApplicationWSFEDIDPSigningAlgorithm: valid values are %v", v, AllowedEnumApplicationWSFEDIDPSigningAlgorithmEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumApplicationWSFEDIDPSigningAlgorithm) IsValid() bool {
	for _, existing := range AllowedEnumApplicationWSFEDIDPSigningAlgorithmEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumApplicationWSFEDIDPSigningAlgorithm value
func (v EnumApplicationWSFEDIDPSigningAlgorithm) Ptr() *EnumApplicationWSFEDIDPSigningAlgorithm {
	return &v
}

type NullableEnumApplicationWSFEDIDPSigningAlgorithm struct {
	value *EnumApplicationWSFEDIDPSigningAlgorithm
	isSet bool
}

func (v NullableEnumApplicationWSFEDIDPSigningAlgorithm) Get() *EnumApplicationWSFEDIDPSigningAlgorithm {
	return v.value
}

func (v *NullableEnumApplicationWSFEDIDPSigningAlgorithm) Set(val *EnumApplicationWSFEDIDPSigningAlgorithm) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumApplicationWSFEDIDPSigningAlgorithm) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumApplicationWSFEDIDPSigningAlgorithm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumApplicationWSFEDIDPSigningAlgorithm(val *EnumApplicationWSFEDIDPSigningAlgorithm) *NullableEnumApplicationWSFEDIDPSigningAlgorithm {
	return &NullableEnumApplicationWSFEDIDPSigningAlgorithm{value: val, isSet: true}
}

func (v NullableEnumApplicationWSFEDIDPSigningAlgorithm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumApplicationWSFEDIDPSigningAlgorithm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
