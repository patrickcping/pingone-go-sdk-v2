/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the IdentityProviderCommonRegistration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityProviderCommonRegistration{}

// IdentityProviderCommonRegistration struct for IdentityProviderCommonRegistration
type IdentityProviderCommonRegistration struct {
	Population *IdentityProviderCommonRegistrationPopulation `json:"population,omitempty"`
}

// NewIdentityProviderCommonRegistration instantiates a new IdentityProviderCommonRegistration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityProviderCommonRegistration() *IdentityProviderCommonRegistration {
	this := IdentityProviderCommonRegistration{}
	return &this
}

// NewIdentityProviderCommonRegistrationWithDefaults instantiates a new IdentityProviderCommonRegistration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityProviderCommonRegistrationWithDefaults() *IdentityProviderCommonRegistration {
	this := IdentityProviderCommonRegistration{}
	return &this
}

// GetPopulation returns the Population field value if set, zero value otherwise.
func (o *IdentityProviderCommonRegistration) GetPopulation() IdentityProviderCommonRegistrationPopulation {
	if o == nil || IsNil(o.Population) {
		var ret IdentityProviderCommonRegistrationPopulation
		return ret
	}
	return *o.Population
}

// GetPopulationOk returns a tuple with the Population field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityProviderCommonRegistration) GetPopulationOk() (*IdentityProviderCommonRegistrationPopulation, bool) {
	if o == nil || IsNil(o.Population) {
		return nil, false
	}
	return o.Population, true
}

// HasPopulation returns a boolean if a field has been set.
func (o *IdentityProviderCommonRegistration) HasPopulation() bool {
	if o != nil && !IsNil(o.Population) {
		return true
	}

	return false
}

// SetPopulation gets a reference to the given IdentityProviderCommonRegistrationPopulation and assigns it to the Population field.
func (o *IdentityProviderCommonRegistration) SetPopulation(v IdentityProviderCommonRegistrationPopulation) {
	o.Population = &v
}

func (o IdentityProviderCommonRegistration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityProviderCommonRegistration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Population) {
		toSerialize["population"] = o.Population
	}
	return toSerialize, nil
}

type NullableIdentityProviderCommonRegistration struct {
	value *IdentityProviderCommonRegistration
	isSet bool
}

func (v NullableIdentityProviderCommonRegistration) Get() *IdentityProviderCommonRegistration {
	return v.value
}

func (v *NullableIdentityProviderCommonRegistration) Set(val *IdentityProviderCommonRegistration) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityProviderCommonRegistration) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityProviderCommonRegistration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityProviderCommonRegistration(val *IdentityProviderCommonRegistration) *NullableIdentityProviderCommonRegistration {
	return &NullableIdentityProviderCommonRegistration{value: val, isSet: true}
}

func (v NullableIdentityProviderCommonRegistration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityProviderCommonRegistration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
