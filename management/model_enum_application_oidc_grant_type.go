/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumApplicationOIDCGrantType the model 'EnumApplicationOIDCGrantType'
type EnumApplicationOIDCGrantType string

// List of EnumApplicationOIDCGrantType
const (
	ENUMAPPLICATIONOIDCGRANTTYPE_AUTHORIZATION_CODE EnumApplicationOIDCGrantType = "AUTHORIZATION_CODE"
	ENUMAPPLICATIONOIDCGRANTTYPE_IMPLICIT           EnumApplicationOIDCGrantType = "IMPLICIT"
	ENUMAPPLICATIONOIDCGRANTTYPE_REFRESH_TOKEN      EnumApplicationOIDCGrantType = "REFRESH_TOKEN"
	ENUMAPPLICATIONOIDCGRANTTYPE_CLIENT_CREDENTIALS EnumApplicationOIDCGrantType = "CLIENT_CREDENTIALS"
	ENUMAPPLICATIONOIDCGRANTTYPE_DEVICE_CODE        EnumApplicationOIDCGrantType = "DEVICE_CODE"
)

// All allowed values of EnumApplicationOIDCGrantType enum
var AllowedEnumApplicationOIDCGrantTypeEnumValues = []EnumApplicationOIDCGrantType{
	"AUTHORIZATION_CODE",
	"IMPLICIT",
	"REFRESH_TOKEN",
	"CLIENT_CREDENTIALS",
	"DEVICE_CODE",
}

func (v *EnumApplicationOIDCGrantType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumApplicationOIDCGrantType(value)
	for _, existing := range AllowedEnumApplicationOIDCGrantTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumApplicationOIDCGrantType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumApplicationOIDCGrantTypeFromValue returns a pointer to a valid EnumApplicationOIDCGrantType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumApplicationOIDCGrantTypeFromValue(v string) (*EnumApplicationOIDCGrantType, error) {
	ev := EnumApplicationOIDCGrantType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumApplicationOIDCGrantType: valid values are %v", v, AllowedEnumApplicationOIDCGrantTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumApplicationOIDCGrantType) IsValid() bool {
	for _, existing := range AllowedEnumApplicationOIDCGrantTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumApplicationOIDCGrantType value
func (v EnumApplicationOIDCGrantType) Ptr() *EnumApplicationOIDCGrantType {
	return &v
}

type NullableEnumApplicationOIDCGrantType struct {
	value *EnumApplicationOIDCGrantType
	isSet bool
}

func (v NullableEnumApplicationOIDCGrantType) Get() *EnumApplicationOIDCGrantType {
	return v.value
}

func (v *NullableEnumApplicationOIDCGrantType) Set(val *EnumApplicationOIDCGrantType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumApplicationOIDCGrantType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumApplicationOIDCGrantType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumApplicationOIDCGrantType(val *EnumApplicationOIDCGrantType) *NullableEnumApplicationOIDCGrantType {
	return &NullableEnumApplicationOIDCGrantType{value: val, isSet: true}
}

func (v NullableEnumApplicationOIDCGrantType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumApplicationOIDCGrantType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
