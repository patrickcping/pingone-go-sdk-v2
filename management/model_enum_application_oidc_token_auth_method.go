/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumApplicationOIDCTokenAuthMethod A string that specifies the client authentication methods supported by the token endpoint.
type EnumApplicationOIDCTokenAuthMethod string

// List of EnumApplicationOIDCTokenAuthMethod
const (
	ENUMAPPLICATIONOIDCTOKENAUTHMETHOD_NONE                EnumApplicationOIDCTokenAuthMethod = "NONE"
	ENUMAPPLICATIONOIDCTOKENAUTHMETHOD_CLIENT_SECRET_BASIC EnumApplicationOIDCTokenAuthMethod = "CLIENT_SECRET_BASIC"
	ENUMAPPLICATIONOIDCTOKENAUTHMETHOD_CLIENT_SECRET_POST  EnumApplicationOIDCTokenAuthMethod = "CLIENT_SECRET_POST"
	ENUMAPPLICATIONOIDCTOKENAUTHMETHOD_PRIVATE_KEY_JWT     EnumApplicationOIDCTokenAuthMethod = "PRIVATE_KEY_JWT"
	ENUMAPPLICATIONOIDCTOKENAUTHMETHOD_CLIENT_SECRET_JWT   EnumApplicationOIDCTokenAuthMethod = "CLIENT_SECRET_JWT"
)

// All allowed values of EnumApplicationOIDCTokenAuthMethod enum
var AllowedEnumApplicationOIDCTokenAuthMethodEnumValues = []EnumApplicationOIDCTokenAuthMethod{
	"NONE",
	"CLIENT_SECRET_BASIC",
	"CLIENT_SECRET_POST",
	"PRIVATE_KEY_JWT",
	"CLIENT_SECRET_JWT",
}

func (v *EnumApplicationOIDCTokenAuthMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumApplicationOIDCTokenAuthMethod(value)
	for _, existing := range AllowedEnumApplicationOIDCTokenAuthMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumApplicationOIDCTokenAuthMethod(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumApplicationOIDCTokenAuthMethodFromValue returns a pointer to a valid EnumApplicationOIDCTokenAuthMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumApplicationOIDCTokenAuthMethodFromValue(v string) (*EnumApplicationOIDCTokenAuthMethod, error) {
	ev := EnumApplicationOIDCTokenAuthMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumApplicationOIDCTokenAuthMethod: valid values are %v", v, AllowedEnumApplicationOIDCTokenAuthMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumApplicationOIDCTokenAuthMethod) IsValid() bool {
	for _, existing := range AllowedEnumApplicationOIDCTokenAuthMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumApplicationOIDCTokenAuthMethod value
func (v EnumApplicationOIDCTokenAuthMethod) Ptr() *EnumApplicationOIDCTokenAuthMethod {
	return &v
}

type NullableEnumApplicationOIDCTokenAuthMethod struct {
	value *EnumApplicationOIDCTokenAuthMethod
	isSet bool
}

func (v NullableEnumApplicationOIDCTokenAuthMethod) Get() *EnumApplicationOIDCTokenAuthMethod {
	return v.value
}

func (v *NullableEnumApplicationOIDCTokenAuthMethod) Set(val *EnumApplicationOIDCTokenAuthMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumApplicationOIDCTokenAuthMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumApplicationOIDCTokenAuthMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumApplicationOIDCTokenAuthMethod(val *EnumApplicationOIDCTokenAuthMethod) *NullableEnumApplicationOIDCTokenAuthMethod {
	return &NullableEnumApplicationOIDCTokenAuthMethod{value: val, isSet: true}
}

func (v NullableEnumApplicationOIDCTokenAuthMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumApplicationOIDCTokenAuthMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
