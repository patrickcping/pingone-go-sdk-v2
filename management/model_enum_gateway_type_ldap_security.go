/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumGatewayTypeLDAPSecurity A string that specifies the connection security type. Options are None, TLS, and StartTLS. The default value is None.
type EnumGatewayTypeLDAPSecurity string

// List of EnumGatewayTypeLDAPSecurity
const (
	ENUMGATEWAYTYPELDAPSECURITY_NONE      EnumGatewayTypeLDAPSecurity = "None"
	ENUMGATEWAYTYPELDAPSECURITY_TLS       EnumGatewayTypeLDAPSecurity = "TLS"
	ENUMGATEWAYTYPELDAPSECURITY_START_TLS EnumGatewayTypeLDAPSecurity = "StartTLS"
)

// All allowed values of EnumGatewayTypeLDAPSecurity enum
var AllowedEnumGatewayTypeLDAPSecurityEnumValues = []EnumGatewayTypeLDAPSecurity{
	"None",
	"TLS",
	"StartTLS",
}

func (v *EnumGatewayTypeLDAPSecurity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumGatewayTypeLDAPSecurity(value)
	for _, existing := range AllowedEnumGatewayTypeLDAPSecurityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumGatewayTypeLDAPSecurity(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumGatewayTypeLDAPSecurityFromValue returns a pointer to a valid EnumGatewayTypeLDAPSecurity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumGatewayTypeLDAPSecurityFromValue(v string) (*EnumGatewayTypeLDAPSecurity, error) {
	ev := EnumGatewayTypeLDAPSecurity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumGatewayTypeLDAPSecurity: valid values are %v", v, AllowedEnumGatewayTypeLDAPSecurityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumGatewayTypeLDAPSecurity) IsValid() bool {
	for _, existing := range AllowedEnumGatewayTypeLDAPSecurityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumGatewayTypeLDAPSecurity value
func (v EnumGatewayTypeLDAPSecurity) Ptr() *EnumGatewayTypeLDAPSecurity {
	return &v
}

type NullableEnumGatewayTypeLDAPSecurity struct {
	value *EnumGatewayTypeLDAPSecurity
	isSet bool
}

func (v NullableEnumGatewayTypeLDAPSecurity) Get() *EnumGatewayTypeLDAPSecurity {
	return v.value
}

func (v *NullableEnumGatewayTypeLDAPSecurity) Set(val *EnumGatewayTypeLDAPSecurity) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumGatewayTypeLDAPSecurity) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumGatewayTypeLDAPSecurity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumGatewayTypeLDAPSecurity(val *EnumGatewayTypeLDAPSecurity) *NullableEnumGatewayTypeLDAPSecurity {
	return &NullableEnumGatewayTypeLDAPSecurity{value: val, isSet: true}
}

func (v NullableEnumGatewayTypeLDAPSecurity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumGatewayTypeLDAPSecurity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
