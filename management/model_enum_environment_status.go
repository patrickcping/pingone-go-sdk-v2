/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumEnvironmentStatus The status of an environment. (*Required for the Update Environment Status request.) This can be null, `ACTIVE` and `DELETE_PENDING` (soft-delete). The maximum number of Production environments that can be in the `DELETE_PENDING` state is set to 100.
type EnumEnvironmentStatus string

// List of EnumEnvironmentStatus
const (
	ENUMENVIRONMENTSTATUS_ACTIVE EnumEnvironmentStatus = "ACTIVE"
	ENUMENVIRONMENTSTATUS_DELETE_PENDING EnumEnvironmentStatus = "DELETE_PENDING"
)

// All allowed values of EnumEnvironmentStatus enum
var AllowedEnumEnvironmentStatusEnumValues = []EnumEnvironmentStatus{
	"ACTIVE",
	"DELETE_PENDING",
}

func (v *EnumEnvironmentStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumEnvironmentStatus(value)
	for _, existing := range AllowedEnumEnvironmentStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumEnvironmentStatus(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumEnvironmentStatusFromValue returns a pointer to a valid EnumEnvironmentStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumEnvironmentStatusFromValue(v string) (*EnumEnvironmentStatus, error) {
	ev := EnumEnvironmentStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumEnvironmentStatus: valid values are %v", v, AllowedEnumEnvironmentStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumEnvironmentStatus) IsValid() bool {
	for _, existing := range AllowedEnumEnvironmentStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumEnvironmentStatus value
func (v EnumEnvironmentStatus) Ptr() *EnumEnvironmentStatus {
	return &v
}

type NullableEnumEnvironmentStatus struct {
	value *EnumEnvironmentStatus
	isSet bool
}

func (v NullableEnumEnvironmentStatus) Get() *EnumEnvironmentStatus {
	return v.value
}

func (v *NullableEnumEnvironmentStatus) Set(val *EnumEnvironmentStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumEnvironmentStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumEnvironmentStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumEnvironmentStatus(val *EnumEnvironmentStatus) *NullableEnumEnvironmentStatus {
	return &NullableEnumEnvironmentStatus{value: val, isSet: true}
}

func (v NullableEnumEnvironmentStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumEnvironmentStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

