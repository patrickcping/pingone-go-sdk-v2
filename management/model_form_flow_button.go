/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
)

// checks if the FormFlowButton type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormFlowButton{}

// FormFlowButton struct for FormFlowButton
type FormFlowButton struct {
	// A string that specifies an identifier for the field component.
	Key string `json:"key"`
	// A string that specifies the button label.
	Label  string      `json:"label"`
	Styles *FormStyles `json:"styles,omitempty"`
}

// NewFormFlowButton instantiates a new FormFlowButton object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormFlowButton(key string, label string) *FormFlowButton {
	this := FormFlowButton{}
	this.Key = key
	this.Label = label
	return &this
}

// NewFormFlowButtonWithDefaults instantiates a new FormFlowButton object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormFlowButtonWithDefaults() *FormFlowButton {
	this := FormFlowButton{}
	return &this
}

// GetKey returns the Key field value
func (o *FormFlowButton) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *FormFlowButton) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *FormFlowButton) SetKey(v string) {
	o.Key = v
}

// GetLabel returns the Label field value
func (o *FormFlowButton) GetLabel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Label
}

// GetLabelOk returns a tuple with the Label field value
// and a boolean to check if the value has been set.
func (o *FormFlowButton) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Label, true
}

// SetLabel sets field value
func (o *FormFlowButton) SetLabel(v string) {
	o.Label = v
}

// GetStyles returns the Styles field value if set, zero value otherwise.
func (o *FormFlowButton) GetStyles() FormStyles {
	if o == nil || IsNil(o.Styles) {
		var ret FormStyles
		return ret
	}
	return *o.Styles
}

// GetStylesOk returns a tuple with the Styles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormFlowButton) GetStylesOk() (*FormStyles, bool) {
	if o == nil || IsNil(o.Styles) {
		return nil, false
	}
	return o.Styles, true
}

// HasStyles returns a boolean if a field has been set.
func (o *FormFlowButton) HasStyles() bool {
	if o != nil && !IsNil(o.Styles) {
		return true
	}

	return false
}

// SetStyles gets a reference to the given FormStyles and assigns it to the Styles field.
func (o *FormFlowButton) SetStyles(v FormStyles) {
	o.Styles = &v
}

func (o FormFlowButton) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormFlowButton) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	toSerialize["label"] = o.Label
	if !IsNil(o.Styles) {
		toSerialize["styles"] = o.Styles
	}
	return toSerialize, nil
}

type NullableFormFlowButton struct {
	value *FormFlowButton
	isSet bool
}

func (v NullableFormFlowButton) Get() *FormFlowButton {
	return v.value
}

func (v *NullableFormFlowButton) Set(val *FormFlowButton) {
	v.value = val
	v.isSet = true
}

func (v NullableFormFlowButton) IsSet() bool {
	return v.isSet
}

func (v *NullableFormFlowButton) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormFlowButton(val *FormFlowButton) *NullableFormFlowButton {
	return &NullableFormFlowButton{value: val, isSet: true}
}

func (v NullableFormFlowButton) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormFlowButton) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
