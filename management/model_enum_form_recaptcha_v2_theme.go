/*
PingOne Platform API - SSO and Base

The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package management

import (
	"encoding/json"
	"fmt"
)

// EnumFormRecaptchaV2Theme A string that specifies the theme of the reCAPTCHA widget.
type EnumFormRecaptchaV2Theme string

// List of EnumFormRecaptchaV2Theme
const (
	ENUMFORMRECAPTCHAV2THEME_LIGHT EnumFormRecaptchaV2Theme = "LIGHT"
	ENUMFORMRECAPTCHAV2THEME_DARK  EnumFormRecaptchaV2Theme = "DARK"
)

// All allowed values of EnumFormRecaptchaV2Theme enum
var AllowedEnumFormRecaptchaV2ThemeEnumValues = []EnumFormRecaptchaV2Theme{
	"LIGHT",
	"DARK",
}

func (v *EnumFormRecaptchaV2Theme) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumFormRecaptchaV2Theme(value)
	for _, existing := range AllowedEnumFormRecaptchaV2ThemeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EnumFormRecaptchaV2Theme", value)
}

// NewEnumFormRecaptchaV2ThemeFromValue returns a pointer to a valid EnumFormRecaptchaV2Theme
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumFormRecaptchaV2ThemeFromValue(v string) (*EnumFormRecaptchaV2Theme, error) {
	ev := EnumFormRecaptchaV2Theme(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumFormRecaptchaV2Theme: valid values are %v", v, AllowedEnumFormRecaptchaV2ThemeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumFormRecaptchaV2Theme) IsValid() bool {
	for _, existing := range AllowedEnumFormRecaptchaV2ThemeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumFormRecaptchaV2Theme value
func (v EnumFormRecaptchaV2Theme) Ptr() *EnumFormRecaptchaV2Theme {
	return &v
}

type NullableEnumFormRecaptchaV2Theme struct {
	value *EnumFormRecaptchaV2Theme
	isSet bool
}

func (v NullableEnumFormRecaptchaV2Theme) Get() *EnumFormRecaptchaV2Theme {
	return v.value
}

func (v *NullableEnumFormRecaptchaV2Theme) Set(val *EnumFormRecaptchaV2Theme) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumFormRecaptchaV2Theme) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumFormRecaptchaV2Theme) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumFormRecaptchaV2Theme(val *EnumFormRecaptchaV2Theme) *NullableEnumFormRecaptchaV2Theme {
	return &NullableEnumFormRecaptchaV2Theme{value: val, isSet: true}
}

func (v NullableEnumFormRecaptchaV2Theme) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumFormRecaptchaV2Theme) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
