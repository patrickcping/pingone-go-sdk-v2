/*
PingOne Platform API - PingOne Risk

The PingOne Platform API covering the PingOne Risk service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package risk

import (
	"encoding/json"
)

// checks if the RiskPredictorCompositeIPRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RiskPredictorCompositeIPRange{}

// RiskPredictorCompositeIPRange The mapping of risk levels for the IP ranges specified.
type RiskPredictorCompositeIPRange struct {
	Contains    *string                              `json:"contains,omitempty"`
	NotContains *string                              `json:"notContains,omitempty"`
	Equals      *string                              `json:"equals,omitempty"`
	NotEquals   *string                              `json:"notEquals,omitempty"`
	Type        *EnumPredictorCompositeConditionType `json:"type,omitempty"`
	// List of CIDRs to include
	IpRange []string `json:"ipRange"`
	Ip      *string  `json:"ip,omitempty"`
}

// NewRiskPredictorCompositeIPRange instantiates a new RiskPredictorCompositeIPRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRiskPredictorCompositeIPRange(ipRange []string) *RiskPredictorCompositeIPRange {
	this := RiskPredictorCompositeIPRange{}
	this.IpRange = ipRange
	return &this
}

// NewRiskPredictorCompositeIPRangeWithDefaults instantiates a new RiskPredictorCompositeIPRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskPredictorCompositeIPRangeWithDefaults() *RiskPredictorCompositeIPRange {
	this := RiskPredictorCompositeIPRange{}
	return &this
}

// GetContains returns the Contains field value if set, zero value otherwise.
func (o *RiskPredictorCompositeIPRange) GetContains() string {
	if o == nil || IsNil(o.Contains) {
		var ret string
		return ret
	}
	return *o.Contains
}

// GetContainsOk returns a tuple with the Contains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskPredictorCompositeIPRange) GetContainsOk() (*string, bool) {
	if o == nil || IsNil(o.Contains) {
		return nil, false
	}
	return o.Contains, true
}

// HasContains returns a boolean if a field has been set.
func (o *RiskPredictorCompositeIPRange) HasContains() bool {
	if o != nil && !IsNil(o.Contains) {
		return true
	}

	return false
}

// SetContains gets a reference to the given string and assigns it to the Contains field.
func (o *RiskPredictorCompositeIPRange) SetContains(v string) {
	o.Contains = &v
}

// GetNotContains returns the NotContains field value if set, zero value otherwise.
func (o *RiskPredictorCompositeIPRange) GetNotContains() string {
	if o == nil || IsNil(o.NotContains) {
		var ret string
		return ret
	}
	return *o.NotContains
}

// GetNotContainsOk returns a tuple with the NotContains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskPredictorCompositeIPRange) GetNotContainsOk() (*string, bool) {
	if o == nil || IsNil(o.NotContains) {
		return nil, false
	}
	return o.NotContains, true
}

// HasNotContains returns a boolean if a field has been set.
func (o *RiskPredictorCompositeIPRange) HasNotContains() bool {
	if o != nil && !IsNil(o.NotContains) {
		return true
	}

	return false
}

// SetNotContains gets a reference to the given string and assigns it to the NotContains field.
func (o *RiskPredictorCompositeIPRange) SetNotContains(v string) {
	o.NotContains = &v
}

// GetEquals returns the Equals field value if set, zero value otherwise.
func (o *RiskPredictorCompositeIPRange) GetEquals() string {
	if o == nil || IsNil(o.Equals) {
		var ret string
		return ret
	}
	return *o.Equals
}

// GetEqualsOk returns a tuple with the Equals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskPredictorCompositeIPRange) GetEqualsOk() (*string, bool) {
	if o == nil || IsNil(o.Equals) {
		return nil, false
	}
	return o.Equals, true
}

// HasEquals returns a boolean if a field has been set.
func (o *RiskPredictorCompositeIPRange) HasEquals() bool {
	if o != nil && !IsNil(o.Equals) {
		return true
	}

	return false
}

// SetEquals gets a reference to the given string and assigns it to the Equals field.
func (o *RiskPredictorCompositeIPRange) SetEquals(v string) {
	o.Equals = &v
}

// GetNotEquals returns the NotEquals field value if set, zero value otherwise.
func (o *RiskPredictorCompositeIPRange) GetNotEquals() string {
	if o == nil || IsNil(o.NotEquals) {
		var ret string
		return ret
	}
	return *o.NotEquals
}

// GetNotEqualsOk returns a tuple with the NotEquals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskPredictorCompositeIPRange) GetNotEqualsOk() (*string, bool) {
	if o == nil || IsNil(o.NotEquals) {
		return nil, false
	}
	return o.NotEquals, true
}

// HasNotEquals returns a boolean if a field has been set.
func (o *RiskPredictorCompositeIPRange) HasNotEquals() bool {
	if o != nil && !IsNil(o.NotEquals) {
		return true
	}

	return false
}

// SetNotEquals gets a reference to the given string and assigns it to the NotEquals field.
func (o *RiskPredictorCompositeIPRange) SetNotEquals(v string) {
	o.NotEquals = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RiskPredictorCompositeIPRange) GetType() EnumPredictorCompositeConditionType {
	if o == nil || IsNil(o.Type) {
		var ret EnumPredictorCompositeConditionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskPredictorCompositeIPRange) GetTypeOk() (*EnumPredictorCompositeConditionType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RiskPredictorCompositeIPRange) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given EnumPredictorCompositeConditionType and assigns it to the Type field.
func (o *RiskPredictorCompositeIPRange) SetType(v EnumPredictorCompositeConditionType) {
	o.Type = &v
}

// GetIpRange returns the IpRange field value
func (o *RiskPredictorCompositeIPRange) GetIpRange() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.IpRange
}

// GetIpRangeOk returns a tuple with the IpRange field value
// and a boolean to check if the value has been set.
func (o *RiskPredictorCompositeIPRange) GetIpRangeOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IpRange, true
}

// SetIpRange sets field value
func (o *RiskPredictorCompositeIPRange) SetIpRange(v []string) {
	o.IpRange = v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *RiskPredictorCompositeIPRange) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskPredictorCompositeIPRange) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *RiskPredictorCompositeIPRange) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *RiskPredictorCompositeIPRange) SetIp(v string) {
	o.Ip = &v
}

func (o RiskPredictorCompositeIPRange) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RiskPredictorCompositeIPRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Contains) {
		toSerialize["contains"] = o.Contains
	}
	if !IsNil(o.NotContains) {
		toSerialize["notContains"] = o.NotContains
	}
	if !IsNil(o.Equals) {
		toSerialize["equals"] = o.Equals
	}
	if !IsNil(o.NotEquals) {
		toSerialize["notEquals"] = o.NotEquals
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["ipRange"] = o.IpRange
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	return toSerialize, nil
}

type NullableRiskPredictorCompositeIPRange struct {
	value *RiskPredictorCompositeIPRange
	isSet bool
}

func (v NullableRiskPredictorCompositeIPRange) Get() *RiskPredictorCompositeIPRange {
	return v.value
}

func (v *NullableRiskPredictorCompositeIPRange) Set(val *RiskPredictorCompositeIPRange) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskPredictorCompositeIPRange) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskPredictorCompositeIPRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskPredictorCompositeIPRange(val *RiskPredictorCompositeIPRange) *NullableRiskPredictorCompositeIPRange {
	return &NullableRiskPredictorCompositeIPRange{value: val, isSet: true}
}

func (v NullableRiskPredictorCompositeIPRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskPredictorCompositeIPRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
