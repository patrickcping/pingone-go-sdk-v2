/*
PingOne Platform API - PingOne Risk

The PingOne Platform API covering the PingOne Risk service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package risk

import (
	"encoding/json"
)

// checks if the RiskPredictorVelocityAllOfUse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RiskPredictorVelocityAllOfUse{}

// RiskPredictorVelocityAllOfUse struct for RiskPredictorVelocityAllOfUse
type RiskPredictorVelocityAllOfUse struct {
	High   *float32                      `json:"high,omitempty"`
	Medium *float32                      `json:"medium,omitempty"`
	Type   *EnumPredictorVelocityUseType `json:"type,omitempty"`
}

// NewRiskPredictorVelocityAllOfUse instantiates a new RiskPredictorVelocityAllOfUse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRiskPredictorVelocityAllOfUse() *RiskPredictorVelocityAllOfUse {
	this := RiskPredictorVelocityAllOfUse{}
	return &this
}

// NewRiskPredictorVelocityAllOfUseWithDefaults instantiates a new RiskPredictorVelocityAllOfUse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskPredictorVelocityAllOfUseWithDefaults() *RiskPredictorVelocityAllOfUse {
	this := RiskPredictorVelocityAllOfUse{}
	return &this
}

// GetHigh returns the High field value if set, zero value otherwise.
func (o *RiskPredictorVelocityAllOfUse) GetHigh() float32 {
	if o == nil || IsNil(o.High) {
		var ret float32
		return ret
	}
	return *o.High
}

// GetHighOk returns a tuple with the High field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskPredictorVelocityAllOfUse) GetHighOk() (*float32, bool) {
	if o == nil || IsNil(o.High) {
		return nil, false
	}
	return o.High, true
}

// HasHigh returns a boolean if a field has been set.
func (o *RiskPredictorVelocityAllOfUse) HasHigh() bool {
	if o != nil && !IsNil(o.High) {
		return true
	}

	return false
}

// SetHigh gets a reference to the given float32 and assigns it to the High field.
func (o *RiskPredictorVelocityAllOfUse) SetHigh(v float32) {
	o.High = &v
}

// GetMedium returns the Medium field value if set, zero value otherwise.
func (o *RiskPredictorVelocityAllOfUse) GetMedium() float32 {
	if o == nil || IsNil(o.Medium) {
		var ret float32
		return ret
	}
	return *o.Medium
}

// GetMediumOk returns a tuple with the Medium field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskPredictorVelocityAllOfUse) GetMediumOk() (*float32, bool) {
	if o == nil || IsNil(o.Medium) {
		return nil, false
	}
	return o.Medium, true
}

// HasMedium returns a boolean if a field has been set.
func (o *RiskPredictorVelocityAllOfUse) HasMedium() bool {
	if o != nil && !IsNil(o.Medium) {
		return true
	}

	return false
}

// SetMedium gets a reference to the given float32 and assigns it to the Medium field.
func (o *RiskPredictorVelocityAllOfUse) SetMedium(v float32) {
	o.Medium = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RiskPredictorVelocityAllOfUse) GetType() EnumPredictorVelocityUseType {
	if o == nil || IsNil(o.Type) {
		var ret EnumPredictorVelocityUseType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskPredictorVelocityAllOfUse) GetTypeOk() (*EnumPredictorVelocityUseType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RiskPredictorVelocityAllOfUse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given EnumPredictorVelocityUseType and assigns it to the Type field.
func (o *RiskPredictorVelocityAllOfUse) SetType(v EnumPredictorVelocityUseType) {
	o.Type = &v
}

func (o RiskPredictorVelocityAllOfUse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RiskPredictorVelocityAllOfUse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.High) {
		toSerialize["high"] = o.High
	}
	if !IsNil(o.Medium) {
		toSerialize["medium"] = o.Medium
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableRiskPredictorVelocityAllOfUse struct {
	value *RiskPredictorVelocityAllOfUse
	isSet bool
}

func (v NullableRiskPredictorVelocityAllOfUse) Get() *RiskPredictorVelocityAllOfUse {
	return v.value
}

func (v *NullableRiskPredictorVelocityAllOfUse) Set(val *RiskPredictorVelocityAllOfUse) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskPredictorVelocityAllOfUse) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskPredictorVelocityAllOfUse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskPredictorVelocityAllOfUse(val *RiskPredictorVelocityAllOfUse) *NullableRiskPredictorVelocityAllOfUse {
	return &NullableRiskPredictorVelocityAllOfUse{value: val, isSet: true}
}

func (v NullableRiskPredictorVelocityAllOfUse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskPredictorVelocityAllOfUse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
