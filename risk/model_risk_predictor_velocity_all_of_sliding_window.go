/*
PingOne Platform API - PingOne Risk

The PingOne Platform API covering the PingOne Risk service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package risk

import (
	"encoding/json"
)

// checks if the RiskPredictorVelocityAllOfSlidingWindow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RiskPredictorVelocityAllOfSlidingWindow{}

// RiskPredictorVelocityAllOfSlidingWindow struct for RiskPredictorVelocityAllOfSlidingWindow
type RiskPredictorVelocityAllOfSlidingWindow struct {
	MinSample *int32             `json:"minSample,omitempty"`
	Quantity  *int32             `json:"quantity,omitempty"`
	Unit      *EnumPredictorUnit `json:"unit,omitempty"`
}

// NewRiskPredictorVelocityAllOfSlidingWindow instantiates a new RiskPredictorVelocityAllOfSlidingWindow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRiskPredictorVelocityAllOfSlidingWindow() *RiskPredictorVelocityAllOfSlidingWindow {
	this := RiskPredictorVelocityAllOfSlidingWindow{}
	return &this
}

// NewRiskPredictorVelocityAllOfSlidingWindowWithDefaults instantiates a new RiskPredictorVelocityAllOfSlidingWindow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskPredictorVelocityAllOfSlidingWindowWithDefaults() *RiskPredictorVelocityAllOfSlidingWindow {
	this := RiskPredictorVelocityAllOfSlidingWindow{}
	return &this
}

// GetMinSample returns the MinSample field value if set, zero value otherwise.
func (o *RiskPredictorVelocityAllOfSlidingWindow) GetMinSample() int32 {
	if o == nil || IsNil(o.MinSample) {
		var ret int32
		return ret
	}
	return *o.MinSample
}

// GetMinSampleOk returns a tuple with the MinSample field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskPredictorVelocityAllOfSlidingWindow) GetMinSampleOk() (*int32, bool) {
	if o == nil || IsNil(o.MinSample) {
		return nil, false
	}
	return o.MinSample, true
}

// HasMinSample returns a boolean if a field has been set.
func (o *RiskPredictorVelocityAllOfSlidingWindow) HasMinSample() bool {
	if o != nil && !IsNil(o.MinSample) {
		return true
	}

	return false
}

// SetMinSample gets a reference to the given int32 and assigns it to the MinSample field.
func (o *RiskPredictorVelocityAllOfSlidingWindow) SetMinSample(v int32) {
	o.MinSample = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *RiskPredictorVelocityAllOfSlidingWindow) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskPredictorVelocityAllOfSlidingWindow) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *RiskPredictorVelocityAllOfSlidingWindow) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *RiskPredictorVelocityAllOfSlidingWindow) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *RiskPredictorVelocityAllOfSlidingWindow) GetUnit() EnumPredictorUnit {
	if o == nil || IsNil(o.Unit) {
		var ret EnumPredictorUnit
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskPredictorVelocityAllOfSlidingWindow) GetUnitOk() (*EnumPredictorUnit, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *RiskPredictorVelocityAllOfSlidingWindow) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given EnumPredictorUnit and assigns it to the Unit field.
func (o *RiskPredictorVelocityAllOfSlidingWindow) SetUnit(v EnumPredictorUnit) {
	o.Unit = &v
}

func (o RiskPredictorVelocityAllOfSlidingWindow) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RiskPredictorVelocityAllOfSlidingWindow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinSample) {
		toSerialize["minSample"] = o.MinSample
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	return toSerialize, nil
}

type NullableRiskPredictorVelocityAllOfSlidingWindow struct {
	value *RiskPredictorVelocityAllOfSlidingWindow
	isSet bool
}

func (v NullableRiskPredictorVelocityAllOfSlidingWindow) Get() *RiskPredictorVelocityAllOfSlidingWindow {
	return v.value
}

func (v *NullableRiskPredictorVelocityAllOfSlidingWindow) Set(val *RiskPredictorVelocityAllOfSlidingWindow) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskPredictorVelocityAllOfSlidingWindow) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskPredictorVelocityAllOfSlidingWindow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskPredictorVelocityAllOfSlidingWindow(val *RiskPredictorVelocityAllOfSlidingWindow) *NullableRiskPredictorVelocityAllOfSlidingWindow {
	return &NullableRiskPredictorVelocityAllOfSlidingWindow{value: val, isSet: true}
}

func (v NullableRiskPredictorVelocityAllOfSlidingWindow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskPredictorVelocityAllOfSlidingWindow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
