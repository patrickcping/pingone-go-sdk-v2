/*
PingOne Platform API - PingOne Risk

The PingOne Platform API covering the PingOne Risk service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package risk

import (
	"encoding/json"
	"fmt"
)

// EnumPredictorVelocityMeasure the model 'EnumPredictorVelocityMeasure'
type EnumPredictorVelocityMeasure string

// List of EnumPredictorVelocityMeasure
const (
	ENUMPREDICTORVELOCITYMEASURE_DISTINCT_COUNT EnumPredictorVelocityMeasure = "DISTINCT_COUNT"
)

// All allowed values of EnumPredictorVelocityMeasure enum
var AllowedEnumPredictorVelocityMeasureEnumValues = []EnumPredictorVelocityMeasure{
	"DISTINCT_COUNT",
}

func (v *EnumPredictorVelocityMeasure) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumPredictorVelocityMeasure(value)
	for _, existing := range AllowedEnumPredictorVelocityMeasureEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumPredictorVelocityMeasure(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumPredictorVelocityMeasureFromValue returns a pointer to a valid EnumPredictorVelocityMeasure
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumPredictorVelocityMeasureFromValue(v string) (*EnumPredictorVelocityMeasure, error) {
	ev := EnumPredictorVelocityMeasure(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumPredictorVelocityMeasure: valid values are %v", v, AllowedEnumPredictorVelocityMeasureEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumPredictorVelocityMeasure) IsValid() bool {
	for _, existing := range AllowedEnumPredictorVelocityMeasureEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumPredictorVelocityMeasure value
func (v EnumPredictorVelocityMeasure) Ptr() *EnumPredictorVelocityMeasure {
	return &v
}

type NullableEnumPredictorVelocityMeasure struct {
	value *EnumPredictorVelocityMeasure
	isSet bool
}

func (v NullableEnumPredictorVelocityMeasure) Get() *EnumPredictorVelocityMeasure {
	return v.value
}

func (v *NullableEnumPredictorVelocityMeasure) Set(val *EnumPredictorVelocityMeasure) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumPredictorVelocityMeasure) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumPredictorVelocityMeasure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumPredictorVelocityMeasure(val *EnumPredictorVelocityMeasure) *NullableEnumPredictorVelocityMeasure {
	return &NullableEnumPredictorVelocityMeasure{value: val, isSet: true}
}

func (v NullableEnumPredictorVelocityMeasure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumPredictorVelocityMeasure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
