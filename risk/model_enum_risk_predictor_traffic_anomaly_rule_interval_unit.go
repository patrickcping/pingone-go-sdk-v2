/*
PingOne Platform API - PingOne Risk

The PingOne Platform API covering the PingOne Risk service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package risk

import (
	"encoding/json"
	"fmt"
)

// EnumRiskPredictorTrafficAnomalyRuleIntervalUnit The time unit for defining the timeframe for tracking number of users on the device - can be `DAY` or `HOUR`
type EnumRiskPredictorTrafficAnomalyRuleIntervalUnit string

// List of EnumRiskPredictorTrafficAnomalyRuleIntervalUnit
const (
	ENUMRISKPREDICTORTRAFFICANOMALYRULEINTERVALUNIT_DAY  EnumRiskPredictorTrafficAnomalyRuleIntervalUnit = "DAY"
	ENUMRISKPREDICTORTRAFFICANOMALYRULEINTERVALUNIT_HOUR EnumRiskPredictorTrafficAnomalyRuleIntervalUnit = "HOUR"
)

// All allowed values of EnumRiskPredictorTrafficAnomalyRuleIntervalUnit enum
var AllowedEnumRiskPredictorTrafficAnomalyRuleIntervalUnitEnumValues = []EnumRiskPredictorTrafficAnomalyRuleIntervalUnit{
	"DAY",
	"HOUR",
}

func (v *EnumRiskPredictorTrafficAnomalyRuleIntervalUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumRiskPredictorTrafficAnomalyRuleIntervalUnit(value)
	for _, existing := range AllowedEnumRiskPredictorTrafficAnomalyRuleIntervalUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumRiskPredictorTrafficAnomalyRuleIntervalUnit(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumRiskPredictorTrafficAnomalyRuleIntervalUnitFromValue returns a pointer to a valid EnumRiskPredictorTrafficAnomalyRuleIntervalUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumRiskPredictorTrafficAnomalyRuleIntervalUnitFromValue(v string) (*EnumRiskPredictorTrafficAnomalyRuleIntervalUnit, error) {
	ev := EnumRiskPredictorTrafficAnomalyRuleIntervalUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumRiskPredictorTrafficAnomalyRuleIntervalUnit: valid values are %v", v, AllowedEnumRiskPredictorTrafficAnomalyRuleIntervalUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumRiskPredictorTrafficAnomalyRuleIntervalUnit) IsValid() bool {
	for _, existing := range AllowedEnumRiskPredictorTrafficAnomalyRuleIntervalUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumRiskPredictorTrafficAnomalyRuleIntervalUnit value
func (v EnumRiskPredictorTrafficAnomalyRuleIntervalUnit) Ptr() *EnumRiskPredictorTrafficAnomalyRuleIntervalUnit {
	return &v
}

type NullableEnumRiskPredictorTrafficAnomalyRuleIntervalUnit struct {
	value *EnumRiskPredictorTrafficAnomalyRuleIntervalUnit
	isSet bool
}

func (v NullableEnumRiskPredictorTrafficAnomalyRuleIntervalUnit) Get() *EnumRiskPredictorTrafficAnomalyRuleIntervalUnit {
	return v.value
}

func (v *NullableEnumRiskPredictorTrafficAnomalyRuleIntervalUnit) Set(val *EnumRiskPredictorTrafficAnomalyRuleIntervalUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumRiskPredictorTrafficAnomalyRuleIntervalUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumRiskPredictorTrafficAnomalyRuleIntervalUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumRiskPredictorTrafficAnomalyRuleIntervalUnit(val *EnumRiskPredictorTrafficAnomalyRuleIntervalUnit) *NullableEnumRiskPredictorTrafficAnomalyRuleIntervalUnit {
	return &NullableEnumRiskPredictorTrafficAnomalyRuleIntervalUnit{value: val, isSet: true}
}

func (v NullableEnumRiskPredictorTrafficAnomalyRuleIntervalUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumRiskPredictorTrafficAnomalyRuleIntervalUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
