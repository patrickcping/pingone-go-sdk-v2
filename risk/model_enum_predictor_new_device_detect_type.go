/*
PingOne Platform API - PingOne Risk

The PingOne Platform API covering the PingOne Risk service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package risk

import (
	"encoding/json"
	"fmt"
)

// EnumPredictorNewDeviceDetectType Used only for New Device predictors and Suspicious Device predictors. Both of these predictor types use the value `DEVICE` for `type`. The `detect` field is used to specify the kind of devices you are trying to detect.
type EnumPredictorNewDeviceDetectType string

// List of EnumPredictorNewDeviceDetectType
const (
	ENUMPREDICTORNEWDEVICEDETECTTYPE_NEW_DEVICE        EnumPredictorNewDeviceDetectType = "NEW_DEVICE"
	ENUMPREDICTORNEWDEVICEDETECTTYPE_SUSPICIOUS_DEVICE EnumPredictorNewDeviceDetectType = "SUSPICIOUS_DEVICE"
)

// All allowed values of EnumPredictorNewDeviceDetectType enum
var AllowedEnumPredictorNewDeviceDetectTypeEnumValues = []EnumPredictorNewDeviceDetectType{
	"NEW_DEVICE",
	"SUSPICIOUS_DEVICE",
}

func (v *EnumPredictorNewDeviceDetectType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumPredictorNewDeviceDetectType(value)
	for _, existing := range AllowedEnumPredictorNewDeviceDetectTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumPredictorNewDeviceDetectType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumPredictorNewDeviceDetectTypeFromValue returns a pointer to a valid EnumPredictorNewDeviceDetectType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumPredictorNewDeviceDetectTypeFromValue(v string) (*EnumPredictorNewDeviceDetectType, error) {
	ev := EnumPredictorNewDeviceDetectType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumPredictorNewDeviceDetectType: valid values are %v", v, AllowedEnumPredictorNewDeviceDetectTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumPredictorNewDeviceDetectType) IsValid() bool {
	for _, existing := range AllowedEnumPredictorNewDeviceDetectTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumPredictorNewDeviceDetectType value
func (v EnumPredictorNewDeviceDetectType) Ptr() *EnumPredictorNewDeviceDetectType {
	return &v
}

type NullableEnumPredictorNewDeviceDetectType struct {
	value *EnumPredictorNewDeviceDetectType
	isSet bool
}

func (v NullableEnumPredictorNewDeviceDetectType) Get() *EnumPredictorNewDeviceDetectType {
	return v.value
}

func (v *NullableEnumPredictorNewDeviceDetectType) Set(val *EnumPredictorNewDeviceDetectType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumPredictorNewDeviceDetectType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumPredictorNewDeviceDetectType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumPredictorNewDeviceDetectType(val *EnumPredictorNewDeviceDetectType) *NullableEnumPredictorNewDeviceDetectType {
	return &NullableEnumPredictorNewDeviceDetectType{value: val, isSet: true}
}

func (v NullableEnumPredictorNewDeviceDetectType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumPredictorNewDeviceDetectType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
