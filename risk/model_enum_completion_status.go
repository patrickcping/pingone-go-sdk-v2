/*
PingOne Platform API - PingOne Risk

The PingOne Platform API covering the PingOne Risk service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package risk

import (
	"encoding/json"
	"fmt"
)

// EnumCompletionStatus A string that specifies the state of the transaction. Options are `FAILED`, `IN_PROGRESS`, and `SUCCESS`. If a value is not provided, the value defaults to `IN_PROGRESS`. The value of this property can be changed only if its current state is `IN_PROGRESS`.
type EnumCompletionStatus string

// List of EnumCompletionStatus
const (
	ENUMCOMPLETIONSTATUS_FAILED      EnumCompletionStatus = "FAILED"
	ENUMCOMPLETIONSTATUS_IN_PROGRESS EnumCompletionStatus = "IN_PROGRESS"
	ENUMCOMPLETIONSTATUS_SUCCESS     EnumCompletionStatus = "SUCCESS"
)

// All allowed values of EnumCompletionStatus enum
var AllowedEnumCompletionStatusEnumValues = []EnumCompletionStatus{
	"FAILED",
	"IN_PROGRESS",
	"SUCCESS",
}

func (v *EnumCompletionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumCompletionStatus(value)
	for _, existing := range AllowedEnumCompletionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumCompletionStatus(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumCompletionStatusFromValue returns a pointer to a valid EnumCompletionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumCompletionStatusFromValue(v string) (*EnumCompletionStatus, error) {
	ev := EnumCompletionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumCompletionStatus: valid values are %v", v, AllowedEnumCompletionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumCompletionStatus) IsValid() bool {
	for _, existing := range AllowedEnumCompletionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumCompletionStatus value
func (v EnumCompletionStatus) Ptr() *EnumCompletionStatus {
	return &v
}

type NullableEnumCompletionStatus struct {
	value *EnumCompletionStatus
	isSet bool
}

func (v NullableEnumCompletionStatus) Get() *EnumCompletionStatus {
	return v.value
}

func (v *NullableEnumCompletionStatus) Set(val *EnumCompletionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumCompletionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumCompletionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumCompletionStatus(val *EnumCompletionStatus) *NullableEnumCompletionStatus {
	return &NullableEnumCompletionStatus{value: val, isSet: true}
}

func (v NullableEnumCompletionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumCompletionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
