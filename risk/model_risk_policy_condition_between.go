/*
PingOne Platform API - PingOne Risk

The PingOne Platform API covering the PingOne Risk service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package risk

import (
	"encoding/json"
)

// checks if the RiskPolicyConditionBetween type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RiskPolicyConditionBetween{}

// RiskPolicyConditionBetween struct for RiskPolicyConditionBetween
type RiskPolicyConditionBetween struct {
	// Required for policies of type `AGGREGATED_SCORES` or `AGGREGATED_WEIGHTS`. The beginning of the risk score range that will be translated into the specified risk level (`MEDIUM` or `HIGH`). Must be between `0` and `1000`.
	MinScore int32 `json:"minScore"`
	// Required for policies of type `AGGREGATED_SCORES` or `AGGREGATED_WEIGHTS`. The end of the risk score range that will be translated into the specified risk level (`MEDIUM` or `HIGH`). Must be between `0` and `1000`.
	MaxScore int32 `json:"maxScore"`
}

// NewRiskPolicyConditionBetween instantiates a new RiskPolicyConditionBetween object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRiskPolicyConditionBetween(minScore int32, maxScore int32) *RiskPolicyConditionBetween {
	this := RiskPolicyConditionBetween{}
	this.MinScore = minScore
	this.MaxScore = maxScore
	return &this
}

// NewRiskPolicyConditionBetweenWithDefaults instantiates a new RiskPolicyConditionBetween object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskPolicyConditionBetweenWithDefaults() *RiskPolicyConditionBetween {
	this := RiskPolicyConditionBetween{}
	return &this
}

// GetMinScore returns the MinScore field value
func (o *RiskPolicyConditionBetween) GetMinScore() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MinScore
}

// GetMinScoreOk returns a tuple with the MinScore field value
// and a boolean to check if the value has been set.
func (o *RiskPolicyConditionBetween) GetMinScoreOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinScore, true
}

// SetMinScore sets field value
func (o *RiskPolicyConditionBetween) SetMinScore(v int32) {
	o.MinScore = v
}

// GetMaxScore returns the MaxScore field value
func (o *RiskPolicyConditionBetween) GetMaxScore() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxScore
}

// GetMaxScoreOk returns a tuple with the MaxScore field value
// and a boolean to check if the value has been set.
func (o *RiskPolicyConditionBetween) GetMaxScoreOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxScore, true
}

// SetMaxScore sets field value
func (o *RiskPolicyConditionBetween) SetMaxScore(v int32) {
	o.MaxScore = v
}

func (o RiskPolicyConditionBetween) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RiskPolicyConditionBetween) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["minScore"] = o.MinScore
	toSerialize["maxScore"] = o.MaxScore
	return toSerialize, nil
}

type NullableRiskPolicyConditionBetween struct {
	value *RiskPolicyConditionBetween
	isSet bool
}

func (v NullableRiskPolicyConditionBetween) Get() *RiskPolicyConditionBetween {
	return v.value
}

func (v *NullableRiskPolicyConditionBetween) Set(val *RiskPolicyConditionBetween) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskPolicyConditionBetween) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskPolicyConditionBetween) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskPolicyConditionBetween(val *RiskPolicyConditionBetween) *NullableRiskPolicyConditionBetween {
	return &NullableRiskPolicyConditionBetween{value: val, isSet: true}
}

func (v NullableRiskPolicyConditionBetween) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskPolicyConditionBetween) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
