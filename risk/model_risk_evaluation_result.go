/*
PingOne Platform API - PingOne Risk

The PingOne Platform API covering the PingOne Risk service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package risk

import (
	"encoding/json"
)

// checks if the RiskEvaluationResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RiskEvaluationResult{}

// RiskEvaluationResult struct for RiskEvaluationResult
type RiskEvaluationResult struct {
	Type  *EnumResultType `json:"type,omitempty"`
	Level *EnumRiskLevel  `json:"level,omitempty"`
	// A string that specifies any custom attribute the administrator defines.
	Value *string `json:"value,omitempty"`
}

// NewRiskEvaluationResult instantiates a new RiskEvaluationResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRiskEvaluationResult() *RiskEvaluationResult {
	this := RiskEvaluationResult{}
	return &this
}

// NewRiskEvaluationResultWithDefaults instantiates a new RiskEvaluationResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskEvaluationResultWithDefaults() *RiskEvaluationResult {
	this := RiskEvaluationResult{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RiskEvaluationResult) GetType() EnumResultType {
	if o == nil || IsNil(o.Type) {
		var ret EnumResultType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvaluationResult) GetTypeOk() (*EnumResultType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RiskEvaluationResult) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given EnumResultType and assigns it to the Type field.
func (o *RiskEvaluationResult) SetType(v EnumResultType) {
	o.Type = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *RiskEvaluationResult) GetLevel() EnumRiskLevel {
	if o == nil || IsNil(o.Level) {
		var ret EnumRiskLevel
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvaluationResult) GetLevelOk() (*EnumRiskLevel, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *RiskEvaluationResult) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given EnumRiskLevel and assigns it to the Level field.
func (o *RiskEvaluationResult) SetLevel(v EnumRiskLevel) {
	o.Level = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *RiskEvaluationResult) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskEvaluationResult) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *RiskEvaluationResult) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *RiskEvaluationResult) SetValue(v string) {
	o.Value = &v
}

func (o RiskEvaluationResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RiskEvaluationResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableRiskEvaluationResult struct {
	value *RiskEvaluationResult
	isSet bool
}

func (v NullableRiskEvaluationResult) Get() *RiskEvaluationResult {
	return v.value
}

func (v *NullableRiskEvaluationResult) Set(val *RiskEvaluationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskEvaluationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskEvaluationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskEvaluationResult(val *RiskEvaluationResult) *NullableRiskEvaluationResult {
	return &NullableRiskEvaluationResult{value: val, isSet: true}
}

func (v NullableRiskEvaluationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskEvaluationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
