/*
PingOne Platform API - PingOne Risk

The PingOne Platform API covering the PingOne Risk service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package risk

import (
	"encoding/json"
	"fmt"
)

// RiskPredictorCompositeCondition - struct for RiskPredictorCompositeCondition
type RiskPredictorCompositeCondition struct {
	RiskPredictorCompositeAnd             *RiskPredictorCompositeAnd
	RiskPredictorCompositeConditionOneOf  *RiskPredictorCompositeConditionOneOf
	RiskPredictorCompositeConditionOneOf1 *RiskPredictorCompositeConditionOneOf1
	RiskPredictorCompositeIPRange         *RiskPredictorCompositeIPRange
	RiskPredictorCompositeNot             *RiskPredictorCompositeNot
	RiskPredictorCompositeOr              *RiskPredictorCompositeOr
}

// RiskPredictorCompositeAndAsRiskPredictorCompositeCondition is a convenience function that returns RiskPredictorCompositeAnd wrapped in RiskPredictorCompositeCondition
func RiskPredictorCompositeAndAsRiskPredictorCompositeCondition(v *RiskPredictorCompositeAnd) RiskPredictorCompositeCondition {
	return RiskPredictorCompositeCondition{
		RiskPredictorCompositeAnd: v,
	}
}

// RiskPredictorCompositeConditionOneOfAsRiskPredictorCompositeCondition is a convenience function that returns RiskPredictorCompositeConditionOneOf wrapped in RiskPredictorCompositeCondition
func RiskPredictorCompositeConditionOneOfAsRiskPredictorCompositeCondition(v *RiskPredictorCompositeConditionOneOf) RiskPredictorCompositeCondition {
	return RiskPredictorCompositeCondition{
		RiskPredictorCompositeConditionOneOf: v,
	}
}

// RiskPredictorCompositeConditionOneOf1AsRiskPredictorCompositeCondition is a convenience function that returns RiskPredictorCompositeConditionOneOf1 wrapped in RiskPredictorCompositeCondition
func RiskPredictorCompositeConditionOneOf1AsRiskPredictorCompositeCondition(v *RiskPredictorCompositeConditionOneOf1) RiskPredictorCompositeCondition {
	return RiskPredictorCompositeCondition{
		RiskPredictorCompositeConditionOneOf1: v,
	}
}

// RiskPredictorCompositeIPRangeAsRiskPredictorCompositeCondition is a convenience function that returns RiskPredictorCompositeIPRange wrapped in RiskPredictorCompositeCondition
func RiskPredictorCompositeIPRangeAsRiskPredictorCompositeCondition(v *RiskPredictorCompositeIPRange) RiskPredictorCompositeCondition {
	return RiskPredictorCompositeCondition{
		RiskPredictorCompositeIPRange: v,
	}
}

// RiskPredictorCompositeNotAsRiskPredictorCompositeCondition is a convenience function that returns RiskPredictorCompositeNot wrapped in RiskPredictorCompositeCondition
func RiskPredictorCompositeNotAsRiskPredictorCompositeCondition(v *RiskPredictorCompositeNot) RiskPredictorCompositeCondition {
	return RiskPredictorCompositeCondition{
		RiskPredictorCompositeNot: v,
	}
}

// RiskPredictorCompositeOrAsRiskPredictorCompositeCondition is a convenience function that returns RiskPredictorCompositeOr wrapped in RiskPredictorCompositeCondition
func RiskPredictorCompositeOrAsRiskPredictorCompositeCondition(v *RiskPredictorCompositeOr) RiskPredictorCompositeCondition {
	return RiskPredictorCompositeCondition{
		RiskPredictorCompositeOr: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *RiskPredictorCompositeCondition) UnmarshalJSON(data []byte) error {

	match := 0
	var common map[string]interface{}

	if err := json.Unmarshal(data, &common); err != nil {
		return err
	}

	dst.RiskPredictorCompositeAnd = nil
	dst.RiskPredictorCompositeConditionOneOf = nil
	dst.RiskPredictorCompositeConditionOneOf1 = nil
	dst.RiskPredictorCompositeIPRange = nil
	dst.RiskPredictorCompositeNot = nil
	dst.RiskPredictorCompositeOr = nil

	if common["and"] != nil {
		if err := json.Unmarshal(data, &dst.RiskPredictorCompositeAnd); err != nil {
			return err
		}
		match++
	}

	if common["or"] != nil {
		if err := json.Unmarshal(data, &dst.RiskPredictorCompositeOr); err != nil {
			return err
		}
		match++
	}

	if common["not"] != nil {
		if err := json.Unmarshal(data, &dst.RiskPredictorCompositeNot); err != nil {
			return err
		}
		match++
	}

	if v, ok := common["type"].(string); ok && v == string(ENUMPREDICTORCOMPOSITECONDITIONTYPE_STRING_LIST) {
		if err := json.Unmarshal(data, &dst.RiskPredictorCompositeConditionOneOf); err != nil {
			return err
		}
		match++
	}

	if v, ok := common["type"].(string); ok && v == string(ENUMPREDICTORCOMPOSITECONDITIONTYPE_IP_RANGE) {
		if err := json.Unmarshal(data, &dst.RiskPredictorCompositeIPRange); err != nil {
			return err
		}
		match++
	}

	if v, ok := common["type"].(string); ok && v == string(ENUMPREDICTORCOMPOSITECONDITIONTYPE_IP_COMPARISON) {
		if err := json.Unmarshal(data, &dst.RiskPredictorCompositeIPRange); err != nil {
			return err
		}
		match++
	}

	if v, ok := common["type"].(string); ok && v == string(ENUMPREDICTORCOMPOSITECONDITIONTYPE_VALUE_COMPARISON) {
		if err := json.Unmarshal(data, &dst.RiskPredictorCompositeConditionOneOf1); err != nil {
			return err
		}
		match++
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RiskPredictorCompositeAnd = nil
		dst.RiskPredictorCompositeConditionOneOf = nil
		dst.RiskPredictorCompositeConditionOneOf1 = nil
		dst.RiskPredictorCompositeIPRange = nil
		dst.RiskPredictorCompositeNot = nil
		dst.RiskPredictorCompositeOr = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RiskPredictorCompositeCondition)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RiskPredictorCompositeCondition)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RiskPredictorCompositeCondition) MarshalJSON() ([]byte, error) {
	if src.RiskPredictorCompositeAnd != nil {
		return json.Marshal(&src.RiskPredictorCompositeAnd)
	}

	if src.RiskPredictorCompositeConditionOneOf != nil {
		return json.Marshal(&src.RiskPredictorCompositeConditionOneOf)
	}

	if src.RiskPredictorCompositeConditionOneOf1 != nil {
		return json.Marshal(&src.RiskPredictorCompositeConditionOneOf1)
	}

	if src.RiskPredictorCompositeIPRange != nil {
		return json.Marshal(&src.RiskPredictorCompositeIPRange)
	}

	if src.RiskPredictorCompositeNot != nil {
		return json.Marshal(&src.RiskPredictorCompositeNot)
	}

	if src.RiskPredictorCompositeOr != nil {
		return json.Marshal(&src.RiskPredictorCompositeOr)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RiskPredictorCompositeCondition) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.RiskPredictorCompositeAnd != nil {
		return obj.RiskPredictorCompositeAnd
	}

	if obj.RiskPredictorCompositeConditionOneOf != nil {
		return obj.RiskPredictorCompositeConditionOneOf
	}

	if obj.RiskPredictorCompositeConditionOneOf1 != nil {
		return obj.RiskPredictorCompositeConditionOneOf1
	}

	if obj.RiskPredictorCompositeIPRange != nil {
		return obj.RiskPredictorCompositeIPRange
	}

	if obj.RiskPredictorCompositeNot != nil {
		return obj.RiskPredictorCompositeNot
	}

	if obj.RiskPredictorCompositeOr != nil {
		return obj.RiskPredictorCompositeOr
	}

	// all schemas are nil
	return nil
}

type NullableRiskPredictorCompositeCondition struct {
	value *RiskPredictorCompositeCondition
	isSet bool
}

func (v NullableRiskPredictorCompositeCondition) Get() *RiskPredictorCompositeCondition {
	return v.value
}

func (v *NullableRiskPredictorCompositeCondition) Set(val *RiskPredictorCompositeCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskPredictorCompositeCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskPredictorCompositeCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskPredictorCompositeCondition(val *RiskPredictorCompositeCondition) *NullableRiskPredictorCompositeCondition {
	return &NullableRiskPredictorCompositeCondition{value: val, isSet: true}
}

func (v NullableRiskPredictorCompositeCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskPredictorCompositeCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
