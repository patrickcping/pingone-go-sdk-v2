/*
PingOne Platform API - PingOne Risk

The PingOne Platform API covering the PingOne Risk service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package risk

import (
	"encoding/json"
)

// checks if the RiskPredictorCompositeAnd type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RiskPredictorCompositeAnd{}

// RiskPredictorCompositeAnd struct for RiskPredictorCompositeAnd
type RiskPredictorCompositeAnd struct {
	And  []RiskPredictorCompositeCondition    `json:"and"`
	Type *EnumPredictorCompositeConditionType `json:"type,omitempty"`
}

// NewRiskPredictorCompositeAnd instantiates a new RiskPredictorCompositeAnd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRiskPredictorCompositeAnd(and []RiskPredictorCompositeCondition) *RiskPredictorCompositeAnd {
	this := RiskPredictorCompositeAnd{}
	this.And = and
	return &this
}

// NewRiskPredictorCompositeAndWithDefaults instantiates a new RiskPredictorCompositeAnd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRiskPredictorCompositeAndWithDefaults() *RiskPredictorCompositeAnd {
	this := RiskPredictorCompositeAnd{}
	return &this
}

// GetAnd returns the And field value
func (o *RiskPredictorCompositeAnd) GetAnd() []RiskPredictorCompositeCondition {
	if o == nil {
		var ret []RiskPredictorCompositeCondition
		return ret
	}

	return o.And
}

// GetAndOk returns a tuple with the And field value
// and a boolean to check if the value has been set.
func (o *RiskPredictorCompositeAnd) GetAndOk() ([]RiskPredictorCompositeCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.And, true
}

// SetAnd sets field value
func (o *RiskPredictorCompositeAnd) SetAnd(v []RiskPredictorCompositeCondition) {
	o.And = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RiskPredictorCompositeAnd) GetType() EnumPredictorCompositeConditionType {
	if o == nil || IsNil(o.Type) {
		var ret EnumPredictorCompositeConditionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RiskPredictorCompositeAnd) GetTypeOk() (*EnumPredictorCompositeConditionType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RiskPredictorCompositeAnd) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given EnumPredictorCompositeConditionType and assigns it to the Type field.
func (o *RiskPredictorCompositeAnd) SetType(v EnumPredictorCompositeConditionType) {
	o.Type = &v
}

func (o RiskPredictorCompositeAnd) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RiskPredictorCompositeAnd) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["and"] = o.And
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableRiskPredictorCompositeAnd struct {
	value *RiskPredictorCompositeAnd
	isSet bool
}

func (v NullableRiskPredictorCompositeAnd) Get() *RiskPredictorCompositeAnd {
	return v.value
}

func (v *NullableRiskPredictorCompositeAnd) Set(val *RiskPredictorCompositeAnd) {
	v.value = val
	v.isSet = true
}

func (v NullableRiskPredictorCompositeAnd) IsSet() bool {
	return v.isSet
}

func (v *NullableRiskPredictorCompositeAnd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRiskPredictorCompositeAnd(val *RiskPredictorCompositeAnd) *NullableRiskPredictorCompositeAnd {
	return &NullableRiskPredictorCompositeAnd{value: val, isSet: true}
}

func (v NullableRiskPredictorCompositeAnd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRiskPredictorCompositeAnd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
