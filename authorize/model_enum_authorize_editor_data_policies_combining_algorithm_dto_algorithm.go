/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm the model 'EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm'
type EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm string

// List of EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm
const (
	ENUMAUTHORIZEEDITORDATAPOLICIESCOMBININGALGORITHMDTOALGORITHM_PERMIT_OVERRIDES EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm = "PERMIT_OVERRIDES"
	ENUMAUTHORIZEEDITORDATAPOLICIESCOMBININGALGORITHMDTOALGORITHM_DENY_OVERRIDES EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm = "DENY_OVERRIDES"
	ENUMAUTHORIZEEDITORDATAPOLICIESCOMBININGALGORITHMDTOALGORITHM_PERMIT_UNLESS_DENY EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm = "PERMIT_UNLESS_DENY"
	ENUMAUTHORIZEEDITORDATAPOLICIESCOMBININGALGORITHMDTOALGORITHM_DENY_UNLESS_PERMIT EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm = "DENY_UNLESS_PERMIT"
	ENUMAUTHORIZEEDITORDATAPOLICIESCOMBININGALGORITHMDTOALGORITHM_FIRST_APPLICABLE EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm = "FIRST_APPLICABLE"
	ENUMAUTHORIZEEDITORDATAPOLICIESCOMBININGALGORITHMDTOALGORITHM_ONLY_ONE_APPLICABLE EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm = "ONLY_ONE_APPLICABLE"
)

// All allowed values of EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm enum
var AllowedEnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithmEnumValues = []EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm{
	"PERMIT_OVERRIDES",
	"DENY_OVERRIDES",
	"PERMIT_UNLESS_DENY",
	"DENY_UNLESS_PERMIT",
	"FIRST_APPLICABLE",
	"ONLY_ONE_APPLICABLE",
}

func (v *EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm(value)
	for _, existing := range AllowedEnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithmEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithmFromValue returns a pointer to a valid EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithmFromValue(v string) (*EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm, error) {
	ev := EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm: valid values are %v", v, AllowedEnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithmEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm) IsValid() bool {
	for _, existing := range AllowedEnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithmEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm value
func (v EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm) Ptr() *EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm {
	return &v
}

type NullableEnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm struct {
	value *EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm
	isSet bool
}

func (v NullableEnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm) Get() *EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm {
	return v.value
}

func (v *NullableEnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm) Set(val *EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm(val *EnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm) *NullableEnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm {
	return &NullableEnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm{value: val, isSet: true}
}

func (v NullableEnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAuthorizeEditorDataPoliciesCombiningAlgorithmDTOAlgorithm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

