/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EnumAuthorizeEditorDataConditionDTOType the model 'EnumAuthorizeEditorDataConditionDTOType'
type EnumAuthorizeEditorDataConditionDTOType string

// List of EnumAuthorizeEditorDataConditionDTOType
const (
	ENUMAUTHORIZEEDITORDATACONDITIONDTOTYPE_AND EnumAuthorizeEditorDataConditionDTOType = "AND"
	ENUMAUTHORIZEEDITORDATACONDITIONDTOTYPE_COMPARISON EnumAuthorizeEditorDataConditionDTOType = "COMPARISON"
	ENUMAUTHORIZEEDITORDATACONDITIONDTOTYPE_EMPTY EnumAuthorizeEditorDataConditionDTOType = "EMPTY"
	ENUMAUTHORIZEEDITORDATACONDITIONDTOTYPE_NOT EnumAuthorizeEditorDataConditionDTOType = "NOT"
	ENUMAUTHORIZEEDITORDATACONDITIONDTOTYPE_OR EnumAuthorizeEditorDataConditionDTOType = "OR"
	ENUMAUTHORIZEEDITORDATACONDITIONDTOTYPE_REFERENCE EnumAuthorizeEditorDataConditionDTOType = "REFERENCE"
)

// All allowed values of EnumAuthorizeEditorDataConditionDTOType enum
var AllowedEnumAuthorizeEditorDataConditionDTOTypeEnumValues = []EnumAuthorizeEditorDataConditionDTOType{
	"AND",
	"COMPARISON",
	"EMPTY",
	"NOT",
	"OR",
	"REFERENCE",
}

func (v *EnumAuthorizeEditorDataConditionDTOType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAuthorizeEditorDataConditionDTOType(value)
	for _, existing := range AllowedEnumAuthorizeEditorDataConditionDTOTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAuthorizeEditorDataConditionDTOType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAuthorizeEditorDataConditionDTOTypeFromValue returns a pointer to a valid EnumAuthorizeEditorDataConditionDTOType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAuthorizeEditorDataConditionDTOTypeFromValue(v string) (*EnumAuthorizeEditorDataConditionDTOType, error) {
	ev := EnumAuthorizeEditorDataConditionDTOType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAuthorizeEditorDataConditionDTOType: valid values are %v", v, AllowedEnumAuthorizeEditorDataConditionDTOTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAuthorizeEditorDataConditionDTOType) IsValid() bool {
	for _, existing := range AllowedEnumAuthorizeEditorDataConditionDTOTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAuthorizeEditorDataConditionDTOType value
func (v EnumAuthorizeEditorDataConditionDTOType) Ptr() *EnumAuthorizeEditorDataConditionDTOType {
	return &v
}

type NullableEnumAuthorizeEditorDataConditionDTOType struct {
	value *EnumAuthorizeEditorDataConditionDTOType
	isSet bool
}

func (v NullableEnumAuthorizeEditorDataConditionDTOType) Get() *EnumAuthorizeEditorDataConditionDTOType {
	return v.value
}

func (v *NullableEnumAuthorizeEditorDataConditionDTOType) Set(val *EnumAuthorizeEditorDataConditionDTOType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAuthorizeEditorDataConditionDTOType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAuthorizeEditorDataConditionDTOType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAuthorizeEditorDataConditionDTOType(val *EnumAuthorizeEditorDataConditionDTOType) *NullableEnumAuthorizeEditorDataConditionDTOType {
	return &NullableEnumAuthorizeEditorDataConditionDTOType{value: val, isSet: true}
}

func (v NullableEnumAuthorizeEditorDataConditionDTOType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAuthorizeEditorDataConditionDTOType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

