/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
)

// checks if the AuthorizeEditorDataUserDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizeEditorDataUserDTO{}

// AuthorizeEditorDataUserDTO struct for AuthorizeEditorDataUserDTO
type AuthorizeEditorDataUserDTO struct {
	Id *string `json:"id,omitempty"`
	EnvId *string `json:"envId,omitempty"`
}

// NewAuthorizeEditorDataUserDTO instantiates a new AuthorizeEditorDataUserDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizeEditorDataUserDTO() *AuthorizeEditorDataUserDTO {
	this := AuthorizeEditorDataUserDTO{}
	return &this
}

// NewAuthorizeEditorDataUserDTOWithDefaults instantiates a new AuthorizeEditorDataUserDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizeEditorDataUserDTOWithDefaults() *AuthorizeEditorDataUserDTO {
	this := AuthorizeEditorDataUserDTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuthorizeEditorDataUserDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataUserDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuthorizeEditorDataUserDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AuthorizeEditorDataUserDTO) SetId(v string) {
	o.Id = &v
}

// GetEnvId returns the EnvId field value if set, zero value otherwise.
func (o *AuthorizeEditorDataUserDTO) GetEnvId() string {
	if o == nil || IsNil(o.EnvId) {
		var ret string
		return ret
	}
	return *o.EnvId
}

// GetEnvIdOk returns a tuple with the EnvId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataUserDTO) GetEnvIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvId) {
		return nil, false
	}
	return o.EnvId, true
}

// HasEnvId returns a boolean if a field has been set.
func (o *AuthorizeEditorDataUserDTO) HasEnvId() bool {
	if o != nil && !IsNil(o.EnvId) {
		return true
	}

	return false
}

// SetEnvId gets a reference to the given string and assigns it to the EnvId field.
func (o *AuthorizeEditorDataUserDTO) SetEnvId(v string) {
	o.EnvId = &v
}

func (o AuthorizeEditorDataUserDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizeEditorDataUserDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.EnvId) {
		toSerialize["envId"] = o.EnvId
	}
	return toSerialize, nil
}

type NullableAuthorizeEditorDataUserDTO struct {
	value *AuthorizeEditorDataUserDTO
	isSet bool
}

func (v NullableAuthorizeEditorDataUserDTO) Get() *AuthorizeEditorDataUserDTO {
	return v.value
}

func (v *NullableAuthorizeEditorDataUserDTO) Set(val *AuthorizeEditorDataUserDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeEditorDataUserDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeEditorDataUserDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeEditorDataUserDTO(val *AuthorizeEditorDataUserDTO) *NullableAuthorizeEditorDataUserDTO {
	return &NullableAuthorizeEditorDataUserDTO{value: val, isSet: true}
}

func (v NullableAuthorizeEditorDataUserDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeEditorDataUserDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


