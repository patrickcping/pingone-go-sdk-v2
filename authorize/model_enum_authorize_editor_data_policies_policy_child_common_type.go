/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EnumAuthorizeEditorDataPoliciesPolicyChildCommonType the model 'EnumAuthorizeEditorDataPoliciesPolicyChildCommonType'
type EnumAuthorizeEditorDataPoliciesPolicyChildCommonType string

// List of EnumAuthorizeEditorDataPoliciesPolicyChildCommonType
const (
	ENUMAUTHORIZEEDITORDATAPOLICIESPOLICYCHILDCOMMONTYPE_POLICY EnumAuthorizeEditorDataPoliciesPolicyChildCommonType = "POLICY"
	ENUMAUTHORIZEEDITORDATAPOLICIESPOLICYCHILDCOMMONTYPE_RULE EnumAuthorizeEditorDataPoliciesPolicyChildCommonType = "RULE"
)

// All allowed values of EnumAuthorizeEditorDataPoliciesPolicyChildCommonType enum
var AllowedEnumAuthorizeEditorDataPoliciesPolicyChildCommonTypeEnumValues = []EnumAuthorizeEditorDataPoliciesPolicyChildCommonType{
	"POLICY",
	"RULE",
}

func (v *EnumAuthorizeEditorDataPoliciesPolicyChildCommonType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAuthorizeEditorDataPoliciesPolicyChildCommonType(value)
	for _, existing := range AllowedEnumAuthorizeEditorDataPoliciesPolicyChildCommonTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAuthorizeEditorDataPoliciesPolicyChildCommonType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAuthorizeEditorDataPoliciesPolicyChildCommonTypeFromValue returns a pointer to a valid EnumAuthorizeEditorDataPoliciesPolicyChildCommonType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAuthorizeEditorDataPoliciesPolicyChildCommonTypeFromValue(v string) (*EnumAuthorizeEditorDataPoliciesPolicyChildCommonType, error) {
	ev := EnumAuthorizeEditorDataPoliciesPolicyChildCommonType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAuthorizeEditorDataPoliciesPolicyChildCommonType: valid values are %v", v, AllowedEnumAuthorizeEditorDataPoliciesPolicyChildCommonTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAuthorizeEditorDataPoliciesPolicyChildCommonType) IsValid() bool {
	for _, existing := range AllowedEnumAuthorizeEditorDataPoliciesPolicyChildCommonTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAuthorizeEditorDataPoliciesPolicyChildCommonType value
func (v EnumAuthorizeEditorDataPoliciesPolicyChildCommonType) Ptr() *EnumAuthorizeEditorDataPoliciesPolicyChildCommonType {
	return &v
}

type NullableEnumAuthorizeEditorDataPoliciesPolicyChildCommonType struct {
	value *EnumAuthorizeEditorDataPoliciesPolicyChildCommonType
	isSet bool
}

func (v NullableEnumAuthorizeEditorDataPoliciesPolicyChildCommonType) Get() *EnumAuthorizeEditorDataPoliciesPolicyChildCommonType {
	return v.value
}

func (v *NullableEnumAuthorizeEditorDataPoliciesPolicyChildCommonType) Set(val *EnumAuthorizeEditorDataPoliciesPolicyChildCommonType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAuthorizeEditorDataPoliciesPolicyChildCommonType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAuthorizeEditorDataPoliciesPolicyChildCommonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAuthorizeEditorDataPoliciesPolicyChildCommonType(val *EnumAuthorizeEditorDataPoliciesPolicyChildCommonType) *NullableEnumAuthorizeEditorDataPoliciesPolicyChildCommonType {
	return &NullableEnumAuthorizeEditorDataPoliciesPolicyChildCommonType{value: val, isSet: true}
}

func (v NullableEnumAuthorizeEditorDataPoliciesPolicyChildCommonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAuthorizeEditorDataPoliciesPolicyChildCommonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

