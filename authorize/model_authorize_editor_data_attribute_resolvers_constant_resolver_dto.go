/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
)

// checks if the AuthorizeEditorDataAttributeResolversConstantResolverDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizeEditorDataAttributeResolversConstantResolverDTO{}

// AuthorizeEditorDataAttributeResolversConstantResolverDTO struct for AuthorizeEditorDataAttributeResolversConstantResolverDTO
type AuthorizeEditorDataAttributeResolversConstantResolverDTO struct {
	Name *string `json:"name,omitempty"`
	Condition *AuthorizeEditorDataConditionDTO `json:"condition,omitempty"`
	Processor *AuthorizeEditorDataProcessorDTO `json:"processor,omitempty"`
	Type EnumAuthorizeEditorDataResolverDTOType `json:"type"`
	Value string `json:"value"`
	ValueType AuthorizeEditorDataValueTypeDTO `json:"valueType"`
}

// NewAuthorizeEditorDataAttributeResolversConstantResolverDTO instantiates a new AuthorizeEditorDataAttributeResolversConstantResolverDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizeEditorDataAttributeResolversConstantResolverDTO(type_ EnumAuthorizeEditorDataResolverDTOType, value string, valueType AuthorizeEditorDataValueTypeDTO) *AuthorizeEditorDataAttributeResolversConstantResolverDTO {
	this := AuthorizeEditorDataAttributeResolversConstantResolverDTO{}
	this.Type = type_
	this.Value = value
	this.ValueType = valueType
	return &this
}

// NewAuthorizeEditorDataAttributeResolversConstantResolverDTOWithDefaults instantiates a new AuthorizeEditorDataAttributeResolversConstantResolverDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizeEditorDataAttributeResolversConstantResolverDTOWithDefaults() *AuthorizeEditorDataAttributeResolversConstantResolverDTO {
	this := AuthorizeEditorDataAttributeResolversConstantResolverDTO{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AuthorizeEditorDataAttributeResolversConstantResolverDTO) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataAttributeResolversConstantResolverDTO) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AuthorizeEditorDataAttributeResolversConstantResolverDTO) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AuthorizeEditorDataAttributeResolversConstantResolverDTO) SetName(v string) {
	o.Name = &v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *AuthorizeEditorDataAttributeResolversConstantResolverDTO) GetCondition() AuthorizeEditorDataConditionDTO {
	if o == nil || IsNil(o.Condition) {
		var ret AuthorizeEditorDataConditionDTO
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataAttributeResolversConstantResolverDTO) GetConditionOk() (*AuthorizeEditorDataConditionDTO, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *AuthorizeEditorDataAttributeResolversConstantResolverDTO) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given AuthorizeEditorDataConditionDTO and assigns it to the Condition field.
func (o *AuthorizeEditorDataAttributeResolversConstantResolverDTO) SetCondition(v AuthorizeEditorDataConditionDTO) {
	o.Condition = &v
}

// GetProcessor returns the Processor field value if set, zero value otherwise.
func (o *AuthorizeEditorDataAttributeResolversConstantResolverDTO) GetProcessor() AuthorizeEditorDataProcessorDTO {
	if o == nil || IsNil(o.Processor) {
		var ret AuthorizeEditorDataProcessorDTO
		return ret
	}
	return *o.Processor
}

// GetProcessorOk returns a tuple with the Processor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataAttributeResolversConstantResolverDTO) GetProcessorOk() (*AuthorizeEditorDataProcessorDTO, bool) {
	if o == nil || IsNil(o.Processor) {
		return nil, false
	}
	return o.Processor, true
}

// HasProcessor returns a boolean if a field has been set.
func (o *AuthorizeEditorDataAttributeResolversConstantResolverDTO) HasProcessor() bool {
	if o != nil && !IsNil(o.Processor) {
		return true
	}

	return false
}

// SetProcessor gets a reference to the given AuthorizeEditorDataProcessorDTO and assigns it to the Processor field.
func (o *AuthorizeEditorDataAttributeResolversConstantResolverDTO) SetProcessor(v AuthorizeEditorDataProcessorDTO) {
	o.Processor = &v
}

// GetType returns the Type field value
func (o *AuthorizeEditorDataAttributeResolversConstantResolverDTO) GetType() EnumAuthorizeEditorDataResolverDTOType {
	if o == nil {
		var ret EnumAuthorizeEditorDataResolverDTOType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataAttributeResolversConstantResolverDTO) GetTypeOk() (*EnumAuthorizeEditorDataResolverDTOType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AuthorizeEditorDataAttributeResolversConstantResolverDTO) SetType(v EnumAuthorizeEditorDataResolverDTOType) {
	o.Type = v
}

// GetValue returns the Value field value
func (o *AuthorizeEditorDataAttributeResolversConstantResolverDTO) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataAttributeResolversConstantResolverDTO) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *AuthorizeEditorDataAttributeResolversConstantResolverDTO) SetValue(v string) {
	o.Value = v
}

// GetValueType returns the ValueType field value
func (o *AuthorizeEditorDataAttributeResolversConstantResolverDTO) GetValueType() AuthorizeEditorDataValueTypeDTO {
	if o == nil {
		var ret AuthorizeEditorDataValueTypeDTO
		return ret
	}

	return o.ValueType
}

// GetValueTypeOk returns a tuple with the ValueType field value
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataAttributeResolversConstantResolverDTO) GetValueTypeOk() (*AuthorizeEditorDataValueTypeDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ValueType, true
}

// SetValueType sets field value
func (o *AuthorizeEditorDataAttributeResolversConstantResolverDTO) SetValueType(v AuthorizeEditorDataValueTypeDTO) {
	o.ValueType = v
}

func (o AuthorizeEditorDataAttributeResolversConstantResolverDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizeEditorDataAttributeResolversConstantResolverDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.Processor) {
		toSerialize["processor"] = o.Processor
	}
	toSerialize["type"] = o.Type
	toSerialize["value"] = o.Value
	toSerialize["valueType"] = o.ValueType
	return toSerialize, nil
}

type NullableAuthorizeEditorDataAttributeResolversConstantResolverDTO struct {
	value *AuthorizeEditorDataAttributeResolversConstantResolverDTO
	isSet bool
}

func (v NullableAuthorizeEditorDataAttributeResolversConstantResolverDTO) Get() *AuthorizeEditorDataAttributeResolversConstantResolverDTO {
	return v.value
}

func (v *NullableAuthorizeEditorDataAttributeResolversConstantResolverDTO) Set(val *AuthorizeEditorDataAttributeResolversConstantResolverDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeEditorDataAttributeResolversConstantResolverDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeEditorDataAttributeResolversConstantResolverDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeEditorDataAttributeResolversConstantResolverDTO(val *AuthorizeEditorDataAttributeResolversConstantResolverDTO) *NullableAuthorizeEditorDataAttributeResolversConstantResolverDTO {
	return &NullableAuthorizeEditorDataAttributeResolversConstantResolverDTO{value: val, isSet: true}
}

func (v NullableAuthorizeEditorDataAttributeResolversConstantResolverDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeEditorDataAttributeResolversConstantResolverDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


