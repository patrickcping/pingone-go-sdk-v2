/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
)

// checks if the AuthorizeEditorDataOverrideObjectDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizeEditorDataOverrideObjectDTO{}

// AuthorizeEditorDataOverrideObjectDTO struct for AuthorizeEditorDataOverrideObjectDTO
type AuthorizeEditorDataOverrideObjectDTO struct {
	Id string `json:"id"`
	Override string `json:"override"`
}

// NewAuthorizeEditorDataOverrideObjectDTO instantiates a new AuthorizeEditorDataOverrideObjectDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizeEditorDataOverrideObjectDTO(id string, override string) *AuthorizeEditorDataOverrideObjectDTO {
	this := AuthorizeEditorDataOverrideObjectDTO{}
	this.Id = id
	this.Override = override
	return &this
}

// NewAuthorizeEditorDataOverrideObjectDTOWithDefaults instantiates a new AuthorizeEditorDataOverrideObjectDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizeEditorDataOverrideObjectDTOWithDefaults() *AuthorizeEditorDataOverrideObjectDTO {
	this := AuthorizeEditorDataOverrideObjectDTO{}
	return &this
}

// GetId returns the Id field value
func (o *AuthorizeEditorDataOverrideObjectDTO) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataOverrideObjectDTO) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AuthorizeEditorDataOverrideObjectDTO) SetId(v string) {
	o.Id = v
}

// GetOverride returns the Override field value
func (o *AuthorizeEditorDataOverrideObjectDTO) GetOverride() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Override
}

// GetOverrideOk returns a tuple with the Override field value
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataOverrideObjectDTO) GetOverrideOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Override, true
}

// SetOverride sets field value
func (o *AuthorizeEditorDataOverrideObjectDTO) SetOverride(v string) {
	o.Override = v
}

func (o AuthorizeEditorDataOverrideObjectDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizeEditorDataOverrideObjectDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["override"] = o.Override
	return toSerialize, nil
}

type NullableAuthorizeEditorDataOverrideObjectDTO struct {
	value *AuthorizeEditorDataOverrideObjectDTO
	isSet bool
}

func (v NullableAuthorizeEditorDataOverrideObjectDTO) Get() *AuthorizeEditorDataOverrideObjectDTO {
	return v.value
}

func (v *NullableAuthorizeEditorDataOverrideObjectDTO) Set(val *AuthorizeEditorDataOverrideObjectDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeEditorDataOverrideObjectDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeEditorDataOverrideObjectDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeEditorDataOverrideObjectDTO(val *AuthorizeEditorDataOverrideObjectDTO) *NullableAuthorizeEditorDataOverrideObjectDTO {
	return &NullableAuthorizeEditorDataOverrideObjectDTO{value: val, isSet: true}
}

func (v NullableAuthorizeEditorDataOverrideObjectDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeEditorDataOverrideObjectDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


