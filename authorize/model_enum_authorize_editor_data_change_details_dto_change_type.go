/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EnumAuthorizeEditorDataChangeDetailsDTOChangeType the model 'EnumAuthorizeEditorDataChangeDetailsDTOChangeType'
type EnumAuthorizeEditorDataChangeDetailsDTOChangeType string

// List of EnumAuthorizeEditorDataChangeDetailsDTOChangeType
const (
	ENUMAUTHORIZEEDITORDATACHANGEDETAILSDTOCHANGETYPE_CREATE EnumAuthorizeEditorDataChangeDetailsDTOChangeType = "CREATE"
	ENUMAUTHORIZEEDITORDATACHANGEDETAILSDTOCHANGETYPE_UPDATE EnumAuthorizeEditorDataChangeDetailsDTOChangeType = "UPDATE"
	ENUMAUTHORIZEEDITORDATACHANGEDETAILSDTOCHANGETYPE_DELETE EnumAuthorizeEditorDataChangeDetailsDTOChangeType = "DELETE"
	ENUMAUTHORIZEEDITORDATACHANGEDETAILSDTOCHANGETYPE_NONE EnumAuthorizeEditorDataChangeDetailsDTOChangeType = "NONE"
)

// All allowed values of EnumAuthorizeEditorDataChangeDetailsDTOChangeType enum
var AllowedEnumAuthorizeEditorDataChangeDetailsDTOChangeTypeEnumValues = []EnumAuthorizeEditorDataChangeDetailsDTOChangeType{
	"CREATE",
	"UPDATE",
	"DELETE",
	"NONE",
}

func (v *EnumAuthorizeEditorDataChangeDetailsDTOChangeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAuthorizeEditorDataChangeDetailsDTOChangeType(value)
	for _, existing := range AllowedEnumAuthorizeEditorDataChangeDetailsDTOChangeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAuthorizeEditorDataChangeDetailsDTOChangeType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAuthorizeEditorDataChangeDetailsDTOChangeTypeFromValue returns a pointer to a valid EnumAuthorizeEditorDataChangeDetailsDTOChangeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAuthorizeEditorDataChangeDetailsDTOChangeTypeFromValue(v string) (*EnumAuthorizeEditorDataChangeDetailsDTOChangeType, error) {
	ev := EnumAuthorizeEditorDataChangeDetailsDTOChangeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAuthorizeEditorDataChangeDetailsDTOChangeType: valid values are %v", v, AllowedEnumAuthorizeEditorDataChangeDetailsDTOChangeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAuthorizeEditorDataChangeDetailsDTOChangeType) IsValid() bool {
	for _, existing := range AllowedEnumAuthorizeEditorDataChangeDetailsDTOChangeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAuthorizeEditorDataChangeDetailsDTOChangeType value
func (v EnumAuthorizeEditorDataChangeDetailsDTOChangeType) Ptr() *EnumAuthorizeEditorDataChangeDetailsDTOChangeType {
	return &v
}

type NullableEnumAuthorizeEditorDataChangeDetailsDTOChangeType struct {
	value *EnumAuthorizeEditorDataChangeDetailsDTOChangeType
	isSet bool
}

func (v NullableEnumAuthorizeEditorDataChangeDetailsDTOChangeType) Get() *EnumAuthorizeEditorDataChangeDetailsDTOChangeType {
	return v.value
}

func (v *NullableEnumAuthorizeEditorDataChangeDetailsDTOChangeType) Set(val *EnumAuthorizeEditorDataChangeDetailsDTOChangeType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAuthorizeEditorDataChangeDetailsDTOChangeType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAuthorizeEditorDataChangeDetailsDTOChangeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAuthorizeEditorDataChangeDetailsDTOChangeType(val *EnumAuthorizeEditorDataChangeDetailsDTOChangeType) *NullableEnumAuthorizeEditorDataChangeDetailsDTOChangeType {
	return &NullableEnumAuthorizeEditorDataChangeDetailsDTOChangeType{value: val, isSet: true}
}

func (v NullableEnumAuthorizeEditorDataChangeDetailsDTOChangeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAuthorizeEditorDataChangeDetailsDTOChangeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

