/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision the model 'EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision'
type EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision string

// List of EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision
const (
	ENUMAUTHORIZEEDITORDATAPOLICIESREPETITIONSETTINGSDTODECISION_PERMIT EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision = "PERMIT"
	ENUMAUTHORIZEEDITORDATAPOLICIESREPETITIONSETTINGSDTODECISION_DENY EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision = "DENY"
	ENUMAUTHORIZEEDITORDATAPOLICIESREPETITIONSETTINGSDTODECISION_NOT_APPLICABLE EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision = "NOT_APPLICABLE"
	ENUMAUTHORIZEEDITORDATAPOLICIESREPETITIONSETTINGSDTODECISION_INDETERMINATE EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision = "INDETERMINATE"
)

// All allowed values of EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision enum
var AllowedEnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecisionEnumValues = []EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision{
	"PERMIT",
	"DENY",
	"NOT_APPLICABLE",
	"INDETERMINATE",
}

func (v *EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision(value)
	for _, existing := range AllowedEnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecisionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecisionFromValue returns a pointer to a valid EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecisionFromValue(v string) (*EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision, error) {
	ev := EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision: valid values are %v", v, AllowedEnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecisionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision) IsValid() bool {
	for _, existing := range AllowedEnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecisionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision value
func (v EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision) Ptr() *EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision {
	return &v
}

type NullableEnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision struct {
	value *EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision
	isSet bool
}

func (v NullableEnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision) Get() *EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision {
	return v.value
}

func (v *NullableEnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision) Set(val *EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision(val *EnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision) *NullableEnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision {
	return &NullableEnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision{value: val, isSet: true}
}

func (v NullableEnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAuthorizeEditorDataPoliciesRepetitionSettingsDTODecision) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

