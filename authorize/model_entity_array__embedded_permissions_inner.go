/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EntityArrayEmbeddedPermissionsInner - struct for EntityArrayEmbeddedPermissionsInner
type EntityArrayEmbeddedPermissionsInner struct {
	ApplicationResourcePermission *ApplicationResourcePermission
	ApplicationRolePermission     *ApplicationRolePermission
}

// ApplicationResourcePermissionAsEntityArrayEmbeddedPermissionsInner is a convenience function that returns ApplicationResourcePermission wrapped in EntityArrayEmbeddedPermissionsInner
func ApplicationResourcePermissionAsEntityArrayEmbeddedPermissionsInner(v *ApplicationResourcePermission) EntityArrayEmbeddedPermissionsInner {
	return EntityArrayEmbeddedPermissionsInner{
		ApplicationResourcePermission: v,
	}
}

// ApplicationRolePermissionAsEntityArrayEmbeddedPermissionsInner is a convenience function that returns ApplicationRolePermission wrapped in EntityArrayEmbeddedPermissionsInner
func ApplicationRolePermissionAsEntityArrayEmbeddedPermissionsInner(v *ApplicationRolePermission) EntityArrayEmbeddedPermissionsInner {
	return EntityArrayEmbeddedPermissionsInner{
		ApplicationRolePermission: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *EntityArrayEmbeddedPermissionsInner) UnmarshalJSON(data []byte) error {

	var err error
	// try to unmarshal JSON data into ApplicationRolePermission
	err = json.Unmarshal(data, &dst.ApplicationRolePermission)
	if err == nil {
		jsonApplicationRolePermission, _ := json.Marshal(dst.ApplicationRolePermission)
		if string(jsonApplicationRolePermission) == "{}" { // empty struct
			dst.ApplicationRolePermission = nil
		} else {
			if dst.ApplicationRolePermission.Key != nil {
				return nil // data stored in dst.ApplicationRolePermission, return on the first match
			} else {
				dst.ApplicationRolePermission = nil
			}
		}
	} else {
		dst.ApplicationRolePermission = nil
	}

	// try to unmarshal JSON data into ApplicationResourcePermission
	err = json.Unmarshal(data, &dst.ApplicationResourcePermission)
	if err == nil {
		jsonApplicationResourcePermission, _ := json.Marshal(dst.ApplicationResourcePermission)
		if string(jsonApplicationResourcePermission) == "{}" { // empty struct
			dst.ApplicationResourcePermission = nil
		} else {
			if dst.ApplicationResourcePermission.Action != "" { // we expect an resource for this data type
				dst.ApplicationResourcePermission = nil
			} else {
				return nil // data stored in dst.ApplicationResourcePermission, return on the first match
			}
		}
	} else {
		dst.ApplicationResourcePermission = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(EntityArrayEmbeddedPermissionsInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EntityArrayEmbeddedPermissionsInner) MarshalJSON() ([]byte, error) {
	if src.ApplicationResourcePermission != nil {
		return json.Marshal(&src.ApplicationResourcePermission)
	}

	if src.ApplicationRolePermission != nil {
		return json.Marshal(&src.ApplicationRolePermission)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EntityArrayEmbeddedPermissionsInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ApplicationResourcePermission != nil {
		return obj.ApplicationResourcePermission
	}

	if obj.ApplicationRolePermission != nil {
		return obj.ApplicationRolePermission
	}

	// all schemas are nil
	return nil
}

type NullableEntityArrayEmbeddedPermissionsInner struct {
	value *EntityArrayEmbeddedPermissionsInner
	isSet bool
}

func (v NullableEntityArrayEmbeddedPermissionsInner) Get() *EntityArrayEmbeddedPermissionsInner {
	return v.value
}

func (v *NullableEntityArrayEmbeddedPermissionsInner) Set(val *EntityArrayEmbeddedPermissionsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityArrayEmbeddedPermissionsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityArrayEmbeddedPermissionsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityArrayEmbeddedPermissionsInner(val *EntityArrayEmbeddedPermissionsInner) *NullableEntityArrayEmbeddedPermissionsInner {
	return &NullableEntityArrayEmbeddedPermissionsInner{value: val, isSet: true}
}

func (v NullableEntityArrayEmbeddedPermissionsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityArrayEmbeddedPermissionsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
