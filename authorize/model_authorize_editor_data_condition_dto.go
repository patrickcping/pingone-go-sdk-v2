/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// AuthorizeEditorDataConditionDTO - struct for AuthorizeEditorDataConditionDTO
type AuthorizeEditorDataConditionDTO struct {
	AuthorizeEditorDataConditionsAndConditionDTO *AuthorizeEditorDataConditionsAndConditionDTO
	AuthorizeEditorDataConditionsComparisonConditionDTO *AuthorizeEditorDataConditionsComparisonConditionDTO
	AuthorizeEditorDataConditionsEmptyConditionDTO *AuthorizeEditorDataConditionsEmptyConditionDTO
	AuthorizeEditorDataConditionsNotConditionDTO *AuthorizeEditorDataConditionsNotConditionDTO
	AuthorizeEditorDataConditionsOrConditionDTO *AuthorizeEditorDataConditionsOrConditionDTO
	AuthorizeEditorDataConditionsReferenceConditionDTO *AuthorizeEditorDataConditionsReferenceConditionDTO
}

// AuthorizeEditorDataConditionsAndConditionDTOAsAuthorizeEditorDataConditionDTO is a convenience function that returns AuthorizeEditorDataConditionsAndConditionDTO wrapped in AuthorizeEditorDataConditionDTO
func AuthorizeEditorDataConditionsAndConditionDTOAsAuthorizeEditorDataConditionDTO(v *AuthorizeEditorDataConditionsAndConditionDTO) AuthorizeEditorDataConditionDTO {
	return AuthorizeEditorDataConditionDTO{
		AuthorizeEditorDataConditionsAndConditionDTO: v,
	}
}

// AuthorizeEditorDataConditionsComparisonConditionDTOAsAuthorizeEditorDataConditionDTO is a convenience function that returns AuthorizeEditorDataConditionsComparisonConditionDTO wrapped in AuthorizeEditorDataConditionDTO
func AuthorizeEditorDataConditionsComparisonConditionDTOAsAuthorizeEditorDataConditionDTO(v *AuthorizeEditorDataConditionsComparisonConditionDTO) AuthorizeEditorDataConditionDTO {
	return AuthorizeEditorDataConditionDTO{
		AuthorizeEditorDataConditionsComparisonConditionDTO: v,
	}
}

// AuthorizeEditorDataConditionsEmptyConditionDTOAsAuthorizeEditorDataConditionDTO is a convenience function that returns AuthorizeEditorDataConditionsEmptyConditionDTO wrapped in AuthorizeEditorDataConditionDTO
func AuthorizeEditorDataConditionsEmptyConditionDTOAsAuthorizeEditorDataConditionDTO(v *AuthorizeEditorDataConditionsEmptyConditionDTO) AuthorizeEditorDataConditionDTO {
	return AuthorizeEditorDataConditionDTO{
		AuthorizeEditorDataConditionsEmptyConditionDTO: v,
	}
}

// AuthorizeEditorDataConditionsNotConditionDTOAsAuthorizeEditorDataConditionDTO is a convenience function that returns AuthorizeEditorDataConditionsNotConditionDTO wrapped in AuthorizeEditorDataConditionDTO
func AuthorizeEditorDataConditionsNotConditionDTOAsAuthorizeEditorDataConditionDTO(v *AuthorizeEditorDataConditionsNotConditionDTO) AuthorizeEditorDataConditionDTO {
	return AuthorizeEditorDataConditionDTO{
		AuthorizeEditorDataConditionsNotConditionDTO: v,
	}
}

// AuthorizeEditorDataConditionsOrConditionDTOAsAuthorizeEditorDataConditionDTO is a convenience function that returns AuthorizeEditorDataConditionsOrConditionDTO wrapped in AuthorizeEditorDataConditionDTO
func AuthorizeEditorDataConditionsOrConditionDTOAsAuthorizeEditorDataConditionDTO(v *AuthorizeEditorDataConditionsOrConditionDTO) AuthorizeEditorDataConditionDTO {
	return AuthorizeEditorDataConditionDTO{
		AuthorizeEditorDataConditionsOrConditionDTO: v,
	}
}

// AuthorizeEditorDataConditionsReferenceConditionDTOAsAuthorizeEditorDataConditionDTO is a convenience function that returns AuthorizeEditorDataConditionsReferenceConditionDTO wrapped in AuthorizeEditorDataConditionDTO
func AuthorizeEditorDataConditionsReferenceConditionDTOAsAuthorizeEditorDataConditionDTO(v *AuthorizeEditorDataConditionsReferenceConditionDTO) AuthorizeEditorDataConditionDTO {
	return AuthorizeEditorDataConditionDTO{
		AuthorizeEditorDataConditionsReferenceConditionDTO: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AuthorizeEditorDataConditionDTO) UnmarshalJSON(data []byte) error {

	var common AuthorizeEditorDataConditionDTOCommon

	if err := json.Unmarshal(data, &common); err != nil { // simple model
		return err
	}

	dst.AuthorizeEditorDataConditionsAndConditionDTO = nil
	dst.AuthorizeEditorDataConditionsComparisonConditionDTO = nil
	dst.AuthorizeEditorDataConditionsEmptyConditionDTO = nil
	dst.AuthorizeEditorDataConditionsNotConditionDTO = nil
	dst.AuthorizeEditorDataConditionsOrConditionDTO = nil
	dst.AuthorizeEditorDataConditionsReferenceConditionDTO = nil

	switch common.GetType() {
	case ENUMAUTHORIZEEDITORDATACONDITIONDTOTYPE_AND:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataConditionsAndConditionDTO); err != nil { // simple model
			return err
		}
	case ENUMAUTHORIZEEDITORDATACONDITIONDTOTYPE_COMPARISON:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataConditionsComparisonConditionDTO); err != nil { // simple model
			return err
		}
	case ENUMAUTHORIZEEDITORDATACONDITIONDTOTYPE_EMPTY:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataConditionsEmptyConditionDTO); err != nil { // simple model
			return err
		}
	case ENUMAUTHORIZEEDITORDATACONDITIONDTOTYPE_NOT:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataConditionsNotConditionDTO); err != nil { // simple model
			return err
		}
	case ENUMAUTHORIZEEDITORDATACONDITIONDTOTYPE_OR:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataConditionsOrConditionDTO); err != nil { // simple model
			return err
		}
	case ENUMAUTHORIZEEDITORDATACONDITIONDTOTYPE_REFERENCE:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataConditionsReferenceConditionDTO); err != nil { // simple model
			return err
		}
	default:
		return fmt.Errorf("Data failed to match schemas in oneOf(AuthorizeEditorDataConditionDTO)")
	}
	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AuthorizeEditorDataConditionDTO) MarshalJSON() ([]byte, error) {
	if src.AuthorizeEditorDataConditionsAndConditionDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataConditionsAndConditionDTO)
	}

	if src.AuthorizeEditorDataConditionsComparisonConditionDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataConditionsComparisonConditionDTO)
	}

	if src.AuthorizeEditorDataConditionsEmptyConditionDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataConditionsEmptyConditionDTO)
	}

	if src.AuthorizeEditorDataConditionsNotConditionDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataConditionsNotConditionDTO)
	}

	if src.AuthorizeEditorDataConditionsOrConditionDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataConditionsOrConditionDTO)
	}

	if src.AuthorizeEditorDataConditionsReferenceConditionDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataConditionsReferenceConditionDTO)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AuthorizeEditorDataConditionDTO) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AuthorizeEditorDataConditionsAndConditionDTO != nil {
		return obj.AuthorizeEditorDataConditionsAndConditionDTO
	}

	if obj.AuthorizeEditorDataConditionsComparisonConditionDTO != nil {
		return obj.AuthorizeEditorDataConditionsComparisonConditionDTO
	}

	if obj.AuthorizeEditorDataConditionsEmptyConditionDTO != nil {
		return obj.AuthorizeEditorDataConditionsEmptyConditionDTO
	}

	if obj.AuthorizeEditorDataConditionsNotConditionDTO != nil {
		return obj.AuthorizeEditorDataConditionsNotConditionDTO
	}

	if obj.AuthorizeEditorDataConditionsOrConditionDTO != nil {
		return obj.AuthorizeEditorDataConditionsOrConditionDTO
	}

	if obj.AuthorizeEditorDataConditionsReferenceConditionDTO != nil {
		return obj.AuthorizeEditorDataConditionsReferenceConditionDTO
	}

	// all schemas are nil
	return nil
}

type NullableAuthorizeEditorDataConditionDTO struct {
	value *AuthorizeEditorDataConditionDTO
	isSet bool
}

func (v NullableAuthorizeEditorDataConditionDTO) Get() *AuthorizeEditorDataConditionDTO {
	return v.value
}

func (v *NullableAuthorizeEditorDataConditionDTO) Set(val *AuthorizeEditorDataConditionDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeEditorDataConditionDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeEditorDataConditionDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeEditorDataConditionDTO(val *AuthorizeEditorDataConditionDTO) *NullableAuthorizeEditorDataConditionDTO {
	return &NullableAuthorizeEditorDataConditionDTO{value: val, isSet: true}
}

func (v NullableAuthorizeEditorDataConditionDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeEditorDataConditionDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


