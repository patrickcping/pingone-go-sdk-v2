/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EnumAPIServerAuthorizationServerType The type of authorization server that will issue access tokens. Valid options are `PINGONE_SSO` or `EXTERNAL`. Defaults to `PINGONE_SSO`. Must be the same value as the directory.type. If `EXTERNAL`, the `authorizationServer.resource` field must not be provided.
type EnumAPIServerAuthorizationServerType string

// List of EnumAPIServerAuthorizationServerType
const (
	ENUMAPISERVERAUTHORIZATIONSERVERTYPE_PINGONE_SSO EnumAPIServerAuthorizationServerType = "PINGONE_SSO"
	ENUMAPISERVERAUTHORIZATIONSERVERTYPE_EXTERNAL    EnumAPIServerAuthorizationServerType = "EXTERNAL"
)

// All allowed values of EnumAPIServerAuthorizationServerType enum
var AllowedEnumAPIServerAuthorizationServerTypeEnumValues = []EnumAPIServerAuthorizationServerType{
	"PINGONE_SSO",
	"EXTERNAL",
}

func (v *EnumAPIServerAuthorizationServerType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAPIServerAuthorizationServerType(value)
	for _, existing := range AllowedEnumAPIServerAuthorizationServerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAPIServerAuthorizationServerType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAPIServerAuthorizationServerTypeFromValue returns a pointer to a valid EnumAPIServerAuthorizationServerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAPIServerAuthorizationServerTypeFromValue(v string) (*EnumAPIServerAuthorizationServerType, error) {
	ev := EnumAPIServerAuthorizationServerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAPIServerAuthorizationServerType: valid values are %v", v, AllowedEnumAPIServerAuthorizationServerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAPIServerAuthorizationServerType) IsValid() bool {
	for _, existing := range AllowedEnumAPIServerAuthorizationServerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAPIServerAuthorizationServerType value
func (v EnumAPIServerAuthorizationServerType) Ptr() *EnumAPIServerAuthorizationServerType {
	return &v
}

type NullableEnumAPIServerAuthorizationServerType struct {
	value *EnumAPIServerAuthorizationServerType
	isSet bool
}

func (v NullableEnumAPIServerAuthorizationServerType) Get() *EnumAPIServerAuthorizationServerType {
	return v.value
}

func (v *NullableEnumAPIServerAuthorizationServerType) Set(val *EnumAPIServerAuthorizationServerType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAPIServerAuthorizationServerType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAPIServerAuthorizationServerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAPIServerAuthorizationServerType(val *EnumAPIServerAuthorizationServerType) *NullableEnumAPIServerAuthorizationServerType {
	return &NullableEnumAPIServerAuthorizationServerType{value: val, isSet: true}
}

func (v NullableEnumAPIServerAuthorizationServerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAPIServerAuthorizationServerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
