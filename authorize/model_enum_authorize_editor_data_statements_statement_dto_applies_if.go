/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf the model 'EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf'
type EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf string

// List of EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf
const (
	ENUMAUTHORIZEEDITORDATASTATEMENTSSTATEMENTDTOAPPLIESIF_ANYTHING EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf = "ANYTHING"
	ENUMAUTHORIZEEDITORDATASTATEMENTSSTATEMENTDTOAPPLIESIF_FINAL_DECISION_MATCHES EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf = "FINAL_DECISION_MATCHES"
	ENUMAUTHORIZEEDITORDATASTATEMENTSSTATEMENTDTOAPPLIESIF_PATH_MATCHES EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf = "PATH_MATCHES"
)

// All allowed values of EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf enum
var AllowedEnumAuthorizeEditorDataStatementsStatementDTOAppliesIfEnumValues = []EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf{
	"ANYTHING",
	"FINAL_DECISION_MATCHES",
	"PATH_MATCHES",
}

func (v *EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf(value)
	for _, existing := range AllowedEnumAuthorizeEditorDataStatementsStatementDTOAppliesIfEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAuthorizeEditorDataStatementsStatementDTOAppliesIfFromValue returns a pointer to a valid EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAuthorizeEditorDataStatementsStatementDTOAppliesIfFromValue(v string) (*EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf, error) {
	ev := EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf: valid values are %v", v, AllowedEnumAuthorizeEditorDataStatementsStatementDTOAppliesIfEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf) IsValid() bool {
	for _, existing := range AllowedEnumAuthorizeEditorDataStatementsStatementDTOAppliesIfEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf value
func (v EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf) Ptr() *EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf {
	return &v
}

type NullableEnumAuthorizeEditorDataStatementsStatementDTOAppliesIf struct {
	value *EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf
	isSet bool
}

func (v NullableEnumAuthorizeEditorDataStatementsStatementDTOAppliesIf) Get() *EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf {
	return v.value
}

func (v *NullableEnumAuthorizeEditorDataStatementsStatementDTOAppliesIf) Set(val *EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAuthorizeEditorDataStatementsStatementDTOAppliesIf) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAuthorizeEditorDataStatementsStatementDTOAppliesIf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAuthorizeEditorDataStatementsStatementDTOAppliesIf(val *EnumAuthorizeEditorDataStatementsStatementDTOAppliesIf) *NullableEnumAuthorizeEditorDataStatementsStatementDTOAppliesIf {
	return &NullableEnumAuthorizeEditorDataStatementsStatementDTOAppliesIf{value: val, isSet: true}
}

func (v NullableEnumAuthorizeEditorDataStatementsStatementDTOAppliesIf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAuthorizeEditorDataStatementsStatementDTOAppliesIf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

