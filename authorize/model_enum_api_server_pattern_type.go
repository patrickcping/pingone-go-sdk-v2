/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EnumAPIServerPatternType A string that specifies the type of the pattern. Options are `EXACT` ( the verbatim pattern is compared against the path from the request using a case-sensitive comparison) and `PARAMETER` (the pattern is compared against the path from the request using a case-sensitive comparison, using the syntax below to encode wildcards and path segment captures.)
type EnumAPIServerPatternType string

// List of EnumAPIServerPatternType
const (
	ENUMAPISERVERPATTERNTYPE_EXACT     EnumAPIServerPatternType = "EXACT"
	ENUMAPISERVERPATTERNTYPE_PARAMETER EnumAPIServerPatternType = "PARAMETER"
)

// All allowed values of EnumAPIServerPatternType enum
var AllowedEnumAPIServerPatternTypeEnumValues = []EnumAPIServerPatternType{
	"EXACT",
	"PARAMETER",
}

func (v *EnumAPIServerPatternType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAPIServerPatternType(value)
	for _, existing := range AllowedEnumAPIServerPatternTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAPIServerPatternType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAPIServerPatternTypeFromValue returns a pointer to a valid EnumAPIServerPatternType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAPIServerPatternTypeFromValue(v string) (*EnumAPIServerPatternType, error) {
	ev := EnumAPIServerPatternType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAPIServerPatternType: valid values are %v", v, AllowedEnumAPIServerPatternTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAPIServerPatternType) IsValid() bool {
	for _, existing := range AllowedEnumAPIServerPatternTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAPIServerPatternType value
func (v EnumAPIServerPatternType) Ptr() *EnumAPIServerPatternType {
	return &v
}

type NullableEnumAPIServerPatternType struct {
	value *EnumAPIServerPatternType
	isSet bool
}

func (v NullableEnumAPIServerPatternType) Get() *EnumAPIServerPatternType {
	return v.value
}

func (v *NullableEnumAPIServerPatternType) Set(val *EnumAPIServerPatternType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAPIServerPatternType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAPIServerPatternType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAPIServerPatternType(val *EnumAPIServerPatternType) *NullableEnumAPIServerPatternType {
	return &NullableEnumAPIServerPatternType{value: val, isSet: true}
}

func (v NullableEnumAPIServerPatternType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAPIServerPatternType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
