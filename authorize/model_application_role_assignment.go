/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
)

// checks if the ApplicationRoleAssignment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationRoleAssignment{}

// ApplicationRoleAssignment struct for ApplicationRoleAssignment
type ApplicationRoleAssignment struct {
	Links *map[string]LinksHATEOASValue `json:"_links,omitempty"`
	// The ID of the API server operation. This is randomly generated when the operation is created.
	Id *string `json:"id,omitempty"`
	// The role associated with the role assignment.
	Role map[string]interface{} `json:"role,omitempty"`
	// The user associated with the role assignment.
	Subject map[string]interface{} `json:"subject,omitempty"`
}

// NewApplicationRoleAssignment instantiates a new ApplicationRoleAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationRoleAssignment() *ApplicationRoleAssignment {
	this := ApplicationRoleAssignment{}
	return &this
}

// NewApplicationRoleAssignmentWithDefaults instantiates a new ApplicationRoleAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationRoleAssignmentWithDefaults() *ApplicationRoleAssignment {
	this := ApplicationRoleAssignment{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ApplicationRoleAssignment) GetLinks() map[string]LinksHATEOASValue {
	if o == nil || IsNil(o.Links) {
		var ret map[string]LinksHATEOASValue
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRoleAssignment) GetLinksOk() (*map[string]LinksHATEOASValue, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ApplicationRoleAssignment) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]LinksHATEOASValue and assigns it to the Links field.
func (o *ApplicationRoleAssignment) SetLinks(v map[string]LinksHATEOASValue) {
	o.Links = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApplicationRoleAssignment) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRoleAssignment) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApplicationRoleAssignment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApplicationRoleAssignment) SetId(v string) {
	o.Id = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *ApplicationRoleAssignment) GetRole() map[string]interface{} {
	if o == nil || IsNil(o.Role) {
		var ret map[string]interface{}
		return ret
	}
	return o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRoleAssignment) GetRoleOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Role) {
		return map[string]interface{}{}, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *ApplicationRoleAssignment) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given map[string]interface{} and assigns it to the Role field.
func (o *ApplicationRoleAssignment) SetRole(v map[string]interface{}) {
	o.Role = v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *ApplicationRoleAssignment) GetSubject() map[string]interface{} {
	if o == nil || IsNil(o.Subject) {
		var ret map[string]interface{}
		return ret
	}
	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationRoleAssignment) GetSubjectOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Subject) {
		return map[string]interface{}{}, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *ApplicationRoleAssignment) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given map[string]interface{} and assigns it to the Subject field.
func (o *ApplicationRoleAssignment) SetSubject(v map[string]interface{}) {
	o.Subject = v
}

func (o ApplicationRoleAssignment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationRoleAssignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	return toSerialize, nil
}

type NullableApplicationRoleAssignment struct {
	value *ApplicationRoleAssignment
	isSet bool
}

func (v NullableApplicationRoleAssignment) Get() *ApplicationRoleAssignment {
	return v.value
}

func (v *NullableApplicationRoleAssignment) Set(val *ApplicationRoleAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationRoleAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationRoleAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationRoleAssignment(val *ApplicationRoleAssignment) *NullableApplicationRoleAssignment {
	return &NullableApplicationRoleAssignment{value: val, isSet: true}
}

func (v NullableApplicationRoleAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationRoleAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
