/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator the model 'EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator'
type EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator string

// List of EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator
const (
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_IS_MEMBER_OF EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "IS_MEMBER_OF"
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_IS_NOT_MEMBER_OF EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "IS_NOT_MEMBER_OF"
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_CONTAINS EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "CONTAINS"
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_NOT_CONTAINS EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "NOT_CONTAINS"
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_EQUALS EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "EQUALS"
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_NOT_EQUALS EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "NOT_EQUALS"
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_GREATER_THAN EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "GREATER_THAN"
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_GREATER_THAN_OR_EQUAL EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "GREATER_THAN_OR_EQUAL"
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_LESSER_THAN EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "LESSER_THAN"
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_LESSER_THAN_OR_EQUAL EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "LESSER_THAN_OR_EQUAL"
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_REGULAR_EXPRESSION EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "REGULAR_EXPRESSION"
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_STARTS_WITH EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "STARTS_WITH"
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_NOT_STARTS_WITH EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "NOT_STARTS_WITH"
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_ENDS_WITH EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "ENDS_WITH"
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_NOT_ENDS_WITH EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "NOT_ENDS_WITH"
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_MATCHES EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "MATCHES"
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_NOT_MATCHES EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "NOT_MATCHES"
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_IS_IN EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "IS_IN"
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_IS_NOT_IN EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "IS_NOT_IN"
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_IN_CIDR_BLOCK EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "IN_CIDR_BLOCK"
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_NOT_IN_CIDR_BLOCK EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "NOT_IN_CIDR_BLOCK"
	ENUMAUTHORIZEEDITORDATACONDITIONSCOMPARISONCONDITIONDTOCOMPARATOR_HAS_PERMISSION EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator = "HAS_PERMISSION"
)

// All allowed values of EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator enum
var AllowedEnumAuthorizeEditorDataConditionsComparisonConditionDTOComparatorEnumValues = []EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator{
	"IS_MEMBER_OF",
	"IS_NOT_MEMBER_OF",
	"CONTAINS",
	"NOT_CONTAINS",
	"EQUALS",
	"NOT_EQUALS",
	"GREATER_THAN",
	"GREATER_THAN_OR_EQUAL",
	"LESSER_THAN",
	"LESSER_THAN_OR_EQUAL",
	"REGULAR_EXPRESSION",
	"STARTS_WITH",
	"NOT_STARTS_WITH",
	"ENDS_WITH",
	"NOT_ENDS_WITH",
	"MATCHES",
	"NOT_MATCHES",
	"IS_IN",
	"IS_NOT_IN",
	"IN_CIDR_BLOCK",
	"NOT_IN_CIDR_BLOCK",
	"HAS_PERMISSION",
}

func (v *EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator(value)
	for _, existing := range AllowedEnumAuthorizeEditorDataConditionsComparisonConditionDTOComparatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAuthorizeEditorDataConditionsComparisonConditionDTOComparatorFromValue returns a pointer to a valid EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAuthorizeEditorDataConditionsComparisonConditionDTOComparatorFromValue(v string) (*EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator, error) {
	ev := EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator: valid values are %v", v, AllowedEnumAuthorizeEditorDataConditionsComparisonConditionDTOComparatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator) IsValid() bool {
	for _, existing := range AllowedEnumAuthorizeEditorDataConditionsComparisonConditionDTOComparatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator value
func (v EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator) Ptr() *EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator {
	return &v
}

type NullableEnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator struct {
	value *EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator
	isSet bool
}

func (v NullableEnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator) Get() *EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator {
	return v.value
}

func (v *NullableEnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator) Set(val *EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator(val *EnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator) *NullableEnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator {
	return &NullableEnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator{value: val, isSet: true}
}

func (v NullableEnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAuthorizeEditorDataConditionsComparisonConditionDTOComparator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

