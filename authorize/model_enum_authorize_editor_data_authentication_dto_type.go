/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EnumAuthorizeEditorDataAuthenticationDTOType the model 'EnumAuthorizeEditorDataAuthenticationDTOType'
type EnumAuthorizeEditorDataAuthenticationDTOType string

// List of EnumAuthorizeEditorDataAuthenticationDTOType
const (
	ENUMAUTHORIZEEDITORDATAAUTHENTICATIONDTOTYPE_BASIC EnumAuthorizeEditorDataAuthenticationDTOType = "BASIC"
	ENUMAUTHORIZEEDITORDATAAUTHENTICATIONDTOTYPE_CLIENT_CREDENTIALS EnumAuthorizeEditorDataAuthenticationDTOType = "CLIENT_CREDENTIALS"
	ENUMAUTHORIZEEDITORDATAAUTHENTICATIONDTOTYPE_NONE EnumAuthorizeEditorDataAuthenticationDTOType = "NONE"
	ENUMAUTHORIZEEDITORDATAAUTHENTICATIONDTOTYPE_TOKEN EnumAuthorizeEditorDataAuthenticationDTOType = "TOKEN"
)

// All allowed values of EnumAuthorizeEditorDataAuthenticationDTOType enum
var AllowedEnumAuthorizeEditorDataAuthenticationDTOTypeEnumValues = []EnumAuthorizeEditorDataAuthenticationDTOType{
	"BASIC",
	"CLIENT_CREDENTIALS",
	"NONE",
	"TOKEN",
}

func (v *EnumAuthorizeEditorDataAuthenticationDTOType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAuthorizeEditorDataAuthenticationDTOType(value)
	for _, existing := range AllowedEnumAuthorizeEditorDataAuthenticationDTOTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAuthorizeEditorDataAuthenticationDTOType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAuthorizeEditorDataAuthenticationDTOTypeFromValue returns a pointer to a valid EnumAuthorizeEditorDataAuthenticationDTOType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAuthorizeEditorDataAuthenticationDTOTypeFromValue(v string) (*EnumAuthorizeEditorDataAuthenticationDTOType, error) {
	ev := EnumAuthorizeEditorDataAuthenticationDTOType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAuthorizeEditorDataAuthenticationDTOType: valid values are %v", v, AllowedEnumAuthorizeEditorDataAuthenticationDTOTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAuthorizeEditorDataAuthenticationDTOType) IsValid() bool {
	for _, existing := range AllowedEnumAuthorizeEditorDataAuthenticationDTOTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAuthorizeEditorDataAuthenticationDTOType value
func (v EnumAuthorizeEditorDataAuthenticationDTOType) Ptr() *EnumAuthorizeEditorDataAuthenticationDTOType {
	return &v
}

type NullableEnumAuthorizeEditorDataAuthenticationDTOType struct {
	value *EnumAuthorizeEditorDataAuthenticationDTOType
	isSet bool
}

func (v NullableEnumAuthorizeEditorDataAuthenticationDTOType) Get() *EnumAuthorizeEditorDataAuthenticationDTOType {
	return v.value
}

func (v *NullableEnumAuthorizeEditorDataAuthenticationDTOType) Set(val *EnumAuthorizeEditorDataAuthenticationDTOType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAuthorizeEditorDataAuthenticationDTOType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAuthorizeEditorDataAuthenticationDTOType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAuthorizeEditorDataAuthenticationDTOType(val *EnumAuthorizeEditorDataAuthenticationDTOType) *NullableEnumAuthorizeEditorDataAuthenticationDTOType {
	return &NullableEnumAuthorizeEditorDataAuthenticationDTOType{value: val, isSet: true}
}

func (v NullableEnumAuthorizeEditorDataAuthenticationDTOType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAuthorizeEditorDataAuthenticationDTOType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

