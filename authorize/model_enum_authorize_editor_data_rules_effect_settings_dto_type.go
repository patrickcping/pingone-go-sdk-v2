/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EnumAuthorizeEditorDataRulesEffectSettingsDTOType the model 'EnumAuthorizeEditorDataRulesEffectSettingsDTOType'
type EnumAuthorizeEditorDataRulesEffectSettingsDTOType string

// List of EnumAuthorizeEditorDataRulesEffectSettingsDTOType
const (
	ENUMAUTHORIZEEDITORDATARULESEFFECTSETTINGSDTOTYPE_CONDITIONAL_DENY_ELSE_PERMIT EnumAuthorizeEditorDataRulesEffectSettingsDTOType = "CONDITIONAL_DENY_ELSE_PERMIT"
	ENUMAUTHORIZEEDITORDATARULESEFFECTSETTINGSDTOTYPE_CONDITIONAL_PERMIT_ELSE_DENY EnumAuthorizeEditorDataRulesEffectSettingsDTOType = "CONDITIONAL_PERMIT_ELSE_DENY"
	ENUMAUTHORIZEEDITORDATARULESEFFECTSETTINGSDTOTYPE_UNCONDITIONAL_DENY EnumAuthorizeEditorDataRulesEffectSettingsDTOType = "UNCONDITIONAL_DENY"
	ENUMAUTHORIZEEDITORDATARULESEFFECTSETTINGSDTOTYPE_UNCONDITIONAL_PERMIT EnumAuthorizeEditorDataRulesEffectSettingsDTOType = "UNCONDITIONAL_PERMIT"
)

// All allowed values of EnumAuthorizeEditorDataRulesEffectSettingsDTOType enum
var AllowedEnumAuthorizeEditorDataRulesEffectSettingsDTOTypeEnumValues = []EnumAuthorizeEditorDataRulesEffectSettingsDTOType{
	"CONDITIONAL_DENY_ELSE_PERMIT",
	"CONDITIONAL_PERMIT_ELSE_DENY",
	"UNCONDITIONAL_DENY",
	"UNCONDITIONAL_PERMIT",
}

func (v *EnumAuthorizeEditorDataRulesEffectSettingsDTOType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAuthorizeEditorDataRulesEffectSettingsDTOType(value)
	for _, existing := range AllowedEnumAuthorizeEditorDataRulesEffectSettingsDTOTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAuthorizeEditorDataRulesEffectSettingsDTOType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAuthorizeEditorDataRulesEffectSettingsDTOTypeFromValue returns a pointer to a valid EnumAuthorizeEditorDataRulesEffectSettingsDTOType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAuthorizeEditorDataRulesEffectSettingsDTOTypeFromValue(v string) (*EnumAuthorizeEditorDataRulesEffectSettingsDTOType, error) {
	ev := EnumAuthorizeEditorDataRulesEffectSettingsDTOType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAuthorizeEditorDataRulesEffectSettingsDTOType: valid values are %v", v, AllowedEnumAuthorizeEditorDataRulesEffectSettingsDTOTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAuthorizeEditorDataRulesEffectSettingsDTOType) IsValid() bool {
	for _, existing := range AllowedEnumAuthorizeEditorDataRulesEffectSettingsDTOTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAuthorizeEditorDataRulesEffectSettingsDTOType value
func (v EnumAuthorizeEditorDataRulesEffectSettingsDTOType) Ptr() *EnumAuthorizeEditorDataRulesEffectSettingsDTOType {
	return &v
}

type NullableEnumAuthorizeEditorDataRulesEffectSettingsDTOType struct {
	value *EnumAuthorizeEditorDataRulesEffectSettingsDTOType
	isSet bool
}

func (v NullableEnumAuthorizeEditorDataRulesEffectSettingsDTOType) Get() *EnumAuthorizeEditorDataRulesEffectSettingsDTOType {
	return v.value
}

func (v *NullableEnumAuthorizeEditorDataRulesEffectSettingsDTOType) Set(val *EnumAuthorizeEditorDataRulesEffectSettingsDTOType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAuthorizeEditorDataRulesEffectSettingsDTOType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAuthorizeEditorDataRulesEffectSettingsDTOType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAuthorizeEditorDataRulesEffectSettingsDTOType(val *EnumAuthorizeEditorDataRulesEffectSettingsDTOType) *NullableEnumAuthorizeEditorDataRulesEffectSettingsDTOType {
	return &NullableEnumAuthorizeEditorDataRulesEffectSettingsDTOType{value: val, isSet: true}
}

func (v NullableEnumAuthorizeEditorDataRulesEffectSettingsDTOType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAuthorizeEditorDataRulesEffectSettingsDTOType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

