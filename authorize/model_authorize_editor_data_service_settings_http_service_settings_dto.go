/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
)

// checks if the AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO{}

// AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO struct for AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO
type AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO struct {
	MaximumConcurrentRequests *int32 `json:"maximumConcurrentRequests,omitempty"`
	MaximumRequestsPerSecond *float64 `json:"maximumRequestsPerSecond,omitempty"`
	TimeoutMilliseconds *int32 `json:"timeoutMilliseconds,omitempty"`
	Url string `json:"url"`
	Verb EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb `json:"verb"`
	Body *string `json:"body,omitempty"`
	ContentType *string `json:"contentType,omitempty"`
	Headers []AuthorizeEditorDataHttpRequestHeaderDTO `json:"headers,omitempty"`
	Authentication AuthorizeEditorDataAuthenticationDTO `json:"authentication"`
	TlsSettings AuthorizeEditorDataTlsSettingsDTO `json:"tlsSettings"`
}

// NewAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO instantiates a new AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO(url string, verb EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb, authentication AuthorizeEditorDataAuthenticationDTO, tlsSettings AuthorizeEditorDataTlsSettingsDTO) *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO {
	this := AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO{}
	this.Url = url
	this.Verb = verb
	this.Authentication = authentication
	this.TlsSettings = tlsSettings
	return &this
}

// NewAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOWithDefaults instantiates a new AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOWithDefaults() *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO {
	this := AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO{}
	return &this
}

// GetMaximumConcurrentRequests returns the MaximumConcurrentRequests field value if set, zero value otherwise.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) GetMaximumConcurrentRequests() int32 {
	if o == nil || IsNil(o.MaximumConcurrentRequests) {
		var ret int32
		return ret
	}
	return *o.MaximumConcurrentRequests
}

// GetMaximumConcurrentRequestsOk returns a tuple with the MaximumConcurrentRequests field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) GetMaximumConcurrentRequestsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumConcurrentRequests) {
		return nil, false
	}
	return o.MaximumConcurrentRequests, true
}

// HasMaximumConcurrentRequests returns a boolean if a field has been set.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) HasMaximumConcurrentRequests() bool {
	if o != nil && !IsNil(o.MaximumConcurrentRequests) {
		return true
	}

	return false
}

// SetMaximumConcurrentRequests gets a reference to the given int32 and assigns it to the MaximumConcurrentRequests field.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) SetMaximumConcurrentRequests(v int32) {
	o.MaximumConcurrentRequests = &v
}

// GetMaximumRequestsPerSecond returns the MaximumRequestsPerSecond field value if set, zero value otherwise.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) GetMaximumRequestsPerSecond() float64 {
	if o == nil || IsNil(o.MaximumRequestsPerSecond) {
		var ret float64
		return ret
	}
	return *o.MaximumRequestsPerSecond
}

// GetMaximumRequestsPerSecondOk returns a tuple with the MaximumRequestsPerSecond field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) GetMaximumRequestsPerSecondOk() (*float64, bool) {
	if o == nil || IsNil(o.MaximumRequestsPerSecond) {
		return nil, false
	}
	return o.MaximumRequestsPerSecond, true
}

// HasMaximumRequestsPerSecond returns a boolean if a field has been set.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) HasMaximumRequestsPerSecond() bool {
	if o != nil && !IsNil(o.MaximumRequestsPerSecond) {
		return true
	}

	return false
}

// SetMaximumRequestsPerSecond gets a reference to the given float64 and assigns it to the MaximumRequestsPerSecond field.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) SetMaximumRequestsPerSecond(v float64) {
	o.MaximumRequestsPerSecond = &v
}

// GetTimeoutMilliseconds returns the TimeoutMilliseconds field value if set, zero value otherwise.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) GetTimeoutMilliseconds() int32 {
	if o == nil || IsNil(o.TimeoutMilliseconds) {
		var ret int32
		return ret
	}
	return *o.TimeoutMilliseconds
}

// GetTimeoutMillisecondsOk returns a tuple with the TimeoutMilliseconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) GetTimeoutMillisecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeoutMilliseconds) {
		return nil, false
	}
	return o.TimeoutMilliseconds, true
}

// HasTimeoutMilliseconds returns a boolean if a field has been set.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) HasTimeoutMilliseconds() bool {
	if o != nil && !IsNil(o.TimeoutMilliseconds) {
		return true
	}

	return false
}

// SetTimeoutMilliseconds gets a reference to the given int32 and assigns it to the TimeoutMilliseconds field.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) SetTimeoutMilliseconds(v int32) {
	o.TimeoutMilliseconds = &v
}

// GetUrl returns the Url field value
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) SetUrl(v string) {
	o.Url = v
}

// GetVerb returns the Verb field value
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) GetVerb() EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb {
	if o == nil {
		var ret EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb
		return ret
	}

	return o.Verb
}

// GetVerbOk returns a tuple with the Verb field value
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) GetVerbOk() (*EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Verb, true
}

// SetVerb sets field value
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) SetVerb(v EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb) {
	o.Verb = v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) GetBody() string {
	if o == nil || IsNil(o.Body) {
		var ret string
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) GetBodyOk() (*string, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given string and assigns it to the Body field.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) SetBody(v string) {
	o.Body = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) GetContentType() string {
	if o == nil || IsNil(o.ContentType) {
		var ret string
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) GetContentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContentType) {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) HasContentType() bool {
	if o != nil && !IsNil(o.ContentType) {
		return true
	}

	return false
}

// SetContentType gets a reference to the given string and assigns it to the ContentType field.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) SetContentType(v string) {
	o.ContentType = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) GetHeaders() []AuthorizeEditorDataHttpRequestHeaderDTO {
	if o == nil || IsNil(o.Headers) {
		var ret []AuthorizeEditorDataHttpRequestHeaderDTO
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) GetHeadersOk() ([]AuthorizeEditorDataHttpRequestHeaderDTO, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given []AuthorizeEditorDataHttpRequestHeaderDTO and assigns it to the Headers field.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) SetHeaders(v []AuthorizeEditorDataHttpRequestHeaderDTO) {
	o.Headers = v
}

// GetAuthentication returns the Authentication field value
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) GetAuthentication() AuthorizeEditorDataAuthenticationDTO {
	if o == nil {
		var ret AuthorizeEditorDataAuthenticationDTO
		return ret
	}

	return o.Authentication
}

// GetAuthenticationOk returns a tuple with the Authentication field value
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) GetAuthenticationOk() (*AuthorizeEditorDataAuthenticationDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Authentication, true
}

// SetAuthentication sets field value
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) SetAuthentication(v AuthorizeEditorDataAuthenticationDTO) {
	o.Authentication = v
}

// GetTlsSettings returns the TlsSettings field value
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) GetTlsSettings() AuthorizeEditorDataTlsSettingsDTO {
	if o == nil {
		var ret AuthorizeEditorDataTlsSettingsDTO
		return ret
	}

	return o.TlsSettings
}

// GetTlsSettingsOk returns a tuple with the TlsSettings field value
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) GetTlsSettingsOk() (*AuthorizeEditorDataTlsSettingsDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TlsSettings, true
}

// SetTlsSettings sets field value
func (o *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) SetTlsSettings(v AuthorizeEditorDataTlsSettingsDTO) {
	o.TlsSettings = v
}

func (o AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaximumConcurrentRequests) {
		toSerialize["maximumConcurrentRequests"] = o.MaximumConcurrentRequests
	}
	if !IsNil(o.MaximumRequestsPerSecond) {
		toSerialize["maximumRequestsPerSecond"] = o.MaximumRequestsPerSecond
	}
	if !IsNil(o.TimeoutMilliseconds) {
		toSerialize["timeoutMilliseconds"] = o.TimeoutMilliseconds
	}
	toSerialize["url"] = o.Url
	toSerialize["verb"] = o.Verb
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.ContentType) {
		toSerialize["contentType"] = o.ContentType
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	toSerialize["authentication"] = o.Authentication
	toSerialize["tlsSettings"] = o.TlsSettings
	return toSerialize, nil
}

type NullableAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO struct {
	value *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO
	isSet bool
}

func (v NullableAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) Get() *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO {
	return v.value
}

func (v *NullableAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) Set(val *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO(val *AuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) *NullableAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO {
	return &NullableAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO{value: val, isSet: true}
}

func (v NullableAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


