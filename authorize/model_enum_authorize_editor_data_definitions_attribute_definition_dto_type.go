/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType the model 'EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType'
type EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType string

// List of EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType
const (
	ENUMAUTHORIZEEDITORDATADEFINITIONSATTRIBUTEDEFINITIONDTOTYPE_ATTRIBUTE EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType = "ATTRIBUTE"
)

// All allowed values of EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType enum
var AllowedEnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOTypeEnumValues = []EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType{
	"ATTRIBUTE",
}

func (v *EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType(value)
	for _, existing := range AllowedEnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOTypeFromValue returns a pointer to a valid EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOTypeFromValue(v string) (*EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType, error) {
	ev := EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType: valid values are %v", v, AllowedEnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType) IsValid() bool {
	for _, existing := range AllowedEnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType value
func (v EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType) Ptr() *EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType {
	return &v
}

type NullableEnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType struct {
	value *EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType
	isSet bool
}

func (v NullableEnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType) Get() *EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType {
	return v.value
}

func (v *NullableEnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType) Set(val *EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType(val *EnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType) *NullableEnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType {
	return &NullableEnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType{value: val, isSet: true}
}

func (v NullableEnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAuthorizeEditorDataDefinitionsAttributeDefinitionDTOType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

