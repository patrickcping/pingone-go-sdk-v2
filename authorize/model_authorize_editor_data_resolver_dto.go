/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// AuthorizeEditorDataResolverDTO - struct for AuthorizeEditorDataResolverDTO
type AuthorizeEditorDataResolverDTO struct {
	AuthorizeEditorDataAttributeResolversAttributeResolverDTO *AuthorizeEditorDataAttributeResolversAttributeResolverDTO
	AuthorizeEditorDataAttributeResolversConstantResolverDTO *AuthorizeEditorDataAttributeResolversConstantResolverDTO
	AuthorizeEditorDataAttributeResolversCurrentRepetitionValueResolverDTO *AuthorizeEditorDataAttributeResolversCurrentRepetitionValueResolverDTO
	AuthorizeEditorDataAttributeResolversCurrentUserIDResolverDTO *AuthorizeEditorDataAttributeResolversCurrentUserIDResolverDTO
	AuthorizeEditorDataAttributeResolversRequestResolverDTO *AuthorizeEditorDataAttributeResolversRequestResolverDTO
	AuthorizeEditorDataAttributeResolversServiceResolverDTO *AuthorizeEditorDataAttributeResolversServiceResolverDTO
	AuthorizeEditorDataAttributeResolversSystemResolverDTO *AuthorizeEditorDataAttributeResolversSystemResolverDTO
	AuthorizeEditorDataAttributeResolversUserResolverDTO *AuthorizeEditorDataAttributeResolversUserResolverDTO
}

// AuthorizeEditorDataAttributeResolversAttributeResolverDTOAsAuthorizeEditorDataResolverDTO is a convenience function that returns AuthorizeEditorDataAttributeResolversAttributeResolverDTO wrapped in AuthorizeEditorDataResolverDTO
func AuthorizeEditorDataAttributeResolversAttributeResolverDTOAsAuthorizeEditorDataResolverDTO(v *AuthorizeEditorDataAttributeResolversAttributeResolverDTO) AuthorizeEditorDataResolverDTO {
	return AuthorizeEditorDataResolverDTO{
		AuthorizeEditorDataAttributeResolversAttributeResolverDTO: v,
	}
}

// AuthorizeEditorDataAttributeResolversConstantResolverDTOAsAuthorizeEditorDataResolverDTO is a convenience function that returns AuthorizeEditorDataAttributeResolversConstantResolverDTO wrapped in AuthorizeEditorDataResolverDTO
func AuthorizeEditorDataAttributeResolversConstantResolverDTOAsAuthorizeEditorDataResolverDTO(v *AuthorizeEditorDataAttributeResolversConstantResolverDTO) AuthorizeEditorDataResolverDTO {
	return AuthorizeEditorDataResolverDTO{
		AuthorizeEditorDataAttributeResolversConstantResolverDTO: v,
	}
}

// AuthorizeEditorDataAttributeResolversCurrentRepetitionValueResolverDTOAsAuthorizeEditorDataResolverDTO is a convenience function that returns AuthorizeEditorDataAttributeResolversCurrentRepetitionValueResolverDTO wrapped in AuthorizeEditorDataResolverDTO
func AuthorizeEditorDataAttributeResolversCurrentRepetitionValueResolverDTOAsAuthorizeEditorDataResolverDTO(v *AuthorizeEditorDataAttributeResolversCurrentRepetitionValueResolverDTO) AuthorizeEditorDataResolverDTO {
	return AuthorizeEditorDataResolverDTO{
		AuthorizeEditorDataAttributeResolversCurrentRepetitionValueResolverDTO: v,
	}
}

// AuthorizeEditorDataAttributeResolversCurrentUserIDResolverDTOAsAuthorizeEditorDataResolverDTO is a convenience function that returns AuthorizeEditorDataAttributeResolversCurrentUserIDResolverDTO wrapped in AuthorizeEditorDataResolverDTO
func AuthorizeEditorDataAttributeResolversCurrentUserIDResolverDTOAsAuthorizeEditorDataResolverDTO(v *AuthorizeEditorDataAttributeResolversCurrentUserIDResolverDTO) AuthorizeEditorDataResolverDTO {
	return AuthorizeEditorDataResolverDTO{
		AuthorizeEditorDataAttributeResolversCurrentUserIDResolverDTO: v,
	}
}

// AuthorizeEditorDataAttributeResolversRequestResolverDTOAsAuthorizeEditorDataResolverDTO is a convenience function that returns AuthorizeEditorDataAttributeResolversRequestResolverDTO wrapped in AuthorizeEditorDataResolverDTO
func AuthorizeEditorDataAttributeResolversRequestResolverDTOAsAuthorizeEditorDataResolverDTO(v *AuthorizeEditorDataAttributeResolversRequestResolverDTO) AuthorizeEditorDataResolverDTO {
	return AuthorizeEditorDataResolverDTO{
		AuthorizeEditorDataAttributeResolversRequestResolverDTO: v,
	}
}

// AuthorizeEditorDataAttributeResolversServiceResolverDTOAsAuthorizeEditorDataResolverDTO is a convenience function that returns AuthorizeEditorDataAttributeResolversServiceResolverDTO wrapped in AuthorizeEditorDataResolverDTO
func AuthorizeEditorDataAttributeResolversServiceResolverDTOAsAuthorizeEditorDataResolverDTO(v *AuthorizeEditorDataAttributeResolversServiceResolverDTO) AuthorizeEditorDataResolverDTO {
	return AuthorizeEditorDataResolverDTO{
		AuthorizeEditorDataAttributeResolversServiceResolverDTO: v,
	}
}

// AuthorizeEditorDataAttributeResolversSystemResolverDTOAsAuthorizeEditorDataResolverDTO is a convenience function that returns AuthorizeEditorDataAttributeResolversSystemResolverDTO wrapped in AuthorizeEditorDataResolverDTO
func AuthorizeEditorDataAttributeResolversSystemResolverDTOAsAuthorizeEditorDataResolverDTO(v *AuthorizeEditorDataAttributeResolversSystemResolverDTO) AuthorizeEditorDataResolverDTO {
	return AuthorizeEditorDataResolverDTO{
		AuthorizeEditorDataAttributeResolversSystemResolverDTO: v,
	}
}

// AuthorizeEditorDataAttributeResolversUserResolverDTOAsAuthorizeEditorDataResolverDTO is a convenience function that returns AuthorizeEditorDataAttributeResolversUserResolverDTO wrapped in AuthorizeEditorDataResolverDTO
func AuthorizeEditorDataAttributeResolversUserResolverDTOAsAuthorizeEditorDataResolverDTO(v *AuthorizeEditorDataAttributeResolversUserResolverDTO) AuthorizeEditorDataResolverDTO {
	return AuthorizeEditorDataResolverDTO{
		AuthorizeEditorDataAttributeResolversUserResolverDTO: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AuthorizeEditorDataResolverDTO) UnmarshalJSON(data []byte) error {

	var common AuthorizeEditorDataResolverDTOCommon

	if err := json.Unmarshal(data, &common); err != nil { // simple model
		return err
	}

	dst.AuthorizeEditorDataAttributeResolversAttributeResolverDTO = nil
	dst.AuthorizeEditorDataAttributeResolversConstantResolverDTO = nil
	dst.AuthorizeEditorDataAttributeResolversCurrentRepetitionValueResolverDTO = nil
	dst.AuthorizeEditorDataAttributeResolversCurrentUserIDResolverDTO = nil
	dst.AuthorizeEditorDataAttributeResolversRequestResolverDTO = nil
	dst.AuthorizeEditorDataAttributeResolversServiceResolverDTO = nil
	dst.AuthorizeEditorDataAttributeResolversSystemResolverDTO = nil
	dst.AuthorizeEditorDataAttributeResolversUserResolverDTO = nil

	switch common.GetType() {
	case ENUMAUTHORIZEEDITORDATARESOLVERDTOTYPE_ATTRIBUTE:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataAttributeResolversAttributeResolverDTO); err != nil { // simple model
			return err
		}
	case ENUMAUTHORIZEEDITORDATARESOLVERDTOTYPE_CONSTANT:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataAttributeResolversConstantResolverDTO); err != nil { // simple model
			return err
		}
	case ENUMAUTHORIZEEDITORDATARESOLVERDTOTYPE_CURRENT_REPETITION_VALUE:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataAttributeResolversCurrentRepetitionValueResolverDTO); err != nil { // simple model
			return err
		}
	case ENUMAUTHORIZEEDITORDATARESOLVERDTOTYPE_CURRENT_USER_ID:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataAttributeResolversCurrentUserIDResolverDTO); err != nil { // simple model
			return err
		}
	case ENUMAUTHORIZEEDITORDATARESOLVERDTOTYPE_REQUEST:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataAttributeResolversRequestResolverDTO); err != nil { // simple model
			return err
		}
	case ENUMAUTHORIZEEDITORDATARESOLVERDTOTYPE_SERVICE:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataAttributeResolversServiceResolverDTO); err != nil { // simple model
			return err
		}
	case ENUMAUTHORIZEEDITORDATARESOLVERDTOTYPE_SYSTEM:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataAttributeResolversSystemResolverDTO); err != nil { // simple model
			return err
		}
	case ENUMAUTHORIZEEDITORDATARESOLVERDTOTYPE_USER:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataAttributeResolversUserResolverDTO); err != nil { // simple model
			return err
		}
	default:
		return fmt.Errorf("Data failed to match schemas in oneOf(AuthorizeEditorDataResolverDTO)")
	}
	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AuthorizeEditorDataResolverDTO) MarshalJSON() ([]byte, error) {
	if src.AuthorizeEditorDataAttributeResolversAttributeResolverDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataAttributeResolversAttributeResolverDTO)
	}

	if src.AuthorizeEditorDataAttributeResolversConstantResolverDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataAttributeResolversConstantResolverDTO)
	}

	if src.AuthorizeEditorDataAttributeResolversCurrentRepetitionValueResolverDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataAttributeResolversCurrentRepetitionValueResolverDTO)
	}

	if src.AuthorizeEditorDataAttributeResolversCurrentUserIDResolverDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataAttributeResolversCurrentUserIDResolverDTO)
	}

	if src.AuthorizeEditorDataAttributeResolversRequestResolverDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataAttributeResolversRequestResolverDTO)
	}

	if src.AuthorizeEditorDataAttributeResolversServiceResolverDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataAttributeResolversServiceResolverDTO)
	}

	if src.AuthorizeEditorDataAttributeResolversSystemResolverDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataAttributeResolversSystemResolverDTO)
	}

	if src.AuthorizeEditorDataAttributeResolversUserResolverDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataAttributeResolversUserResolverDTO)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AuthorizeEditorDataResolverDTO) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AuthorizeEditorDataAttributeResolversAttributeResolverDTO != nil {
		return obj.AuthorizeEditorDataAttributeResolversAttributeResolverDTO
	}

	if obj.AuthorizeEditorDataAttributeResolversConstantResolverDTO != nil {
		return obj.AuthorizeEditorDataAttributeResolversConstantResolverDTO
	}

	if obj.AuthorizeEditorDataAttributeResolversCurrentRepetitionValueResolverDTO != nil {
		return obj.AuthorizeEditorDataAttributeResolversCurrentRepetitionValueResolverDTO
	}

	if obj.AuthorizeEditorDataAttributeResolversCurrentUserIDResolverDTO != nil {
		return obj.AuthorizeEditorDataAttributeResolversCurrentUserIDResolverDTO
	}

	if obj.AuthorizeEditorDataAttributeResolversRequestResolverDTO != nil {
		return obj.AuthorizeEditorDataAttributeResolversRequestResolverDTO
	}

	if obj.AuthorizeEditorDataAttributeResolversServiceResolverDTO != nil {
		return obj.AuthorizeEditorDataAttributeResolversServiceResolverDTO
	}

	if obj.AuthorizeEditorDataAttributeResolversSystemResolverDTO != nil {
		return obj.AuthorizeEditorDataAttributeResolversSystemResolverDTO
	}

	if obj.AuthorizeEditorDataAttributeResolversUserResolverDTO != nil {
		return obj.AuthorizeEditorDataAttributeResolversUserResolverDTO
	}

	// all schemas are nil
	return nil
}

type NullableAuthorizeEditorDataResolverDTO struct {
	value *AuthorizeEditorDataResolverDTO
	isSet bool
}

func (v NullableAuthorizeEditorDataResolverDTO) Get() *AuthorizeEditorDataResolverDTO {
	return v.value
}

func (v *NullableAuthorizeEditorDataResolverDTO) Set(val *AuthorizeEditorDataResolverDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeEditorDataResolverDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeEditorDataResolverDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeEditorDataResolverDTO(val *AuthorizeEditorDataResolverDTO) *NullableAuthorizeEditorDataResolverDTO {
	return &NullableAuthorizeEditorDataResolverDTO{value: val, isSet: true}
}

func (v NullableAuthorizeEditorDataResolverDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeEditorDataResolverDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


