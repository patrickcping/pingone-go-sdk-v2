/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
)

// checks if the AuthorizeEditorDataPoliciesPolicyDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizeEditorDataPoliciesPolicyDTO{}

// AuthorizeEditorDataPoliciesPolicyDTO The policy to create, without ID or Version properties
type AuthorizeEditorDataPoliciesPolicyDTO struct {
	Links *map[string]LinksHATEOASValue `json:"_links,omitempty"`
	// HAL embedded resources
	Embedded map[string]map[string]interface{} `json:"_embedded,omitempty"`
	// The resource's unique identifier
	Id *string `json:"id,omitempty"`
	Environment *ObjectEnvironment `json:"environment,omitempty"`
	Type *string `json:"type,omitempty"`
	Name string `json:"name"`
	Description *string `json:"description,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Statements []map[string]interface{} `json:"statements,omitempty"`
	Condition *AuthorizeEditorDataConditionDTO `json:"condition,omitempty"`
	CombiningAlgorithm AuthorizeEditorDataPoliciesCombiningAlgorithmDTO `json:"combiningAlgorithm"`
	Children []AuthorizeEditorDataPoliciesPolicyChild `json:"children,omitempty"`
	RepetitionSettings *AuthorizeEditorDataPoliciesRepetitionSettingsDTO `json:"repetitionSettings,omitempty"`
	ManagedEntity *AuthorizeEditorDataManagedEntityDTO `json:"managedEntity,omitempty"`
}

// NewAuthorizeEditorDataPoliciesPolicyDTO instantiates a new AuthorizeEditorDataPoliciesPolicyDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizeEditorDataPoliciesPolicyDTO(name string, combiningAlgorithm AuthorizeEditorDataPoliciesCombiningAlgorithmDTO) *AuthorizeEditorDataPoliciesPolicyDTO {
	this := AuthorizeEditorDataPoliciesPolicyDTO{}
	this.Name = name
	this.CombiningAlgorithm = combiningAlgorithm
	return &this
}

// NewAuthorizeEditorDataPoliciesPolicyDTOWithDefaults instantiates a new AuthorizeEditorDataPoliciesPolicyDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizeEditorDataPoliciesPolicyDTOWithDefaults() *AuthorizeEditorDataPoliciesPolicyDTO {
	this := AuthorizeEditorDataPoliciesPolicyDTO{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetLinks() map[string]LinksHATEOASValue {
	if o == nil || IsNil(o.Links) {
		var ret map[string]LinksHATEOASValue
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetLinksOk() (*map[string]LinksHATEOASValue, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]LinksHATEOASValue and assigns it to the Links field.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) SetLinks(v map[string]LinksHATEOASValue) {
	o.Links = &v
}

// GetEmbedded returns the Embedded field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetEmbedded() map[string]map[string]interface{} {
	if o == nil || IsNil(o.Embedded) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Embedded
}

// GetEmbeddedOk returns a tuple with the Embedded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetEmbeddedOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Embedded) {
		return map[string]map[string]interface{}{}, false
	}
	return o.Embedded, true
}

// HasEmbedded returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) HasEmbedded() bool {
	if o != nil && !IsNil(o.Embedded) {
		return true
	}

	return false
}

// SetEmbedded gets a reference to the given map[string]map[string]interface{} and assigns it to the Embedded field.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) SetEmbedded(v map[string]map[string]interface{}) {
	o.Embedded = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) SetId(v string) {
	o.Id = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetEnvironment() ObjectEnvironment {
	if o == nil || IsNil(o.Environment) {
		var ret ObjectEnvironment
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetEnvironmentOk() (*ObjectEnvironment, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given ObjectEnvironment and assigns it to the Environment field.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) SetEnvironment(v ObjectEnvironment) {
	o.Environment = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AuthorizeEditorDataPoliciesPolicyDTO) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetStatements returns the Statements field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetStatements() []map[string]interface{} {
	if o == nil || IsNil(o.Statements) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Statements
}

// GetStatementsOk returns a tuple with the Statements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetStatementsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Statements) {
		return nil, false
	}
	return o.Statements, true
}

// HasStatements returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) HasStatements() bool {
	if o != nil && !IsNil(o.Statements) {
		return true
	}

	return false
}

// SetStatements gets a reference to the given []map[string]interface{} and assigns it to the Statements field.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) SetStatements(v []map[string]interface{}) {
	o.Statements = v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetCondition() AuthorizeEditorDataConditionDTO {
	if o == nil || IsNil(o.Condition) {
		var ret AuthorizeEditorDataConditionDTO
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetConditionOk() (*AuthorizeEditorDataConditionDTO, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given AuthorizeEditorDataConditionDTO and assigns it to the Condition field.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) SetCondition(v AuthorizeEditorDataConditionDTO) {
	o.Condition = &v
}

// GetCombiningAlgorithm returns the CombiningAlgorithm field value
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetCombiningAlgorithm() AuthorizeEditorDataPoliciesCombiningAlgorithmDTO {
	if o == nil {
		var ret AuthorizeEditorDataPoliciesCombiningAlgorithmDTO
		return ret
	}

	return o.CombiningAlgorithm
}

// GetCombiningAlgorithmOk returns a tuple with the CombiningAlgorithm field value
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetCombiningAlgorithmOk() (*AuthorizeEditorDataPoliciesCombiningAlgorithmDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CombiningAlgorithm, true
}

// SetCombiningAlgorithm sets field value
func (o *AuthorizeEditorDataPoliciesPolicyDTO) SetCombiningAlgorithm(v AuthorizeEditorDataPoliciesCombiningAlgorithmDTO) {
	o.CombiningAlgorithm = v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetChildren() []AuthorizeEditorDataPoliciesPolicyChild {
	if o == nil || IsNil(o.Children) {
		var ret []AuthorizeEditorDataPoliciesPolicyChild
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetChildrenOk() ([]AuthorizeEditorDataPoliciesPolicyChild, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []AuthorizeEditorDataPoliciesPolicyChild and assigns it to the Children field.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) SetChildren(v []AuthorizeEditorDataPoliciesPolicyChild) {
	o.Children = v
}

// GetRepetitionSettings returns the RepetitionSettings field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetRepetitionSettings() AuthorizeEditorDataPoliciesRepetitionSettingsDTO {
	if o == nil || IsNil(o.RepetitionSettings) {
		var ret AuthorizeEditorDataPoliciesRepetitionSettingsDTO
		return ret
	}
	return *o.RepetitionSettings
}

// GetRepetitionSettingsOk returns a tuple with the RepetitionSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetRepetitionSettingsOk() (*AuthorizeEditorDataPoliciesRepetitionSettingsDTO, bool) {
	if o == nil || IsNil(o.RepetitionSettings) {
		return nil, false
	}
	return o.RepetitionSettings, true
}

// HasRepetitionSettings returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) HasRepetitionSettings() bool {
	if o != nil && !IsNil(o.RepetitionSettings) {
		return true
	}

	return false
}

// SetRepetitionSettings gets a reference to the given AuthorizeEditorDataPoliciesRepetitionSettingsDTO and assigns it to the RepetitionSettings field.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) SetRepetitionSettings(v AuthorizeEditorDataPoliciesRepetitionSettingsDTO) {
	o.RepetitionSettings = &v
}

// GetManagedEntity returns the ManagedEntity field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetManagedEntity() AuthorizeEditorDataManagedEntityDTO {
	if o == nil || IsNil(o.ManagedEntity) {
		var ret AuthorizeEditorDataManagedEntityDTO
		return ret
	}
	return *o.ManagedEntity
}

// GetManagedEntityOk returns a tuple with the ManagedEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) GetManagedEntityOk() (*AuthorizeEditorDataManagedEntityDTO, bool) {
	if o == nil || IsNil(o.ManagedEntity) {
		return nil, false
	}
	return o.ManagedEntity, true
}

// HasManagedEntity returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) HasManagedEntity() bool {
	if o != nil && !IsNil(o.ManagedEntity) {
		return true
	}

	return false
}

// SetManagedEntity gets a reference to the given AuthorizeEditorDataManagedEntityDTO and assigns it to the ManagedEntity field.
func (o *AuthorizeEditorDataPoliciesPolicyDTO) SetManagedEntity(v AuthorizeEditorDataManagedEntityDTO) {
	o.ManagedEntity = &v
}

func (o AuthorizeEditorDataPoliciesPolicyDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizeEditorDataPoliciesPolicyDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.Embedded) {
		toSerialize["_embedded"] = o.Embedded
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Statements) {
		toSerialize["statements"] = o.Statements
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	toSerialize["combiningAlgorithm"] = o.CombiningAlgorithm
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !IsNil(o.RepetitionSettings) {
		toSerialize["repetitionSettings"] = o.RepetitionSettings
	}
	if !IsNil(o.ManagedEntity) {
		toSerialize["managedEntity"] = o.ManagedEntity
	}
	return toSerialize, nil
}

type NullableAuthorizeEditorDataPoliciesPolicyDTO struct {
	value *AuthorizeEditorDataPoliciesPolicyDTO
	isSet bool
}

func (v NullableAuthorizeEditorDataPoliciesPolicyDTO) Get() *AuthorizeEditorDataPoliciesPolicyDTO {
	return v.value
}

func (v *NullableAuthorizeEditorDataPoliciesPolicyDTO) Set(val *AuthorizeEditorDataPoliciesPolicyDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeEditorDataPoliciesPolicyDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeEditorDataPoliciesPolicyDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeEditorDataPoliciesPolicyDTO(val *AuthorizeEditorDataPoliciesPolicyDTO) *NullableAuthorizeEditorDataPoliciesPolicyDTO {
	return &NullableAuthorizeEditorDataPoliciesPolicyDTO{value: val, isSet: true}
}

func (v NullableAuthorizeEditorDataPoliciesPolicyDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeEditorDataPoliciesPolicyDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


