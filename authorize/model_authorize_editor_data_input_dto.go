/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// AuthorizeEditorDataInputDTO - struct for AuthorizeEditorDataInputDTO
type AuthorizeEditorDataInputDTO struct {
	AuthorizeEditorDataInputsAttributeInputDTO *AuthorizeEditorDataInputsAttributeInputDTO
	AuthorizeEditorDataInputsConstantInputDTO *AuthorizeEditorDataInputsConstantInputDTO
}

// AuthorizeEditorDataInputsAttributeInputDTOAsAuthorizeEditorDataInputDTO is a convenience function that returns AuthorizeEditorDataInputsAttributeInputDTO wrapped in AuthorizeEditorDataInputDTO
func AuthorizeEditorDataInputsAttributeInputDTOAsAuthorizeEditorDataInputDTO(v *AuthorizeEditorDataInputsAttributeInputDTO) AuthorizeEditorDataInputDTO {
	return AuthorizeEditorDataInputDTO{
		AuthorizeEditorDataInputsAttributeInputDTO: v,
	}
}

// AuthorizeEditorDataInputsConstantInputDTOAsAuthorizeEditorDataInputDTO is a convenience function that returns AuthorizeEditorDataInputsConstantInputDTO wrapped in AuthorizeEditorDataInputDTO
func AuthorizeEditorDataInputsConstantInputDTOAsAuthorizeEditorDataInputDTO(v *AuthorizeEditorDataInputsConstantInputDTO) AuthorizeEditorDataInputDTO {
	return AuthorizeEditorDataInputDTO{
		AuthorizeEditorDataInputsConstantInputDTO: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AuthorizeEditorDataInputDTO) UnmarshalJSON(data []byte) error {

	var common AuthorizeEditorDataInputDTOCommon

	if err := json.Unmarshal(data, &common); err != nil { // simple model
		return err
	}

	dst.AuthorizeEditorDataInputsAttributeInputDTO = nil
	dst.AuthorizeEditorDataInputsConstantInputDTO = nil

	switch common.GetType() {
	case ENUMAUTHORIZEEDITORDATAINPUTDTOTYPE_ATTRIBUTE:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataInputsAttributeInputDTO); err != nil { // simple model
			return err
		}
	case ENUMAUTHORIZEEDITORDATAINPUTDTOTYPE_CONSTANT:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataInputsConstantInputDTO); err != nil { // simple model
			return err
		}
	default:
		return fmt.Errorf("Data failed to match schemas in oneOf(AuthorizeEditorDataInputDTO)")
	}
	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AuthorizeEditorDataInputDTO) MarshalJSON() ([]byte, error) {
	if src.AuthorizeEditorDataInputsAttributeInputDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataInputsAttributeInputDTO)
	}

	if src.AuthorizeEditorDataInputsConstantInputDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataInputsConstantInputDTO)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AuthorizeEditorDataInputDTO) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AuthorizeEditorDataInputsAttributeInputDTO != nil {
		return obj.AuthorizeEditorDataInputsAttributeInputDTO
	}

	if obj.AuthorizeEditorDataInputsConstantInputDTO != nil {
		return obj.AuthorizeEditorDataInputsConstantInputDTO
	}

	// all schemas are nil
	return nil
}

type NullableAuthorizeEditorDataInputDTO struct {
	value *AuthorizeEditorDataInputDTO
	isSet bool
}

func (v NullableAuthorizeEditorDataInputDTO) Get() *AuthorizeEditorDataInputDTO {
	return v.value
}

func (v *NullableAuthorizeEditorDataInputDTO) Set(val *AuthorizeEditorDataInputDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeEditorDataInputDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeEditorDataInputDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeEditorDataInputDTO(val *AuthorizeEditorDataInputDTO) *NullableAuthorizeEditorDataInputDTO {
	return &NullableAuthorizeEditorDataInputDTO{value: val, isSet: true}
}

func (v NullableAuthorizeEditorDataInputDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeEditorDataInputDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


