/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb the model 'EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb'
type EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb string

// List of EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb
const (
	ENUMAUTHORIZEEDITORDATASERVICESETTINGSHTTPSERVICESETTINGSDTOVERB_GET EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb = "GET"
	ENUMAUTHORIZEEDITORDATASERVICESETTINGSHTTPSERVICESETTINGSDTOVERB_POST EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb = "POST"
	ENUMAUTHORIZEEDITORDATASERVICESETTINGSHTTPSERVICESETTINGSDTOVERB_PUT EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb = "PUT"
	ENUMAUTHORIZEEDITORDATASERVICESETTINGSHTTPSERVICESETTINGSDTOVERB_DELETE EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb = "DELETE"
	ENUMAUTHORIZEEDITORDATASERVICESETTINGSHTTPSERVICESETTINGSDTOVERB_HEAD EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb = "HEAD"
)

// All allowed values of EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb enum
var AllowedEnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerbEnumValues = []EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb{
	"GET",
	"POST",
	"PUT",
	"DELETE",
	"HEAD",
}

func (v *EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb(value)
	for _, existing := range AllowedEnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerbEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerbFromValue returns a pointer to a valid EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerbFromValue(v string) (*EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb, error) {
	ev := EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb: valid values are %v", v, AllowedEnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerbEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb) IsValid() bool {
	for _, existing := range AllowedEnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerbEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb value
func (v EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb) Ptr() *EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb {
	return &v
}

type NullableEnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb struct {
	value *EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb
	isSet bool
}

func (v NullableEnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb) Get() *EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb {
	return v.value
}

func (v *NullableEnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb) Set(val *EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb(val *EnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb) *NullableEnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb {
	return &NullableEnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb{value: val, isSet: true}
}

func (v NullableEnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAuthorizeEditorDataServiceSettingsHttpServiceSettingsDTOVerb) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

