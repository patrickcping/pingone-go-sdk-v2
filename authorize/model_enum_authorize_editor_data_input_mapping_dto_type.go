/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EnumAuthorizeEditorDataInputMappingDTOType the model 'EnumAuthorizeEditorDataInputMappingDTOType'
type EnumAuthorizeEditorDataInputMappingDTOType string

// List of EnumAuthorizeEditorDataInputMappingDTOType
const (
	ENUMAUTHORIZEEDITORDATAINPUTMAPPINGDTOTYPE_ATTRIBUTE EnumAuthorizeEditorDataInputMappingDTOType = "ATTRIBUTE"
	ENUMAUTHORIZEEDITORDATAINPUTMAPPINGDTOTYPE_INPUT EnumAuthorizeEditorDataInputMappingDTOType = "INPUT"
)

// All allowed values of EnumAuthorizeEditorDataInputMappingDTOType enum
var AllowedEnumAuthorizeEditorDataInputMappingDTOTypeEnumValues = []EnumAuthorizeEditorDataInputMappingDTOType{
	"ATTRIBUTE",
	"INPUT",
}

func (v *EnumAuthorizeEditorDataInputMappingDTOType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAuthorizeEditorDataInputMappingDTOType(value)
	for _, existing := range AllowedEnumAuthorizeEditorDataInputMappingDTOTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAuthorizeEditorDataInputMappingDTOType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAuthorizeEditorDataInputMappingDTOTypeFromValue returns a pointer to a valid EnumAuthorizeEditorDataInputMappingDTOType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAuthorizeEditorDataInputMappingDTOTypeFromValue(v string) (*EnumAuthorizeEditorDataInputMappingDTOType, error) {
	ev := EnumAuthorizeEditorDataInputMappingDTOType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAuthorizeEditorDataInputMappingDTOType: valid values are %v", v, AllowedEnumAuthorizeEditorDataInputMappingDTOTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAuthorizeEditorDataInputMappingDTOType) IsValid() bool {
	for _, existing := range AllowedEnumAuthorizeEditorDataInputMappingDTOTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAuthorizeEditorDataInputMappingDTOType value
func (v EnumAuthorizeEditorDataInputMappingDTOType) Ptr() *EnumAuthorizeEditorDataInputMappingDTOType {
	return &v
}

type NullableEnumAuthorizeEditorDataInputMappingDTOType struct {
	value *EnumAuthorizeEditorDataInputMappingDTOType
	isSet bool
}

func (v NullableEnumAuthorizeEditorDataInputMappingDTOType) Get() *EnumAuthorizeEditorDataInputMappingDTOType {
	return v.value
}

func (v *NullableEnumAuthorizeEditorDataInputMappingDTOType) Set(val *EnumAuthorizeEditorDataInputMappingDTOType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAuthorizeEditorDataInputMappingDTOType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAuthorizeEditorDataInputMappingDTOType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAuthorizeEditorDataInputMappingDTOType(val *EnumAuthorizeEditorDataInputMappingDTOType) *NullableEnumAuthorizeEditorDataInputMappingDTOType {
	return &NullableEnumAuthorizeEditorDataInputMappingDTOType{value: val, isSet: true}
}

func (v NullableEnumAuthorizeEditorDataInputMappingDTOType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAuthorizeEditorDataInputMappingDTOType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

