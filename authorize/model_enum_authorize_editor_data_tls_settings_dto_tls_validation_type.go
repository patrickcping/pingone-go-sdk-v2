/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType the model 'EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType'
type EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType string

// List of EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType
const (
	ENUMAUTHORIZEEDITORDATATLSSETTINGSDTOTLSVALIDATIONTYPE_DEFAULT EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType = "DEFAULT"
	ENUMAUTHORIZEEDITORDATATLSSETTINGSDTOTLSVALIDATIONTYPE_NONE EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType = "NONE"
)

// All allowed values of EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType enum
var AllowedEnumAuthorizeEditorDataTlsSettingsDTOTlsValidationTypeEnumValues = []EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType{
	"DEFAULT",
	"NONE",
}

func (v *EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType(value)
	for _, existing := range AllowedEnumAuthorizeEditorDataTlsSettingsDTOTlsValidationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAuthorizeEditorDataTlsSettingsDTOTlsValidationTypeFromValue returns a pointer to a valid EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAuthorizeEditorDataTlsSettingsDTOTlsValidationTypeFromValue(v string) (*EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType, error) {
	ev := EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType: valid values are %v", v, AllowedEnumAuthorizeEditorDataTlsSettingsDTOTlsValidationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType) IsValid() bool {
	for _, existing := range AllowedEnumAuthorizeEditorDataTlsSettingsDTOTlsValidationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType value
func (v EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType) Ptr() *EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType {
	return &v
}

type NullableEnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType struct {
	value *EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType
	isSet bool
}

func (v NullableEnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType) Get() *EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType {
	return v.value
}

func (v *NullableEnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType) Set(val *EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType(val *EnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType) *NullableEnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType {
	return &NullableEnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType{value: val, isSet: true}
}

func (v NullableEnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAuthorizeEditorDataTlsSettingsDTOTlsValidationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

