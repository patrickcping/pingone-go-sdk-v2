/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
)

// checks if the ApplicationResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationResource{}

// ApplicationResource struct for ApplicationResource
type ApplicationResource struct {
	Links *map[string]LinksHATEOASValue `json:"_links,omitempty"`
	// The application resource's description.
	Description *string `json:"description,omitempty"`
	// The resource's unique identifier.
	Id *string `json:"id,omitempty"`
	// The application resource name. The name value must be unique.
	Name   string                     `json:"name"`
	Parent *ApplicationResourceParent `json:"parent,omitempty"`
}

// NewApplicationResource instantiates a new ApplicationResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationResource(name string) *ApplicationResource {
	this := ApplicationResource{}
	this.Name = name
	return &this
}

// NewApplicationResourceWithDefaults instantiates a new ApplicationResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationResourceWithDefaults() *ApplicationResource {
	this := ApplicationResource{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ApplicationResource) GetLinks() map[string]LinksHATEOASValue {
	if o == nil || IsNil(o.Links) {
		var ret map[string]LinksHATEOASValue
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationResource) GetLinksOk() (*map[string]LinksHATEOASValue, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ApplicationResource) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]LinksHATEOASValue and assigns it to the Links field.
func (o *ApplicationResource) SetLinks(v map[string]LinksHATEOASValue) {
	o.Links = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ApplicationResource) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationResource) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ApplicationResource) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ApplicationResource) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApplicationResource) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationResource) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApplicationResource) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApplicationResource) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *ApplicationResource) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApplicationResource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApplicationResource) SetName(v string) {
	o.Name = v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *ApplicationResource) GetParent() ApplicationResourceParent {
	if o == nil || IsNil(o.Parent) {
		var ret ApplicationResourceParent
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationResource) GetParentOk() (*ApplicationResourceParent, bool) {
	if o == nil || IsNil(o.Parent) {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *ApplicationResource) HasParent() bool {
	if o != nil && !IsNil(o.Parent) {
		return true
	}

	return false
}

// SetParent gets a reference to the given ApplicationResourceParent and assigns it to the Parent field.
func (o *ApplicationResource) SetParent(v ApplicationResourceParent) {
	o.Parent = &v
}

func (o ApplicationResource) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Parent) {
		toSerialize["parent"] = o.Parent
	}
	return toSerialize, nil
}

type NullableApplicationResource struct {
	value *ApplicationResource
	isSet bool
}

func (v NullableApplicationResource) Get() *ApplicationResource {
	return v.value
}

func (v *NullableApplicationResource) Set(val *ApplicationResource) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationResource) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationResource(val *ApplicationResource) *NullableApplicationResource {
	return &NullableApplicationResource{value: val, isSet: true}
}

func (v NullableApplicationResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
