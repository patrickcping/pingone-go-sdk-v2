/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EnumAPIServerOperationPathPatternType The type of the pattern. Options are `EXACT` (the verbatim pattern is compared against the path from the request using a case-sensitive comparison) and `PARAMETER` (the pattern is compared against the path from the request using a case-sensitive comparison, using the syntax below to encode wildcards and named parameters).
type EnumAPIServerOperationPathPatternType string

// List of EnumAPIServerOperationPathPatternType
const (
	ENUMAPISERVEROPERATIONPATHPATTERNTYPE_EXACT     EnumAPIServerOperationPathPatternType = "EXACT"
	ENUMAPISERVEROPERATIONPATHPATTERNTYPE_PARAMETER EnumAPIServerOperationPathPatternType = "PARAMETER"
)

// All allowed values of EnumAPIServerOperationPathPatternType enum
var AllowedEnumAPIServerOperationPathPatternTypeEnumValues = []EnumAPIServerOperationPathPatternType{
	"EXACT",
	"PARAMETER",
}

func (v *EnumAPIServerOperationPathPatternType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAPIServerOperationPathPatternType(value)
	for _, existing := range AllowedEnumAPIServerOperationPathPatternTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAPIServerOperationPathPatternType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAPIServerOperationPathPatternTypeFromValue returns a pointer to a valid EnumAPIServerOperationPathPatternType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAPIServerOperationPathPatternTypeFromValue(v string) (*EnumAPIServerOperationPathPatternType, error) {
	ev := EnumAPIServerOperationPathPatternType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAPIServerOperationPathPatternType: valid values are %v", v, AllowedEnumAPIServerOperationPathPatternTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAPIServerOperationPathPatternType) IsValid() bool {
	for _, existing := range AllowedEnumAPIServerOperationPathPatternTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAPIServerOperationPathPatternType value
func (v EnumAPIServerOperationPathPatternType) Ptr() *EnumAPIServerOperationPathPatternType {
	return &v
}

type NullableEnumAPIServerOperationPathPatternType struct {
	value *EnumAPIServerOperationPathPatternType
	isSet bool
}

func (v NullableEnumAPIServerOperationPathPatternType) Get() *EnumAPIServerOperationPathPatternType {
	return v.value
}

func (v *NullableEnumAPIServerOperationPathPatternType) Set(val *EnumAPIServerOperationPathPatternType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAPIServerOperationPathPatternType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAPIServerOperationPathPatternType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAPIServerOperationPathPatternType(val *EnumAPIServerOperationPathPatternType) *NullableEnumAPIServerOperationPathPatternType {
	return &NullableEnumAPIServerOperationPathPatternType{value: val, isSet: true}
}

func (v NullableEnumAPIServerOperationPathPatternType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAPIServerOperationPathPatternType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
