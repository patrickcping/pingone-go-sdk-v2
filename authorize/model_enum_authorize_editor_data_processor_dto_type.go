/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EnumAuthorizeEditorDataProcessorDTOType the model 'EnumAuthorizeEditorDataProcessorDTOType'
type EnumAuthorizeEditorDataProcessorDTOType string

// List of EnumAuthorizeEditorDataProcessorDTOType
const (
	ENUMAUTHORIZEEDITORDATAPROCESSORDTOTYPE_CHAIN EnumAuthorizeEditorDataProcessorDTOType = "CHAIN"
	ENUMAUTHORIZEEDITORDATAPROCESSORDTOTYPE_COLLECTION_FILTER EnumAuthorizeEditorDataProcessorDTOType = "COLLECTION_FILTER"
	ENUMAUTHORIZEEDITORDATAPROCESSORDTOTYPE_COLLECTION_TRANSFORM EnumAuthorizeEditorDataProcessorDTOType = "COLLECTION_TRANSFORM"
	ENUMAUTHORIZEEDITORDATAPROCESSORDTOTYPE_JSON_PATH EnumAuthorizeEditorDataProcessorDTOType = "JSON_PATH"
	ENUMAUTHORIZEEDITORDATAPROCESSORDTOTYPE_REFERENCE EnumAuthorizeEditorDataProcessorDTOType = "REFERENCE"
	ENUMAUTHORIZEEDITORDATAPROCESSORDTOTYPE_SPEL EnumAuthorizeEditorDataProcessorDTOType = "SPEL"
	ENUMAUTHORIZEEDITORDATAPROCESSORDTOTYPE_XPATH EnumAuthorizeEditorDataProcessorDTOType = "XPATH"
)

// All allowed values of EnumAuthorizeEditorDataProcessorDTOType enum
var AllowedEnumAuthorizeEditorDataProcessorDTOTypeEnumValues = []EnumAuthorizeEditorDataProcessorDTOType{
	"CHAIN",
	"COLLECTION_FILTER",
	"COLLECTION_TRANSFORM",
	"JSON_PATH",
	"REFERENCE",
	"SPEL",
	"XPATH",
}

func (v *EnumAuthorizeEditorDataProcessorDTOType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAuthorizeEditorDataProcessorDTOType(value)
	for _, existing := range AllowedEnumAuthorizeEditorDataProcessorDTOTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAuthorizeEditorDataProcessorDTOType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAuthorizeEditorDataProcessorDTOTypeFromValue returns a pointer to a valid EnumAuthorizeEditorDataProcessorDTOType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAuthorizeEditorDataProcessorDTOTypeFromValue(v string) (*EnumAuthorizeEditorDataProcessorDTOType, error) {
	ev := EnumAuthorizeEditorDataProcessorDTOType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAuthorizeEditorDataProcessorDTOType: valid values are %v", v, AllowedEnumAuthorizeEditorDataProcessorDTOTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAuthorizeEditorDataProcessorDTOType) IsValid() bool {
	for _, existing := range AllowedEnumAuthorizeEditorDataProcessorDTOTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAuthorizeEditorDataProcessorDTOType value
func (v EnumAuthorizeEditorDataProcessorDTOType) Ptr() *EnumAuthorizeEditorDataProcessorDTOType {
	return &v
}

type NullableEnumAuthorizeEditorDataProcessorDTOType struct {
	value *EnumAuthorizeEditorDataProcessorDTOType
	isSet bool
}

func (v NullableEnumAuthorizeEditorDataProcessorDTOType) Get() *EnumAuthorizeEditorDataProcessorDTOType {
	return v.value
}

func (v *NullableEnumAuthorizeEditorDataProcessorDTOType) Set(val *EnumAuthorizeEditorDataProcessorDTOType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAuthorizeEditorDataProcessorDTOType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAuthorizeEditorDataProcessorDTOType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAuthorizeEditorDataProcessorDTOType(val *EnumAuthorizeEditorDataProcessorDTOType) *NullableEnumAuthorizeEditorDataProcessorDTOType {
	return &NullableEnumAuthorizeEditorDataProcessorDTOType{value: val, isSet: true}
}

func (v NullableEnumAuthorizeEditorDataProcessorDTOType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAuthorizeEditorDataProcessorDTOType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

