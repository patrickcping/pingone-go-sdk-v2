/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
)

// checks if the AuthorizeEditorDataPoliciesPolicyChildRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizeEditorDataPoliciesPolicyChildRule{}

// AuthorizeEditorDataPoliciesPolicyChildRule struct for AuthorizeEditorDataPoliciesPolicyChildRule
type AuthorizeEditorDataPoliciesPolicyChildRule struct {
	Type EnumAuthorizeEditorDataPoliciesPolicyChildCommonType `json:"type"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	Statements []map[string]interface{} `json:"statements,omitempty"`
	Condition *AuthorizeEditorDataConditionDTO `json:"condition,omitempty"`
	Value *AuthorizeEditorDataReferenceObjectDTO `json:"value,omitempty"`
	EffectSettings *AuthorizeEditorDataRulesEffectSettingsDTO `json:"effectSettings,omitempty"`
}

// NewAuthorizeEditorDataPoliciesPolicyChildRule instantiates a new AuthorizeEditorDataPoliciesPolicyChildRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizeEditorDataPoliciesPolicyChildRule(type_ EnumAuthorizeEditorDataPoliciesPolicyChildCommonType) *AuthorizeEditorDataPoliciesPolicyChildRule {
	this := AuthorizeEditorDataPoliciesPolicyChildRule{}
	this.Type = type_
	return &this
}

// NewAuthorizeEditorDataPoliciesPolicyChildRuleWithDefaults instantiates a new AuthorizeEditorDataPoliciesPolicyChildRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizeEditorDataPoliciesPolicyChildRuleWithDefaults() *AuthorizeEditorDataPoliciesPolicyChildRule {
	this := AuthorizeEditorDataPoliciesPolicyChildRule{}
	return &this
}

// GetType returns the Type field value
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) GetType() EnumAuthorizeEditorDataPoliciesPolicyChildCommonType {
	if o == nil {
		var ret EnumAuthorizeEditorDataPoliciesPolicyChildCommonType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) GetTypeOk() (*EnumAuthorizeEditorDataPoliciesPolicyChildCommonType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) SetType(v EnumAuthorizeEditorDataPoliciesPolicyChildCommonType) {
	o.Type = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) SetDescription(v string) {
	o.Description = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetStatements returns the Statements field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) GetStatements() []map[string]interface{} {
	if o == nil || IsNil(o.Statements) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Statements
}

// GetStatementsOk returns a tuple with the Statements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) GetStatementsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Statements) {
		return nil, false
	}
	return o.Statements, true
}

// HasStatements returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) HasStatements() bool {
	if o != nil && !IsNil(o.Statements) {
		return true
	}

	return false
}

// SetStatements gets a reference to the given []map[string]interface{} and assigns it to the Statements field.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) SetStatements(v []map[string]interface{}) {
	o.Statements = v
}

// GetCondition returns the Condition field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) GetCondition() AuthorizeEditorDataConditionDTO {
	if o == nil || IsNil(o.Condition) {
		var ret AuthorizeEditorDataConditionDTO
		return ret
	}
	return *o.Condition
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) GetConditionOk() (*AuthorizeEditorDataConditionDTO, bool) {
	if o == nil || IsNil(o.Condition) {
		return nil, false
	}
	return o.Condition, true
}

// HasCondition returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) HasCondition() bool {
	if o != nil && !IsNil(o.Condition) {
		return true
	}

	return false
}

// SetCondition gets a reference to the given AuthorizeEditorDataConditionDTO and assigns it to the Condition field.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) SetCondition(v AuthorizeEditorDataConditionDTO) {
	o.Condition = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) GetValue() AuthorizeEditorDataReferenceObjectDTO {
	if o == nil || IsNil(o.Value) {
		var ret AuthorizeEditorDataReferenceObjectDTO
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) GetValueOk() (*AuthorizeEditorDataReferenceObjectDTO, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given AuthorizeEditorDataReferenceObjectDTO and assigns it to the Value field.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) SetValue(v AuthorizeEditorDataReferenceObjectDTO) {
	o.Value = &v
}

// GetEffectSettings returns the EffectSettings field value if set, zero value otherwise.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) GetEffectSettings() AuthorizeEditorDataRulesEffectSettingsDTO {
	if o == nil || IsNil(o.EffectSettings) {
		var ret AuthorizeEditorDataRulesEffectSettingsDTO
		return ret
	}
	return *o.EffectSettings
}

// GetEffectSettingsOk returns a tuple with the EffectSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) GetEffectSettingsOk() (*AuthorizeEditorDataRulesEffectSettingsDTO, bool) {
	if o == nil || IsNil(o.EffectSettings) {
		return nil, false
	}
	return o.EffectSettings, true
}

// HasEffectSettings returns a boolean if a field has been set.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) HasEffectSettings() bool {
	if o != nil && !IsNil(o.EffectSettings) {
		return true
	}

	return false
}

// SetEffectSettings gets a reference to the given AuthorizeEditorDataRulesEffectSettingsDTO and assigns it to the EffectSettings field.
func (o *AuthorizeEditorDataPoliciesPolicyChildRule) SetEffectSettings(v AuthorizeEditorDataRulesEffectSettingsDTO) {
	o.EffectSettings = &v
}

func (o AuthorizeEditorDataPoliciesPolicyChildRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizeEditorDataPoliciesPolicyChildRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Statements) {
		toSerialize["statements"] = o.Statements
	}
	if !IsNil(o.Condition) {
		toSerialize["condition"] = o.Condition
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.EffectSettings) {
		toSerialize["effectSettings"] = o.EffectSettings
	}
	return toSerialize, nil
}

type NullableAuthorizeEditorDataPoliciesPolicyChildRule struct {
	value *AuthorizeEditorDataPoliciesPolicyChildRule
	isSet bool
}

func (v NullableAuthorizeEditorDataPoliciesPolicyChildRule) Get() *AuthorizeEditorDataPoliciesPolicyChildRule {
	return v.value
}

func (v *NullableAuthorizeEditorDataPoliciesPolicyChildRule) Set(val *AuthorizeEditorDataPoliciesPolicyChildRule) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeEditorDataPoliciesPolicyChildRule) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeEditorDataPoliciesPolicyChildRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeEditorDataPoliciesPolicyChildRule(val *AuthorizeEditorDataPoliciesPolicyChildRule) *NullableAuthorizeEditorDataPoliciesPolicyChildRule {
	return &NullableAuthorizeEditorDataPoliciesPolicyChildRule{value: val, isSet: true}
}

func (v NullableAuthorizeEditorDataPoliciesPolicyChildRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeEditorDataPoliciesPolicyChildRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


