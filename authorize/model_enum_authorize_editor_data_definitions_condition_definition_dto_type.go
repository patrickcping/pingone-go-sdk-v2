/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType the model 'EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType'
type EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType string

// List of EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType
const (
	ENUMAUTHORIZEEDITORDATADEFINITIONSCONDITIONDEFINITIONDTOTYPE_CONDITION EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType = "CONDITION"
)

// All allowed values of EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType enum
var AllowedEnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOTypeEnumValues = []EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType{
	"CONDITION",
}

func (v *EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType(value)
	for _, existing := range AllowedEnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOTypeFromValue returns a pointer to a valid EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOTypeFromValue(v string) (*EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType, error) {
	ev := EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType: valid values are %v", v, AllowedEnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType) IsValid() bool {
	for _, existing := range AllowedEnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType value
func (v EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType) Ptr() *EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType {
	return &v
}

type NullableEnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType struct {
	value *EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType
	isSet bool
}

func (v NullableEnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType) Get() *EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType {
	return v.value
}

func (v *NullableEnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType) Set(val *EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType(val *EnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType) *NullableEnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType {
	return &NullableEnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType{value: val, isSet: true}
}

func (v NullableEnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAuthorizeEditorDataDefinitionsConditionDefinitionDTOType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

