/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// AuthorizeEditorDataAuthenticationDTO - struct for AuthorizeEditorDataAuthenticationDTO
type AuthorizeEditorDataAuthenticationDTO struct {
	AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO *AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO
	AuthorizeEditorDataAuthenticationsClientCredentialsAuthenticationDTO *AuthorizeEditorDataAuthenticationsClientCredentialsAuthenticationDTO
	AuthorizeEditorDataAuthenticationsNoneAuthenticationDTO *AuthorizeEditorDataAuthenticationsNoneAuthenticationDTO
	AuthorizeEditorDataAuthenticationsTokenAuthenticationDTO *AuthorizeEditorDataAuthenticationsTokenAuthenticationDTO
}

// AuthorizeEditorDataAuthenticationsBasicAuthenticationDTOAsAuthorizeEditorDataAuthenticationDTO is a convenience function that returns AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO wrapped in AuthorizeEditorDataAuthenticationDTO
func AuthorizeEditorDataAuthenticationsBasicAuthenticationDTOAsAuthorizeEditorDataAuthenticationDTO(v *AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO) AuthorizeEditorDataAuthenticationDTO {
	return AuthorizeEditorDataAuthenticationDTO{
		AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO: v,
	}
}

// AuthorizeEditorDataAuthenticationsClientCredentialsAuthenticationDTOAsAuthorizeEditorDataAuthenticationDTO is a convenience function that returns AuthorizeEditorDataAuthenticationsClientCredentialsAuthenticationDTO wrapped in AuthorizeEditorDataAuthenticationDTO
func AuthorizeEditorDataAuthenticationsClientCredentialsAuthenticationDTOAsAuthorizeEditorDataAuthenticationDTO(v *AuthorizeEditorDataAuthenticationsClientCredentialsAuthenticationDTO) AuthorizeEditorDataAuthenticationDTO {
	return AuthorizeEditorDataAuthenticationDTO{
		AuthorizeEditorDataAuthenticationsClientCredentialsAuthenticationDTO: v,
	}
}

// AuthorizeEditorDataAuthenticationsNoneAuthenticationDTOAsAuthorizeEditorDataAuthenticationDTO is a convenience function that returns AuthorizeEditorDataAuthenticationsNoneAuthenticationDTO wrapped in AuthorizeEditorDataAuthenticationDTO
func AuthorizeEditorDataAuthenticationsNoneAuthenticationDTOAsAuthorizeEditorDataAuthenticationDTO(v *AuthorizeEditorDataAuthenticationsNoneAuthenticationDTO) AuthorizeEditorDataAuthenticationDTO {
	return AuthorizeEditorDataAuthenticationDTO{
		AuthorizeEditorDataAuthenticationsNoneAuthenticationDTO: v,
	}
}

// AuthorizeEditorDataAuthenticationsTokenAuthenticationDTOAsAuthorizeEditorDataAuthenticationDTO is a convenience function that returns AuthorizeEditorDataAuthenticationsTokenAuthenticationDTO wrapped in AuthorizeEditorDataAuthenticationDTO
func AuthorizeEditorDataAuthenticationsTokenAuthenticationDTOAsAuthorizeEditorDataAuthenticationDTO(v *AuthorizeEditorDataAuthenticationsTokenAuthenticationDTO) AuthorizeEditorDataAuthenticationDTO {
	return AuthorizeEditorDataAuthenticationDTO{
		AuthorizeEditorDataAuthenticationsTokenAuthenticationDTO: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AuthorizeEditorDataAuthenticationDTO) UnmarshalJSON(data []byte) error {

	var common AuthorizeEditorDataAuthenticationDTOCommon

	if err := json.Unmarshal(data, &common); err != nil { // simple model
		return err
	}

	dst.AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO = nil
	dst.AuthorizeEditorDataAuthenticationsClientCredentialsAuthenticationDTO = nil
	dst.AuthorizeEditorDataAuthenticationsNoneAuthenticationDTO = nil
	dst.AuthorizeEditorDataAuthenticationsTokenAuthenticationDTO = nil

	switch common.GetType() {
	case ENUMAUTHORIZEEDITORDATAAUTHENTICATIONDTOTYPE_BASIC:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO); err != nil { // simple model
			return err
		}
	case ENUMAUTHORIZEEDITORDATAAUTHENTICATIONDTOTYPE_CLIENT_CREDENTIALS:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataAuthenticationsClientCredentialsAuthenticationDTO); err != nil { // simple model
			return err
		}
	case ENUMAUTHORIZEEDITORDATAAUTHENTICATIONDTOTYPE_NONE:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataAuthenticationsNoneAuthenticationDTO); err != nil { // simple model
			return err
		}
	case ENUMAUTHORIZEEDITORDATAAUTHENTICATIONDTOTYPE_TOKEN:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataAuthenticationsTokenAuthenticationDTO); err != nil { // simple model
			return err
		}
	default:
		return fmt.Errorf("Data failed to match schemas in oneOf(AuthorizeEditorDataAuthenticationDTO)")
	}
	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AuthorizeEditorDataAuthenticationDTO) MarshalJSON() ([]byte, error) {
	if src.AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO)
	}

	if src.AuthorizeEditorDataAuthenticationsClientCredentialsAuthenticationDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataAuthenticationsClientCredentialsAuthenticationDTO)
	}

	if src.AuthorizeEditorDataAuthenticationsNoneAuthenticationDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataAuthenticationsNoneAuthenticationDTO)
	}

	if src.AuthorizeEditorDataAuthenticationsTokenAuthenticationDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataAuthenticationsTokenAuthenticationDTO)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AuthorizeEditorDataAuthenticationDTO) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO != nil {
		return obj.AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO
	}

	if obj.AuthorizeEditorDataAuthenticationsClientCredentialsAuthenticationDTO != nil {
		return obj.AuthorizeEditorDataAuthenticationsClientCredentialsAuthenticationDTO
	}

	if obj.AuthorizeEditorDataAuthenticationsNoneAuthenticationDTO != nil {
		return obj.AuthorizeEditorDataAuthenticationsNoneAuthenticationDTO
	}

	if obj.AuthorizeEditorDataAuthenticationsTokenAuthenticationDTO != nil {
		return obj.AuthorizeEditorDataAuthenticationsTokenAuthenticationDTO
	}

	// all schemas are nil
	return nil
}

type NullableAuthorizeEditorDataAuthenticationDTO struct {
	value *AuthorizeEditorDataAuthenticationDTO
	isSet bool
}

func (v NullableAuthorizeEditorDataAuthenticationDTO) Get() *AuthorizeEditorDataAuthenticationDTO {
	return v.value
}

func (v *NullableAuthorizeEditorDataAuthenticationDTO) Set(val *AuthorizeEditorDataAuthenticationDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeEditorDataAuthenticationDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeEditorDataAuthenticationDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeEditorDataAuthenticationDTO(val *AuthorizeEditorDataAuthenticationDTO) *NullableAuthorizeEditorDataAuthenticationDTO {
	return &NullableAuthorizeEditorDataAuthenticationDTO{value: val, isSet: true}
}

func (v NullableAuthorizeEditorDataAuthenticationDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeEditorDataAuthenticationDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


