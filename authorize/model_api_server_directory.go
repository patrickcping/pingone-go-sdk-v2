/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
)

// checks if the APIServerDirectory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &APIServerDirectory{}

// APIServerDirectory A container object for fields related to the user directory used to issue access tokens for accessing the APIs. If not provided, the `directory.type` will default to `PINGONE_SSO`.
type APIServerDirectory struct {
	Type EnumAPIServerAuthorizationServerType `json:"type"`
}

// NewAPIServerDirectory instantiates a new APIServerDirectory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAPIServerDirectory(type_ EnumAPIServerAuthorizationServerType) *APIServerDirectory {
	this := APIServerDirectory{}
	this.Type = type_
	return &this
}

// NewAPIServerDirectoryWithDefaults instantiates a new APIServerDirectory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAPIServerDirectoryWithDefaults() *APIServerDirectory {
	this := APIServerDirectory{}
	return &this
}

// GetType returns the Type field value
func (o *APIServerDirectory) GetType() EnumAPIServerAuthorizationServerType {
	if o == nil {
		var ret EnumAPIServerAuthorizationServerType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *APIServerDirectory) GetTypeOk() (*EnumAPIServerAuthorizationServerType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *APIServerDirectory) SetType(v EnumAPIServerAuthorizationServerType) {
	o.Type = v
}

func (o APIServerDirectory) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o APIServerDirectory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableAPIServerDirectory struct {
	value *APIServerDirectory
	isSet bool
}

func (v NullableAPIServerDirectory) Get() *APIServerDirectory {
	return v.value
}

func (v *NullableAPIServerDirectory) Set(val *APIServerDirectory) {
	v.value = val
	v.isSet = true
}

func (v NullableAPIServerDirectory) IsSet() bool {
	return v.isSet
}

func (v *NullableAPIServerDirectory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAPIServerDirectory(val *APIServerDirectory) *NullableAPIServerDirectory {
	return &NullableAPIServerDirectory{value: val, isSet: true}
}

func (v NullableAPIServerDirectory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAPIServerDirectory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
