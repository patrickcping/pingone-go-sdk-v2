/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EnumAPIServerOperationMethod The name of the HTTP method. This value is case-sensitive.
type EnumAPIServerOperationMethod string

// List of EnumAPIServerOperationMethod
const (
	ENUMAPISERVEROPERATIONMETHOD_GET     EnumAPIServerOperationMethod = "GET"
	ENUMAPISERVEROPERATIONMETHOD_POST    EnumAPIServerOperationMethod = "POST"
	ENUMAPISERVEROPERATIONMETHOD_PUT     EnumAPIServerOperationMethod = "PUT"
	ENUMAPISERVEROPERATIONMETHOD_PATCH   EnumAPIServerOperationMethod = "PATCH"
	ENUMAPISERVEROPERATIONMETHOD_DELETE  EnumAPIServerOperationMethod = "DELETE"
	ENUMAPISERVEROPERATIONMETHOD_OPTIONS EnumAPIServerOperationMethod = "OPTIONS"
)

// All allowed values of EnumAPIServerOperationMethod enum
var AllowedEnumAPIServerOperationMethodEnumValues = []EnumAPIServerOperationMethod{
	"GET",
	"POST",
	"PUT",
	"PATCH",
	"DELETE",
	"OPTIONS",
}

func (v *EnumAPIServerOperationMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAPIServerOperationMethod(value)
	for _, existing := range AllowedEnumAPIServerOperationMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAPIServerOperationMethod(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAPIServerOperationMethodFromValue returns a pointer to a valid EnumAPIServerOperationMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAPIServerOperationMethodFromValue(v string) (*EnumAPIServerOperationMethod, error) {
	ev := EnumAPIServerOperationMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAPIServerOperationMethod: valid values are %v", v, AllowedEnumAPIServerOperationMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAPIServerOperationMethod) IsValid() bool {
	for _, existing := range AllowedEnumAPIServerOperationMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAPIServerOperationMethod value
func (v EnumAPIServerOperationMethod) Ptr() *EnumAPIServerOperationMethod {
	return &v
}

type NullableEnumAPIServerOperationMethod struct {
	value *EnumAPIServerOperationMethod
	isSet bool
}

func (v NullableEnumAPIServerOperationMethod) Get() *EnumAPIServerOperationMethod {
	return v.value
}

func (v *NullableEnumAPIServerOperationMethod) Set(val *EnumAPIServerOperationMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAPIServerOperationMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAPIServerOperationMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAPIServerOperationMethod(val *EnumAPIServerOperationMethod) *NullableEnumAPIServerOperationMethod {
	return &NullableEnumAPIServerOperationMethod{value: val, isSet: true}
}

func (v NullableEnumAPIServerOperationMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAPIServerOperationMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
