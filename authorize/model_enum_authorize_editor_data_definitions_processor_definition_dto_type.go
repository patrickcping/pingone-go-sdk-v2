/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType the model 'EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType'
type EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType string

// List of EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType
const (
	ENUMAUTHORIZEEDITORDATADEFINITIONSPROCESSORDEFINITIONDTOTYPE_PROCESSOR EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType = "PROCESSOR"
)

// All allowed values of EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType enum
var AllowedEnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOTypeEnumValues = []EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType{
	"PROCESSOR",
}

func (v *EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType(value)
	for _, existing := range AllowedEnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOTypeFromValue returns a pointer to a valid EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOTypeFromValue(v string) (*EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType, error) {
	ev := EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType: valid values are %v", v, AllowedEnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType) IsValid() bool {
	for _, existing := range AllowedEnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType value
func (v EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType) Ptr() *EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType {
	return &v
}

type NullableEnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType struct {
	value *EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType
	isSet bool
}

func (v NullableEnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType) Get() *EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType {
	return v.value
}

func (v *NullableEnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType) Set(val *EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType(val *EnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType) *NullableEnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType {
	return &NullableEnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType{value: val, isSet: true}
}

func (v NullableEnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAuthorizeEditorDataDefinitionsProcessorDefinitionDTOType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

