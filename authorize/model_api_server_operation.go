/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
)

// checks if the APIServerOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &APIServerOperation{}

// APIServerOperation struct for APIServerOperation
type APIServerOperation struct {
	Links *map[string]LinksHATEOASValue `json:"_links,omitempty"`
	// The ID of the API service operation. This is randomly generated when the operation is created.
	Id *string `json:"id,omitempty"`
	// The name of the API service operation.
	Name          string                           `json:"name"`
	AccessControl *APIServerOperationAccessControl `json:"accessControl,omitempty"`
	// The methods that define the operation. No duplicates are allowed. Each element must be a valid HTTP token, according to [RFC 7230](https://datatracker.ietf.org/doc/html/rfc7230), and cannot exceed 64 characters. An empty array is not valid. To indicate that an operation is defined for every method, the `methods` array should be set to null. The `methods` array is limited to 10 entries.
	Methods []EnumAPIServerOperationMethod `json:"methods,omitempty"`
	// The paths that define the operation. The same literal pattern is not allowed within the same operation (the pattern of a `paths` element must be unique as compared to all other patterns in the same `paths` array). However, the same literal pattern is allowed in different operations (for example, OperationA, `/path1`, OperationB, `/path1` is valid). The `paths` array is limited to 10 entries.
	Paths  []APIServerOperationPathsInner `json:"paths"`
	Policy *APIServerPolicy               `json:"policy,omitempty"`
}

// NewAPIServerOperation instantiates a new APIServerOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAPIServerOperation(name string, paths []APIServerOperationPathsInner) *APIServerOperation {
	this := APIServerOperation{}
	this.Name = name
	this.Paths = paths
	return &this
}

// NewAPIServerOperationWithDefaults instantiates a new APIServerOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAPIServerOperationWithDefaults() *APIServerOperation {
	this := APIServerOperation{}
	return &this
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *APIServerOperation) GetLinks() map[string]LinksHATEOASValue {
	if o == nil || IsNil(o.Links) {
		var ret map[string]LinksHATEOASValue
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIServerOperation) GetLinksOk() (*map[string]LinksHATEOASValue, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *APIServerOperation) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given map[string]LinksHATEOASValue and assigns it to the Links field.
func (o *APIServerOperation) SetLinks(v map[string]LinksHATEOASValue) {
	o.Links = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *APIServerOperation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIServerOperation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *APIServerOperation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *APIServerOperation) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *APIServerOperation) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *APIServerOperation) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *APIServerOperation) SetName(v string) {
	o.Name = v
}

// GetAccessControl returns the AccessControl field value if set, zero value otherwise.
func (o *APIServerOperation) GetAccessControl() APIServerOperationAccessControl {
	if o == nil || IsNil(o.AccessControl) {
		var ret APIServerOperationAccessControl
		return ret
	}
	return *o.AccessControl
}

// GetAccessControlOk returns a tuple with the AccessControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIServerOperation) GetAccessControlOk() (*APIServerOperationAccessControl, bool) {
	if o == nil || IsNil(o.AccessControl) {
		return nil, false
	}
	return o.AccessControl, true
}

// HasAccessControl returns a boolean if a field has been set.
func (o *APIServerOperation) HasAccessControl() bool {
	if o != nil && !IsNil(o.AccessControl) {
		return true
	}

	return false
}

// SetAccessControl gets a reference to the given APIServerOperationAccessControl and assigns it to the AccessControl field.
func (o *APIServerOperation) SetAccessControl(v APIServerOperationAccessControl) {
	o.AccessControl = &v
}

// GetMethods returns the Methods field value if set, zero value otherwise.
func (o *APIServerOperation) GetMethods() []EnumAPIServerOperationMethod {
	if o == nil || IsNil(o.Methods) {
		var ret []EnumAPIServerOperationMethod
		return ret
	}
	return o.Methods
}

// GetMethodsOk returns a tuple with the Methods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIServerOperation) GetMethodsOk() ([]EnumAPIServerOperationMethod, bool) {
	if o == nil || IsNil(o.Methods) {
		return nil, false
	}
	return o.Methods, true
}

// HasMethods returns a boolean if a field has been set.
func (o *APIServerOperation) HasMethods() bool {
	if o != nil && !IsNil(o.Methods) {
		return true
	}

	return false
}

// SetMethods gets a reference to the given []EnumAPIServerOperationMethod and assigns it to the Methods field.
func (o *APIServerOperation) SetMethods(v []EnumAPIServerOperationMethod) {
	o.Methods = v
}

// GetPaths returns the Paths field value
func (o *APIServerOperation) GetPaths() []APIServerOperationPathsInner {
	if o == nil {
		var ret []APIServerOperationPathsInner
		return ret
	}

	return o.Paths
}

// GetPathsOk returns a tuple with the Paths field value
// and a boolean to check if the value has been set.
func (o *APIServerOperation) GetPathsOk() ([]APIServerOperationPathsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Paths, true
}

// SetPaths sets field value
func (o *APIServerOperation) SetPaths(v []APIServerOperationPathsInner) {
	o.Paths = v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *APIServerOperation) GetPolicy() APIServerPolicy {
	if o == nil || IsNil(o.Policy) {
		var ret APIServerPolicy
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *APIServerOperation) GetPolicyOk() (*APIServerPolicy, bool) {
	if o == nil || IsNil(o.Policy) {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *APIServerOperation) HasPolicy() bool {
	if o != nil && !IsNil(o.Policy) {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given APIServerPolicy and assigns it to the Policy field.
func (o *APIServerOperation) SetPolicy(v APIServerPolicy) {
	o.Policy = &v
}

func (o APIServerOperation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o APIServerOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.AccessControl) {
		toSerialize["accessControl"] = o.AccessControl
	}
	if !IsNil(o.Methods) {
		toSerialize["methods"] = o.Methods
	}
	toSerialize["paths"] = o.Paths
	if !IsNil(o.Policy) {
		toSerialize["policy"] = o.Policy
	}
	return toSerialize, nil
}

type NullableAPIServerOperation struct {
	value *APIServerOperation
	isSet bool
}

func (v NullableAPIServerOperation) Get() *APIServerOperation {
	return v.value
}

func (v *NullableAPIServerOperation) Set(val *APIServerOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableAPIServerOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableAPIServerOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAPIServerOperation(val *APIServerOperation) *NullableAPIServerOperation {
	return &NullableAPIServerOperation{value: val, isSet: true}
}

func (v NullableAPIServerOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAPIServerOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
