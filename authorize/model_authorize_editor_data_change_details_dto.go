/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
)

// checks if the AuthorizeEditorDataChangeDetailsDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizeEditorDataChangeDetailsDTO{}

// AuthorizeEditorDataChangeDetailsDTO struct for AuthorizeEditorDataChangeDetailsDTO
type AuthorizeEditorDataChangeDetailsDTO struct {
	ChangedResource *TypedRelationship `json:"changedResource,omitempty"`
	ChangeType *EnumAuthorizeEditorDataChangeDetailsDTOChangeType `json:"changeType,omitempty"`
	ChangedEntityName *string `json:"changedEntityName,omitempty"`
	ChangedEntityType *string `json:"changedEntityType,omitempty"`
	User *AuthorizeEditorDataUserDTO `json:"user,omitempty"`
}

// NewAuthorizeEditorDataChangeDetailsDTO instantiates a new AuthorizeEditorDataChangeDetailsDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizeEditorDataChangeDetailsDTO() *AuthorizeEditorDataChangeDetailsDTO {
	this := AuthorizeEditorDataChangeDetailsDTO{}
	return &this
}

// NewAuthorizeEditorDataChangeDetailsDTOWithDefaults instantiates a new AuthorizeEditorDataChangeDetailsDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizeEditorDataChangeDetailsDTOWithDefaults() *AuthorizeEditorDataChangeDetailsDTO {
	this := AuthorizeEditorDataChangeDetailsDTO{}
	return &this
}

// GetChangedResource returns the ChangedResource field value if set, zero value otherwise.
func (o *AuthorizeEditorDataChangeDetailsDTO) GetChangedResource() TypedRelationship {
	if o == nil || IsNil(o.ChangedResource) {
		var ret TypedRelationship
		return ret
	}
	return *o.ChangedResource
}

// GetChangedResourceOk returns a tuple with the ChangedResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataChangeDetailsDTO) GetChangedResourceOk() (*TypedRelationship, bool) {
	if o == nil || IsNil(o.ChangedResource) {
		return nil, false
	}
	return o.ChangedResource, true
}

// HasChangedResource returns a boolean if a field has been set.
func (o *AuthorizeEditorDataChangeDetailsDTO) HasChangedResource() bool {
	if o != nil && !IsNil(o.ChangedResource) {
		return true
	}

	return false
}

// SetChangedResource gets a reference to the given TypedRelationship and assigns it to the ChangedResource field.
func (o *AuthorizeEditorDataChangeDetailsDTO) SetChangedResource(v TypedRelationship) {
	o.ChangedResource = &v
}

// GetChangeType returns the ChangeType field value if set, zero value otherwise.
func (o *AuthorizeEditorDataChangeDetailsDTO) GetChangeType() EnumAuthorizeEditorDataChangeDetailsDTOChangeType {
	if o == nil || IsNil(o.ChangeType) {
		var ret EnumAuthorizeEditorDataChangeDetailsDTOChangeType
		return ret
	}
	return *o.ChangeType
}

// GetChangeTypeOk returns a tuple with the ChangeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataChangeDetailsDTO) GetChangeTypeOk() (*EnumAuthorizeEditorDataChangeDetailsDTOChangeType, bool) {
	if o == nil || IsNil(o.ChangeType) {
		return nil, false
	}
	return o.ChangeType, true
}

// HasChangeType returns a boolean if a field has been set.
func (o *AuthorizeEditorDataChangeDetailsDTO) HasChangeType() bool {
	if o != nil && !IsNil(o.ChangeType) {
		return true
	}

	return false
}

// SetChangeType gets a reference to the given EnumAuthorizeEditorDataChangeDetailsDTOChangeType and assigns it to the ChangeType field.
func (o *AuthorizeEditorDataChangeDetailsDTO) SetChangeType(v EnumAuthorizeEditorDataChangeDetailsDTOChangeType) {
	o.ChangeType = &v
}

// GetChangedEntityName returns the ChangedEntityName field value if set, zero value otherwise.
func (o *AuthorizeEditorDataChangeDetailsDTO) GetChangedEntityName() string {
	if o == nil || IsNil(o.ChangedEntityName) {
		var ret string
		return ret
	}
	return *o.ChangedEntityName
}

// GetChangedEntityNameOk returns a tuple with the ChangedEntityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataChangeDetailsDTO) GetChangedEntityNameOk() (*string, bool) {
	if o == nil || IsNil(o.ChangedEntityName) {
		return nil, false
	}
	return o.ChangedEntityName, true
}

// HasChangedEntityName returns a boolean if a field has been set.
func (o *AuthorizeEditorDataChangeDetailsDTO) HasChangedEntityName() bool {
	if o != nil && !IsNil(o.ChangedEntityName) {
		return true
	}

	return false
}

// SetChangedEntityName gets a reference to the given string and assigns it to the ChangedEntityName field.
func (o *AuthorizeEditorDataChangeDetailsDTO) SetChangedEntityName(v string) {
	o.ChangedEntityName = &v
}

// GetChangedEntityType returns the ChangedEntityType field value if set, zero value otherwise.
func (o *AuthorizeEditorDataChangeDetailsDTO) GetChangedEntityType() string {
	if o == nil || IsNil(o.ChangedEntityType) {
		var ret string
		return ret
	}
	return *o.ChangedEntityType
}

// GetChangedEntityTypeOk returns a tuple with the ChangedEntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataChangeDetailsDTO) GetChangedEntityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ChangedEntityType) {
		return nil, false
	}
	return o.ChangedEntityType, true
}

// HasChangedEntityType returns a boolean if a field has been set.
func (o *AuthorizeEditorDataChangeDetailsDTO) HasChangedEntityType() bool {
	if o != nil && !IsNil(o.ChangedEntityType) {
		return true
	}

	return false
}

// SetChangedEntityType gets a reference to the given string and assigns it to the ChangedEntityType field.
func (o *AuthorizeEditorDataChangeDetailsDTO) SetChangedEntityType(v string) {
	o.ChangedEntityType = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *AuthorizeEditorDataChangeDetailsDTO) GetUser() AuthorizeEditorDataUserDTO {
	if o == nil || IsNil(o.User) {
		var ret AuthorizeEditorDataUserDTO
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataChangeDetailsDTO) GetUserOk() (*AuthorizeEditorDataUserDTO, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *AuthorizeEditorDataChangeDetailsDTO) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given AuthorizeEditorDataUserDTO and assigns it to the User field.
func (o *AuthorizeEditorDataChangeDetailsDTO) SetUser(v AuthorizeEditorDataUserDTO) {
	o.User = &v
}

func (o AuthorizeEditorDataChangeDetailsDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizeEditorDataChangeDetailsDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChangedResource) {
		toSerialize["changedResource"] = o.ChangedResource
	}
	if !IsNil(o.ChangeType) {
		toSerialize["changeType"] = o.ChangeType
	}
	if !IsNil(o.ChangedEntityName) {
		toSerialize["changedEntityName"] = o.ChangedEntityName
	}
	if !IsNil(o.ChangedEntityType) {
		toSerialize["changedEntityType"] = o.ChangedEntityType
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableAuthorizeEditorDataChangeDetailsDTO struct {
	value *AuthorizeEditorDataChangeDetailsDTO
	isSet bool
}

func (v NullableAuthorizeEditorDataChangeDetailsDTO) Get() *AuthorizeEditorDataChangeDetailsDTO {
	return v.value
}

func (v *NullableAuthorizeEditorDataChangeDetailsDTO) Set(val *AuthorizeEditorDataChangeDetailsDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeEditorDataChangeDetailsDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeEditorDataChangeDetailsDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeEditorDataChangeDetailsDTO(val *AuthorizeEditorDataChangeDetailsDTO) *NullableAuthorizeEditorDataChangeDetailsDTO {
	return &NullableAuthorizeEditorDataChangeDetailsDTO{value: val, isSet: true}
}

func (v NullableAuthorizeEditorDataChangeDetailsDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeEditorDataChangeDetailsDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


