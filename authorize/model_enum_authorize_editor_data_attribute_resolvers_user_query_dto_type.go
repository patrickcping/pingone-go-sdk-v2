/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType the model 'EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType'
type EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType string

// List of EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType
const (
	ENUMAUTHORIZEEDITORDATAATTRIBUTERESOLVERSUSERQUERYDTOTYPE_USER_ID EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType = "USER_ID"
)

// All allowed values of EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType enum
var AllowedEnumAuthorizeEditorDataAttributeResolversUserQueryDTOTypeEnumValues = []EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType{
	"USER_ID",
}

func (v *EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType(value)
	for _, existing := range AllowedEnumAuthorizeEditorDataAttributeResolversUserQueryDTOTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumAuthorizeEditorDataAttributeResolversUserQueryDTOTypeFromValue returns a pointer to a valid EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumAuthorizeEditorDataAttributeResolversUserQueryDTOTypeFromValue(v string) (*EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType, error) {
	ev := EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType: valid values are %v", v, AllowedEnumAuthorizeEditorDataAttributeResolversUserQueryDTOTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType) IsValid() bool {
	for _, existing := range AllowedEnumAuthorizeEditorDataAttributeResolversUserQueryDTOTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType value
func (v EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType) Ptr() *EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType {
	return &v
}

type NullableEnumAuthorizeEditorDataAttributeResolversUserQueryDTOType struct {
	value *EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType
	isSet bool
}

func (v NullableEnumAuthorizeEditorDataAttributeResolversUserQueryDTOType) Get() *EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType {
	return v.value
}

func (v *NullableEnumAuthorizeEditorDataAttributeResolversUserQueryDTOType) Set(val *EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumAuthorizeEditorDataAttributeResolversUserQueryDTOType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumAuthorizeEditorDataAttributeResolversUserQueryDTOType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumAuthorizeEditorDataAttributeResolversUserQueryDTOType(val *EnumAuthorizeEditorDataAttributeResolversUserQueryDTOType) *NullableEnumAuthorizeEditorDataAttributeResolversUserQueryDTOType {
	return &NullableEnumAuthorizeEditorDataAttributeResolversUserQueryDTOType{value: val, isSet: true}
}

func (v NullableEnumAuthorizeEditorDataAttributeResolversUserQueryDTOType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumAuthorizeEditorDataAttributeResolversUserQueryDTOType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

