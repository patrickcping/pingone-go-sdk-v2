/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
)

// checks if the AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO{}

// AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO struct for AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO
type AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO struct {
	Type EnumAuthorizeEditorDataAuthenticationDTOType `json:"type"`
	Name AuthorizeEditorDataReferenceObjectDTO `json:"name"`
	Password AuthorizeEditorDataReferenceObjectDTO `json:"password"`
}

// NewAuthorizeEditorDataAuthenticationsBasicAuthenticationDTO instantiates a new AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizeEditorDataAuthenticationsBasicAuthenticationDTO(type_ EnumAuthorizeEditorDataAuthenticationDTOType, name AuthorizeEditorDataReferenceObjectDTO, password AuthorizeEditorDataReferenceObjectDTO) *AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO {
	this := AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO{}
	this.Type = type_
	this.Name = name
	this.Password = password
	return &this
}

// NewAuthorizeEditorDataAuthenticationsBasicAuthenticationDTOWithDefaults instantiates a new AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizeEditorDataAuthenticationsBasicAuthenticationDTOWithDefaults() *AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO {
	this := AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO{}
	return &this
}

// GetType returns the Type field value
func (o *AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO) GetType() EnumAuthorizeEditorDataAuthenticationDTOType {
	if o == nil {
		var ret EnumAuthorizeEditorDataAuthenticationDTOType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO) GetTypeOk() (*EnumAuthorizeEditorDataAuthenticationDTOType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO) SetType(v EnumAuthorizeEditorDataAuthenticationDTOType) {
	o.Type = v
}

// GetName returns the Name field value
func (o *AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO) GetName() AuthorizeEditorDataReferenceObjectDTO {
	if o == nil {
		var ret AuthorizeEditorDataReferenceObjectDTO
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO) GetNameOk() (*AuthorizeEditorDataReferenceObjectDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO) SetName(v AuthorizeEditorDataReferenceObjectDTO) {
	o.Name = v
}

// GetPassword returns the Password field value
func (o *AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO) GetPassword() AuthorizeEditorDataReferenceObjectDTO {
	if o == nil {
		var ret AuthorizeEditorDataReferenceObjectDTO
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO) GetPasswordOk() (*AuthorizeEditorDataReferenceObjectDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO) SetPassword(v AuthorizeEditorDataReferenceObjectDTO) {
	o.Password = v
}

func (o AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["name"] = o.Name
	toSerialize["password"] = o.Password
	return toSerialize, nil
}

type NullableAuthorizeEditorDataAuthenticationsBasicAuthenticationDTO struct {
	value *AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO
	isSet bool
}

func (v NullableAuthorizeEditorDataAuthenticationsBasicAuthenticationDTO) Get() *AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO {
	return v.value
}

func (v *NullableAuthorizeEditorDataAuthenticationsBasicAuthenticationDTO) Set(val *AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeEditorDataAuthenticationsBasicAuthenticationDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeEditorDataAuthenticationsBasicAuthenticationDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeEditorDataAuthenticationsBasicAuthenticationDTO(val *AuthorizeEditorDataAuthenticationsBasicAuthenticationDTO) *NullableAuthorizeEditorDataAuthenticationsBasicAuthenticationDTO {
	return &NullableAuthorizeEditorDataAuthenticationsBasicAuthenticationDTO{value: val, isSet: true}
}

func (v NullableAuthorizeEditorDataAuthenticationsBasicAuthenticationDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeEditorDataAuthenticationsBasicAuthenticationDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


