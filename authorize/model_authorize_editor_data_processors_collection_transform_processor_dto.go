/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
)

// checks if the AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO{}

// AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO struct for AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO
type AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO struct {
	Name string `json:"name"`
	Type EnumAuthorizeEditorDataProcessorDTOType `json:"type"`
	Processor AuthorizeEditorDataProcessorDTO `json:"processor"`
}

// NewAuthorizeEditorDataProcessorsCollectionTransformProcessorDTO instantiates a new AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthorizeEditorDataProcessorsCollectionTransformProcessorDTO(name string, type_ EnumAuthorizeEditorDataProcessorDTOType, processor AuthorizeEditorDataProcessorDTO) *AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO {
	this := AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO{}
	this.Name = name
	this.Type = type_
	this.Processor = processor
	return &this
}

// NewAuthorizeEditorDataProcessorsCollectionTransformProcessorDTOWithDefaults instantiates a new AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthorizeEditorDataProcessorsCollectionTransformProcessorDTOWithDefaults() *AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO {
	this := AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO{}
	return &this
}

// GetName returns the Name field value
func (o *AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO) GetType() EnumAuthorizeEditorDataProcessorDTOType {
	if o == nil {
		var ret EnumAuthorizeEditorDataProcessorDTOType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO) GetTypeOk() (*EnumAuthorizeEditorDataProcessorDTOType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO) SetType(v EnumAuthorizeEditorDataProcessorDTOType) {
	o.Type = v
}

// GetProcessor returns the Processor field value
func (o *AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO) GetProcessor() AuthorizeEditorDataProcessorDTO {
	if o == nil {
		var ret AuthorizeEditorDataProcessorDTO
		return ret
	}

	return o.Processor
}

// GetProcessorOk returns a tuple with the Processor field value
// and a boolean to check if the value has been set.
func (o *AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO) GetProcessorOk() (*AuthorizeEditorDataProcessorDTO, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Processor, true
}

// SetProcessor sets field value
func (o *AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO) SetProcessor(v AuthorizeEditorDataProcessorDTO) {
	o.Processor = v
}

func (o AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["processor"] = o.Processor
	return toSerialize, nil
}

type NullableAuthorizeEditorDataProcessorsCollectionTransformProcessorDTO struct {
	value *AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO
	isSet bool
}

func (v NullableAuthorizeEditorDataProcessorsCollectionTransformProcessorDTO) Get() *AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO {
	return v.value
}

func (v *NullableAuthorizeEditorDataProcessorsCollectionTransformProcessorDTO) Set(val *AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeEditorDataProcessorsCollectionTransformProcessorDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeEditorDataProcessorsCollectionTransformProcessorDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeEditorDataProcessorsCollectionTransformProcessorDTO(val *AuthorizeEditorDataProcessorsCollectionTransformProcessorDTO) *NullableAuthorizeEditorDataProcessorsCollectionTransformProcessorDTO {
	return &NullableAuthorizeEditorDataProcessorsCollectionTransformProcessorDTO{value: val, isSet: true}
}

func (v NullableAuthorizeEditorDataProcessorsCollectionTransformProcessorDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeEditorDataProcessorsCollectionTransformProcessorDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


