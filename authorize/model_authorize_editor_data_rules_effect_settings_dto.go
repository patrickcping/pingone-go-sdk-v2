/*
PingOne Platform API - Authorize

The PingOne Platform API covering the PingOne Authorize service

API version: 2023-06-29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package authorize

import (
	"encoding/json"
	"fmt"
)

// AuthorizeEditorDataRulesEffectSettingsDTO - struct for AuthorizeEditorDataRulesEffectSettingsDTO
type AuthorizeEditorDataRulesEffectSettingsDTO struct {
	AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO *AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO
	AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO *AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO
	AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO *AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO
	AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO *AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO
}

// AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTOAsAuthorizeEditorDataRulesEffectSettingsDTO is a convenience function that returns AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO wrapped in AuthorizeEditorDataRulesEffectSettingsDTO
func AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTOAsAuthorizeEditorDataRulesEffectSettingsDTO(v *AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO) AuthorizeEditorDataRulesEffectSettingsDTO {
	return AuthorizeEditorDataRulesEffectSettingsDTO{
		AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO: v,
	}
}

// AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTOAsAuthorizeEditorDataRulesEffectSettingsDTO is a convenience function that returns AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO wrapped in AuthorizeEditorDataRulesEffectSettingsDTO
func AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTOAsAuthorizeEditorDataRulesEffectSettingsDTO(v *AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO) AuthorizeEditorDataRulesEffectSettingsDTO {
	return AuthorizeEditorDataRulesEffectSettingsDTO{
		AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO: v,
	}
}

// AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTOAsAuthorizeEditorDataRulesEffectSettingsDTO is a convenience function that returns AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO wrapped in AuthorizeEditorDataRulesEffectSettingsDTO
func AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTOAsAuthorizeEditorDataRulesEffectSettingsDTO(v *AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO) AuthorizeEditorDataRulesEffectSettingsDTO {
	return AuthorizeEditorDataRulesEffectSettingsDTO{
		AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO: v,
	}
}

// AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTOAsAuthorizeEditorDataRulesEffectSettingsDTO is a convenience function that returns AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO wrapped in AuthorizeEditorDataRulesEffectSettingsDTO
func AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTOAsAuthorizeEditorDataRulesEffectSettingsDTO(v *AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO) AuthorizeEditorDataRulesEffectSettingsDTO {
	return AuthorizeEditorDataRulesEffectSettingsDTO{
		AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *AuthorizeEditorDataRulesEffectSettingsDTO) UnmarshalJSON(data []byte) error {

	var common AuthorizeEditorDataRulesEffectSettingsDTOCommon

	if err := json.Unmarshal(data, &common); err != nil { // simple model
		return err
	}

	dst.AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO = nil
	dst.AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO = nil
	dst.AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO = nil
	dst.AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO = nil

	switch common.GetType() {
	case ENUMAUTHORIZEEDITORDATARULESEFFECTSETTINGSDTOTYPE_CONDITIONAL_DENY_ELSE_PERMIT:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO); err != nil { // simple model
			return err
		}
	case ENUMAUTHORIZEEDITORDATARULESEFFECTSETTINGSDTOTYPE_CONDITIONAL_PERMIT_ELSE_DENY:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO); err != nil { // simple model
			return err
		}
	case ENUMAUTHORIZEEDITORDATARULESEFFECTSETTINGSDTOTYPE_UNCONDITIONAL_DENY:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO); err != nil { // simple model
			return err
		}
	case ENUMAUTHORIZEEDITORDATARULESEFFECTSETTINGSDTOTYPE_UNCONDITIONAL_PERMIT:
		if err := json.Unmarshal(data, &dst.AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO); err != nil { // simple model
			return err
		}
	default:
		return fmt.Errorf("Data failed to match schemas in oneOf(AuthorizeEditorDataRulesEffectSettingsDTO)")
	}
	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src AuthorizeEditorDataRulesEffectSettingsDTO) MarshalJSON() ([]byte, error) {
	if src.AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO)
	}

	if src.AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO)
	}

	if src.AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO)
	}

	if src.AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO != nil {
		return json.Marshal(&src.AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *AuthorizeEditorDataRulesEffectSettingsDTO) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO != nil {
		return obj.AuthorizeEditorDataRulesEffectSettingsConditionalDenyElsePermitDTO
	}

	if obj.AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO != nil {
		return obj.AuthorizeEditorDataRulesEffectSettingsConditionalPermitElseDenyDTO
	}

	if obj.AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO != nil {
		return obj.AuthorizeEditorDataRulesEffectSettingsUnconditionalDenyDTO
	}

	if obj.AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO != nil {
		return obj.AuthorizeEditorDataRulesEffectSettingsUnconditionalPermitDTO
	}

	// all schemas are nil
	return nil
}

type NullableAuthorizeEditorDataRulesEffectSettingsDTO struct {
	value *AuthorizeEditorDataRulesEffectSettingsDTO
	isSet bool
}

func (v NullableAuthorizeEditorDataRulesEffectSettingsDTO) Get() *AuthorizeEditorDataRulesEffectSettingsDTO {
	return v.value
}

func (v *NullableAuthorizeEditorDataRulesEffectSettingsDTO) Set(val *AuthorizeEditorDataRulesEffectSettingsDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthorizeEditorDataRulesEffectSettingsDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthorizeEditorDataRulesEffectSettingsDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthorizeEditorDataRulesEffectSettingsDTO(val *AuthorizeEditorDataRulesEffectSettingsDTO) *NullableAuthorizeEditorDataRulesEffectSettingsDTO {
	return &NullableAuthorizeEditorDataRulesEffectSettingsDTO{value: val, isSet: true}
}

func (v NullableAuthorizeEditorDataRulesEffectSettingsDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthorizeEditorDataRulesEffectSettingsDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


