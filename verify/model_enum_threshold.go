/*
PingOne Platform API - PingOne Verify

The PingOne Platform API covering the PingOne Verify service

API version: 2023-07-20
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package verify

import (
	"encoding/json"
	"fmt"
)

// EnumThreshold A string that defines the verification comparison threshold. Options are `LOW`, `MEDIUM` and `HIGH`.
type EnumThreshold string

// List of EnumThreshold
const (
	ENUMTHRESHOLD_LOW    EnumThreshold = "LOW"
	ENUMTHRESHOLD_MEDIUM EnumThreshold = "MEDIUM"
	ENUMTHRESHOLD_HIGH   EnumThreshold = "HIGH"
)

// All allowed values of EnumThreshold enum
var AllowedEnumThresholdEnumValues = []EnumThreshold{
	"LOW",
	"MEDIUM",
	"HIGH",
}

func (v *EnumThreshold) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumThreshold(value)
	for _, existing := range AllowedEnumThresholdEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumThreshold(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumThresholdFromValue returns a pointer to a valid EnumThreshold
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumThresholdFromValue(v string) (*EnumThreshold, error) {
	ev := EnumThreshold(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumThreshold: valid values are %v", v, AllowedEnumThresholdEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumThreshold) IsValid() bool {
	for _, existing := range AllowedEnumThresholdEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumThreshold value
func (v EnumThreshold) Ptr() *EnumThreshold {
	return &v
}

type NullableEnumThreshold struct {
	value *EnumThreshold
	isSet bool
}

func (v NullableEnumThreshold) Get() *EnumThreshold {
	return v.value
}

func (v *NullableEnumThreshold) Set(val *EnumThreshold) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumThreshold) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumThreshold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumThreshold(val *EnumThreshold) *NullableEnumThreshold {
	return &NullableEnumThreshold{value: val, isSet: true}
}

func (v NullableEnumThreshold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumThreshold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
