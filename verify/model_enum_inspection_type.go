/*
PingOne Platform API - PingOne Verify

The PingOne Platform API covering the PingOne Verify service

API version: 2023-07-20
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package verify

import (
	"encoding/json"
	"fmt"
)

// EnumInspectionType A string that defines the mechanism used to authenticate a `governmentId` document.  Options are `AUTOMATIC`, `MANUAL`, or `STEP_UP`.
type EnumInspectionType string

// List of EnumInspectionType
const (
	ENUMINSPECTIONTYPE_AUTOMATIC EnumInspectionType = "AUTOMATIC"
	ENUMINSPECTIONTYPE_MANUAL    EnumInspectionType = "MANUAL"
	ENUMINSPECTIONTYPE_STEP_UP   EnumInspectionType = "STEP_UP"
)

// All allowed values of EnumInspectionType enum
var AllowedEnumInspectionTypeEnumValues = []EnumInspectionType{
	"AUTOMATIC",
	"MANUAL",
	"STEP_UP",
}

func (v *EnumInspectionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumInspectionType(value)
	for _, existing := range AllowedEnumInspectionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumInspectionType(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumInspectionTypeFromValue returns a pointer to a valid EnumInspectionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumInspectionTypeFromValue(v string) (*EnumInspectionType, error) {
	ev := EnumInspectionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumInspectionType: valid values are %v", v, AllowedEnumInspectionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumInspectionType) IsValid() bool {
	for _, existing := range AllowedEnumInspectionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumInspectionType value
func (v EnumInspectionType) Ptr() *EnumInspectionType {
	return &v
}

type NullableEnumInspectionType struct {
	value *EnumInspectionType
	isSet bool
}

func (v NullableEnumInspectionType) Get() *EnumInspectionType {
	return v.value
}

func (v *NullableEnumInspectionType) Set(val *EnumInspectionType) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumInspectionType) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumInspectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumInspectionType(val *EnumInspectionType) *NullableEnumInspectionType {
	return &NullableEnumInspectionType{value: val, isSet: true}
}

func (v NullableEnumInspectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumInspectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
