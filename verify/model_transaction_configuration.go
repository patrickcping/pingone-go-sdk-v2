/*
PingOne Platform API - PingOne Verify

The PingOne Platform API covering the PingOne Verify service

API version: 2023-07-20
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package verify

import (
	"encoding/json"
)

// checks if the TransactionConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TransactionConfiguration{}

// TransactionConfiguration struct for TransactionConfiguration
type TransactionConfiguration struct {
	Timeout            *TransactionConfigurationTimeout        `json:"timeout,omitempty"`
	DataCollection     *TransactionConfigurationDataCollection `json:"dataCollection,omitempty"`
	DataCollectionOnly *bool                                   `json:"dataCollectionOnly,omitempty"`
}

// NewTransactionConfiguration instantiates a new TransactionConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionConfiguration() *TransactionConfiguration {
	this := TransactionConfiguration{}
	return &this
}

// NewTransactionConfigurationWithDefaults instantiates a new TransactionConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionConfigurationWithDefaults() *TransactionConfiguration {
	this := TransactionConfiguration{}
	return &this
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *TransactionConfiguration) GetTimeout() TransactionConfigurationTimeout {
	if o == nil || IsNil(o.Timeout) {
		var ret TransactionConfigurationTimeout
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionConfiguration) GetTimeoutOk() (*TransactionConfigurationTimeout, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *TransactionConfiguration) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given TransactionConfigurationTimeout and assigns it to the Timeout field.
func (o *TransactionConfiguration) SetTimeout(v TransactionConfigurationTimeout) {
	o.Timeout = &v
}

// GetDataCollection returns the DataCollection field value if set, zero value otherwise.
func (o *TransactionConfiguration) GetDataCollection() TransactionConfigurationDataCollection {
	if o == nil || IsNil(o.DataCollection) {
		var ret TransactionConfigurationDataCollection
		return ret
	}
	return *o.DataCollection
}

// GetDataCollectionOk returns a tuple with the DataCollection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionConfiguration) GetDataCollectionOk() (*TransactionConfigurationDataCollection, bool) {
	if o == nil || IsNil(o.DataCollection) {
		return nil, false
	}
	return o.DataCollection, true
}

// HasDataCollection returns a boolean if a field has been set.
func (o *TransactionConfiguration) HasDataCollection() bool {
	if o != nil && !IsNil(o.DataCollection) {
		return true
	}

	return false
}

// SetDataCollection gets a reference to the given TransactionConfigurationDataCollection and assigns it to the DataCollection field.
func (o *TransactionConfiguration) SetDataCollection(v TransactionConfigurationDataCollection) {
	o.DataCollection = &v
}

// GetDataCollectionOnly returns the DataCollectionOnly field value if set, zero value otherwise.
func (o *TransactionConfiguration) GetDataCollectionOnly() bool {
	if o == nil || IsNil(o.DataCollectionOnly) {
		var ret bool
		return ret
	}
	return *o.DataCollectionOnly
}

// GetDataCollectionOnlyOk returns a tuple with the DataCollectionOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionConfiguration) GetDataCollectionOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.DataCollectionOnly) {
		return nil, false
	}
	return o.DataCollectionOnly, true
}

// HasDataCollectionOnly returns a boolean if a field has been set.
func (o *TransactionConfiguration) HasDataCollectionOnly() bool {
	if o != nil && !IsNil(o.DataCollectionOnly) {
		return true
	}

	return false
}

// SetDataCollectionOnly gets a reference to the given bool and assigns it to the DataCollectionOnly field.
func (o *TransactionConfiguration) SetDataCollectionOnly(v bool) {
	o.DataCollectionOnly = &v
}

func (o TransactionConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TransactionConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.DataCollection) {
		toSerialize["dataCollection"] = o.DataCollection
	}
	if !IsNil(o.DataCollectionOnly) {
		toSerialize["dataCollectionOnly"] = o.DataCollectionOnly
	}
	return toSerialize, nil
}

type NullableTransactionConfiguration struct {
	value *TransactionConfiguration
	isSet bool
}

func (v NullableTransactionConfiguration) Get() *TransactionConfiguration {
	return v.value
}

func (v *NullableTransactionConfiguration) Set(val *TransactionConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionConfiguration(val *TransactionConfiguration) *NullableTransactionConfiguration {
	return &NullableTransactionConfiguration{value: val, isSet: true}
}

func (v NullableTransactionConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
