/*
PingOne Platform API - PingOne Verify

The PingOne Platform API covering the PingOne Verify service

API version: 2023-07-20
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package verify

import (
	"encoding/json"
	"fmt"
)

// EnumVerify A string that defines the verification check requirements. Options are `REQUIRED`, `OPTIONAL` and `DISABLED`.
type EnumVerify string

// List of EnumVerify
const (
	ENUMVERIFY_REQUIRED EnumVerify = "REQUIRED"
	ENUMVERIFY_OPTIONAL EnumVerify = "OPTIONAL"
	ENUMVERIFY_DISABLED EnumVerify = "DISABLED"
)

// All allowed values of EnumVerify enum
var AllowedEnumVerifyEnumValues = []EnumVerify{
	"REQUIRED",
	"OPTIONAL",
	"DISABLED",
}

func (v *EnumVerify) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EnumVerify(value)
	for _, existing := range AllowedEnumVerifyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	*v = EnumVerify(fmt.Sprintf("%s", "UNKNOWN"))
	return nil
}

// NewEnumVerifyFromValue returns a pointer to a valid EnumVerify
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEnumVerifyFromValue(v string) (*EnumVerify, error) {
	ev := EnumVerify(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EnumVerify: valid values are %v", v, AllowedEnumVerifyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EnumVerify) IsValid() bool {
	for _, existing := range AllowedEnumVerifyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EnumVerify value
func (v EnumVerify) Ptr() *EnumVerify {
	return &v
}

type NullableEnumVerify struct {
	value *EnumVerify
	isSet bool
}

func (v NullableEnumVerify) Get() *EnumVerify {
	return v.value
}

func (v *NullableEnumVerify) Set(val *EnumVerify) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumVerify) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumVerify) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumVerify(val *EnumVerify) *NullableEnumVerify {
	return &NullableEnumVerify{value: val, isSet: true}
}

func (v NullableEnumVerify) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumVerify) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
